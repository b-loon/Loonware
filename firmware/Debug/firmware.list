
firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036d0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08003790  08003790  00013790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037fc  080037fc  00020004  2**0
                  CONTENTS
  4 .ARM          00000008  080037fc  080037fc  000137fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003804  08003804  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003804  08003804  00013804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003808  08003808  00013808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  0800380c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000019c  20000004  08003810  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a0  08003810  000201a0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c375  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001c9a  00000000  00000000  0002c3a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cb0  00000000  00000000  0002e040  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bb8  00000000  00000000  0002ecf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000149ec  00000000  00000000  0002f8a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a56f  00000000  00000000  00044294  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00083ec6  00000000  00000000  0004e803  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d26c9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d78  00000000  00000000  000d2744  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003778 	.word	0x08003778

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	08003778 	.word	0x08003778

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__udivmoddi4>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	464f      	mov	r7, r9
 8000264:	4646      	mov	r6, r8
 8000266:	46d6      	mov	lr, sl
 8000268:	b5c0      	push	{r6, r7, lr}
 800026a:	0004      	movs	r4, r0
 800026c:	b082      	sub	sp, #8
 800026e:	000d      	movs	r5, r1
 8000270:	4691      	mov	r9, r2
 8000272:	4698      	mov	r8, r3
 8000274:	428b      	cmp	r3, r1
 8000276:	d82f      	bhi.n	80002d8 <__udivmoddi4+0x78>
 8000278:	d02c      	beq.n	80002d4 <__udivmoddi4+0x74>
 800027a:	4641      	mov	r1, r8
 800027c:	4648      	mov	r0, r9
 800027e:	f000 f8b1 	bl	80003e4 <__clzdi2>
 8000282:	0029      	movs	r1, r5
 8000284:	0006      	movs	r6, r0
 8000286:	0020      	movs	r0, r4
 8000288:	f000 f8ac 	bl	80003e4 <__clzdi2>
 800028c:	1a33      	subs	r3, r6, r0
 800028e:	469c      	mov	ip, r3
 8000290:	3b20      	subs	r3, #32
 8000292:	469a      	mov	sl, r3
 8000294:	d500      	bpl.n	8000298 <__udivmoddi4+0x38>
 8000296:	e076      	b.n	8000386 <__udivmoddi4+0x126>
 8000298:	464b      	mov	r3, r9
 800029a:	4652      	mov	r2, sl
 800029c:	4093      	lsls	r3, r2
 800029e:	001f      	movs	r7, r3
 80002a0:	464b      	mov	r3, r9
 80002a2:	4662      	mov	r2, ip
 80002a4:	4093      	lsls	r3, r2
 80002a6:	001e      	movs	r6, r3
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d828      	bhi.n	80002fe <__udivmoddi4+0x9e>
 80002ac:	d025      	beq.n	80002fa <__udivmoddi4+0x9a>
 80002ae:	4653      	mov	r3, sl
 80002b0:	1ba4      	subs	r4, r4, r6
 80002b2:	41bd      	sbcs	r5, r7
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	da00      	bge.n	80002ba <__udivmoddi4+0x5a>
 80002b8:	e07b      	b.n	80003b2 <__udivmoddi4+0x152>
 80002ba:	2200      	movs	r2, #0
 80002bc:	2300      	movs	r3, #0
 80002be:	9200      	str	r2, [sp, #0]
 80002c0:	9301      	str	r3, [sp, #4]
 80002c2:	2301      	movs	r3, #1
 80002c4:	4652      	mov	r2, sl
 80002c6:	4093      	lsls	r3, r2
 80002c8:	9301      	str	r3, [sp, #4]
 80002ca:	2301      	movs	r3, #1
 80002cc:	4662      	mov	r2, ip
 80002ce:	4093      	lsls	r3, r2
 80002d0:	9300      	str	r3, [sp, #0]
 80002d2:	e018      	b.n	8000306 <__udivmoddi4+0xa6>
 80002d4:	4282      	cmp	r2, r0
 80002d6:	d9d0      	bls.n	800027a <__udivmoddi4+0x1a>
 80002d8:	2200      	movs	r2, #0
 80002da:	2300      	movs	r3, #0
 80002dc:	9200      	str	r2, [sp, #0]
 80002de:	9301      	str	r3, [sp, #4]
 80002e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <__udivmoddi4+0x8a>
 80002e6:	601c      	str	r4, [r3, #0]
 80002e8:	605d      	str	r5, [r3, #4]
 80002ea:	9800      	ldr	r0, [sp, #0]
 80002ec:	9901      	ldr	r1, [sp, #4]
 80002ee:	b002      	add	sp, #8
 80002f0:	bc1c      	pop	{r2, r3, r4}
 80002f2:	4690      	mov	r8, r2
 80002f4:	4699      	mov	r9, r3
 80002f6:	46a2      	mov	sl, r4
 80002f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002fa:	42a3      	cmp	r3, r4
 80002fc:	d9d7      	bls.n	80002ae <__udivmoddi4+0x4e>
 80002fe:	2200      	movs	r2, #0
 8000300:	2300      	movs	r3, #0
 8000302:	9200      	str	r2, [sp, #0]
 8000304:	9301      	str	r3, [sp, #4]
 8000306:	4663      	mov	r3, ip
 8000308:	2b00      	cmp	r3, #0
 800030a:	d0e9      	beq.n	80002e0 <__udivmoddi4+0x80>
 800030c:	07fb      	lsls	r3, r7, #31
 800030e:	4698      	mov	r8, r3
 8000310:	4641      	mov	r1, r8
 8000312:	0872      	lsrs	r2, r6, #1
 8000314:	430a      	orrs	r2, r1
 8000316:	087b      	lsrs	r3, r7, #1
 8000318:	4666      	mov	r6, ip
 800031a:	e00e      	b.n	800033a <__udivmoddi4+0xda>
 800031c:	42ab      	cmp	r3, r5
 800031e:	d101      	bne.n	8000324 <__udivmoddi4+0xc4>
 8000320:	42a2      	cmp	r2, r4
 8000322:	d80c      	bhi.n	800033e <__udivmoddi4+0xde>
 8000324:	1aa4      	subs	r4, r4, r2
 8000326:	419d      	sbcs	r5, r3
 8000328:	2001      	movs	r0, #1
 800032a:	1924      	adds	r4, r4, r4
 800032c:	416d      	adcs	r5, r5
 800032e:	2100      	movs	r1, #0
 8000330:	3e01      	subs	r6, #1
 8000332:	1824      	adds	r4, r4, r0
 8000334:	414d      	adcs	r5, r1
 8000336:	2e00      	cmp	r6, #0
 8000338:	d006      	beq.n	8000348 <__udivmoddi4+0xe8>
 800033a:	42ab      	cmp	r3, r5
 800033c:	d9ee      	bls.n	800031c <__udivmoddi4+0xbc>
 800033e:	3e01      	subs	r6, #1
 8000340:	1924      	adds	r4, r4, r4
 8000342:	416d      	adcs	r5, r5
 8000344:	2e00      	cmp	r6, #0
 8000346:	d1f8      	bne.n	800033a <__udivmoddi4+0xda>
 8000348:	9800      	ldr	r0, [sp, #0]
 800034a:	9901      	ldr	r1, [sp, #4]
 800034c:	4653      	mov	r3, sl
 800034e:	1900      	adds	r0, r0, r4
 8000350:	4169      	adcs	r1, r5
 8000352:	2b00      	cmp	r3, #0
 8000354:	db23      	blt.n	800039e <__udivmoddi4+0x13e>
 8000356:	002b      	movs	r3, r5
 8000358:	4652      	mov	r2, sl
 800035a:	40d3      	lsrs	r3, r2
 800035c:	002a      	movs	r2, r5
 800035e:	4664      	mov	r4, ip
 8000360:	40e2      	lsrs	r2, r4
 8000362:	001c      	movs	r4, r3
 8000364:	4653      	mov	r3, sl
 8000366:	0015      	movs	r5, r2
 8000368:	2b00      	cmp	r3, #0
 800036a:	db2d      	blt.n	80003c8 <__udivmoddi4+0x168>
 800036c:	0026      	movs	r6, r4
 800036e:	4657      	mov	r7, sl
 8000370:	40be      	lsls	r6, r7
 8000372:	0033      	movs	r3, r6
 8000374:	0026      	movs	r6, r4
 8000376:	4667      	mov	r7, ip
 8000378:	40be      	lsls	r6, r7
 800037a:	0032      	movs	r2, r6
 800037c:	1a80      	subs	r0, r0, r2
 800037e:	4199      	sbcs	r1, r3
 8000380:	9000      	str	r0, [sp, #0]
 8000382:	9101      	str	r1, [sp, #4]
 8000384:	e7ac      	b.n	80002e0 <__udivmoddi4+0x80>
 8000386:	4662      	mov	r2, ip
 8000388:	2320      	movs	r3, #32
 800038a:	1a9b      	subs	r3, r3, r2
 800038c:	464a      	mov	r2, r9
 800038e:	40da      	lsrs	r2, r3
 8000390:	4661      	mov	r1, ip
 8000392:	0013      	movs	r3, r2
 8000394:	4642      	mov	r2, r8
 8000396:	408a      	lsls	r2, r1
 8000398:	0017      	movs	r7, r2
 800039a:	431f      	orrs	r7, r3
 800039c:	e780      	b.n	80002a0 <__udivmoddi4+0x40>
 800039e:	4662      	mov	r2, ip
 80003a0:	2320      	movs	r3, #32
 80003a2:	1a9b      	subs	r3, r3, r2
 80003a4:	002a      	movs	r2, r5
 80003a6:	4666      	mov	r6, ip
 80003a8:	409a      	lsls	r2, r3
 80003aa:	0023      	movs	r3, r4
 80003ac:	40f3      	lsrs	r3, r6
 80003ae:	4313      	orrs	r3, r2
 80003b0:	e7d4      	b.n	800035c <__udivmoddi4+0xfc>
 80003b2:	4662      	mov	r2, ip
 80003b4:	2320      	movs	r3, #32
 80003b6:	2100      	movs	r1, #0
 80003b8:	1a9b      	subs	r3, r3, r2
 80003ba:	2200      	movs	r2, #0
 80003bc:	9100      	str	r1, [sp, #0]
 80003be:	9201      	str	r2, [sp, #4]
 80003c0:	2201      	movs	r2, #1
 80003c2:	40da      	lsrs	r2, r3
 80003c4:	9201      	str	r2, [sp, #4]
 80003c6:	e780      	b.n	80002ca <__udivmoddi4+0x6a>
 80003c8:	2320      	movs	r3, #32
 80003ca:	4662      	mov	r2, ip
 80003cc:	0026      	movs	r6, r4
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	40de      	lsrs	r6, r3
 80003d2:	002f      	movs	r7, r5
 80003d4:	46b0      	mov	r8, r6
 80003d6:	4666      	mov	r6, ip
 80003d8:	40b7      	lsls	r7, r6
 80003da:	4646      	mov	r6, r8
 80003dc:	003b      	movs	r3, r7
 80003de:	4333      	orrs	r3, r6
 80003e0:	e7c8      	b.n	8000374 <__udivmoddi4+0x114>
 80003e2:	46c0      	nop			; (mov r8, r8)

080003e4 <__clzdi2>:
 80003e4:	b510      	push	{r4, lr}
 80003e6:	2900      	cmp	r1, #0
 80003e8:	d103      	bne.n	80003f2 <__clzdi2+0xe>
 80003ea:	f000 f807 	bl	80003fc <__clzsi2>
 80003ee:	3020      	adds	r0, #32
 80003f0:	e002      	b.n	80003f8 <__clzdi2+0x14>
 80003f2:	1c08      	adds	r0, r1, #0
 80003f4:	f000 f802 	bl	80003fc <__clzsi2>
 80003f8:	bd10      	pop	{r4, pc}
 80003fa:	46c0      	nop			; (mov r8, r8)

080003fc <__clzsi2>:
 80003fc:	211c      	movs	r1, #28
 80003fe:	2301      	movs	r3, #1
 8000400:	041b      	lsls	r3, r3, #16
 8000402:	4298      	cmp	r0, r3
 8000404:	d301      	bcc.n	800040a <__clzsi2+0xe>
 8000406:	0c00      	lsrs	r0, r0, #16
 8000408:	3910      	subs	r1, #16
 800040a:	0a1b      	lsrs	r3, r3, #8
 800040c:	4298      	cmp	r0, r3
 800040e:	d301      	bcc.n	8000414 <__clzsi2+0x18>
 8000410:	0a00      	lsrs	r0, r0, #8
 8000412:	3908      	subs	r1, #8
 8000414:	091b      	lsrs	r3, r3, #4
 8000416:	4298      	cmp	r0, r3
 8000418:	d301      	bcc.n	800041e <__clzsi2+0x22>
 800041a:	0900      	lsrs	r0, r0, #4
 800041c:	3904      	subs	r1, #4
 800041e:	a202      	add	r2, pc, #8	; (adr r2, 8000428 <__clzsi2+0x2c>)
 8000420:	5c10      	ldrb	r0, [r2, r0]
 8000422:	1840      	adds	r0, r0, r1
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	02020304 	.word	0x02020304
 800042c:	01010101 	.word	0x01010101
	...

08000438 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b082      	sub	sp, #8
 800043c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800043e:	1dfb      	adds	r3, r7, #7
 8000440:	2200      	movs	r2, #0
 8000442:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000444:	4b0b      	ldr	r3, [pc, #44]	; (8000474 <HAL_Init+0x3c>)
 8000446:	681a      	ldr	r2, [r3, #0]
 8000448:	4b0a      	ldr	r3, [pc, #40]	; (8000474 <HAL_Init+0x3c>)
 800044a:	2140      	movs	r1, #64	; 0x40
 800044c:	430a      	orrs	r2, r1
 800044e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000450:	2000      	movs	r0, #0
 8000452:	f000 f811 	bl	8000478 <HAL_InitTick>
 8000456:	1e03      	subs	r3, r0, #0
 8000458:	d003      	beq.n	8000462 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800045a:	1dfb      	adds	r3, r7, #7
 800045c:	2201      	movs	r2, #1
 800045e:	701a      	strb	r2, [r3, #0]
 8000460:	e001      	b.n	8000466 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000462:	f002 ff9f 	bl	80033a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000466:	1dfb      	adds	r3, r7, #7
 8000468:	781b      	ldrb	r3, [r3, #0]
}
 800046a:	0018      	movs	r0, r3
 800046c:	46bd      	mov	sp, r7
 800046e:	b002      	add	sp, #8
 8000470:	bd80      	pop	{r7, pc}
 8000472:	46c0      	nop			; (mov r8, r8)
 8000474:	40022000 	.word	0x40022000

08000478 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b084      	sub	sp, #16
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000480:	230f      	movs	r3, #15
 8000482:	18fb      	adds	r3, r7, r3
 8000484:	2200      	movs	r2, #0
 8000486:	701a      	strb	r2, [r3, #0]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000488:	4b0f      	ldr	r3, [pc, #60]	; (80004c8 <HAL_InitTick+0x50>)
 800048a:	681a      	ldr	r2, [r3, #0]
 800048c:	23fa      	movs	r3, #250	; 0xfa
 800048e:	0099      	lsls	r1, r3, #2
 8000490:	0010      	movs	r0, r2
 8000492:	f7ff fe39 	bl	8000108 <__udivsi3>
 8000496:	0003      	movs	r3, r0
 8000498:	0018      	movs	r0, r3
 800049a:	f000 fbe6 	bl	8000c6a <HAL_SYSTICK_Config>
 800049e:	1e03      	subs	r3, r0, #0
 80004a0:	d004      	beq.n	80004ac <HAL_InitTick+0x34>
  {
    status = HAL_ERROR;
 80004a2:	230f      	movs	r3, #15
 80004a4:	18fb      	adds	r3, r7, r3
 80004a6:	2201      	movs	r2, #1
 80004a8:	701a      	strb	r2, [r3, #0]
 80004aa:	e006      	b.n	80004ba <HAL_InitTick+0x42>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 80004ac:	6879      	ldr	r1, [r7, #4]
 80004ae:	2301      	movs	r3, #1
 80004b0:	425b      	negs	r3, r3
 80004b2:	2200      	movs	r2, #0
 80004b4:	0018      	movs	r0, r3
 80004b6:	f000 fbb3 	bl	8000c20 <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 80004ba:	230f      	movs	r3, #15
 80004bc:	18fb      	adds	r3, r7, r3
 80004be:	781b      	ldrb	r3, [r3, #0]
}
 80004c0:	0018      	movs	r0, r3
 80004c2:	46bd      	mov	sp, r7
 80004c4:	b004      	add	sp, #16
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	20000000 	.word	0x20000000

080004cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  uwTick++;
 80004d0:	4b03      	ldr	r3, [pc, #12]	; (80004e0 <HAL_IncTick+0x14>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	1c5a      	adds	r2, r3, #1
 80004d6:	4b02      	ldr	r3, [pc, #8]	; (80004e0 <HAL_IncTick+0x14>)
 80004d8:	601a      	str	r2, [r3, #0]
}
 80004da:	46c0      	nop			; (mov r8, r8)
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	20000020 	.word	0x20000020

080004e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  return uwTick;
 80004e8:	4b02      	ldr	r3, [pc, #8]	; (80004f4 <HAL_GetTick+0x10>)
 80004ea:	681b      	ldr	r3, [r3, #0]
}
 80004ec:	0018      	movs	r0, r3
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)
 80004f4:	20000020 	.word	0x20000020

080004f8 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	2b00      	cmp	r3, #0
 8000504:	d101      	bne.n	800050a <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8000506:	2301      	movs	r3, #1
 8000508:	e159      	b.n	80007be <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800050e:	2b00      	cmp	r3, #0
 8000510:	d10a      	bne.n	8000528 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	2200      	movs	r2, #0
 8000516:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	2250      	movs	r2, #80	; 0x50
 800051c:	2100      	movs	r1, #0
 800051e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	0018      	movs	r0, r3
 8000524:	f002 ff52 	bl	80033cc <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800052c:	2210      	movs	r2, #16
 800052e:	4013      	ands	r3, r2
 8000530:	2b10      	cmp	r3, #16
 8000532:	d005      	beq.n	8000540 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	689b      	ldr	r3, [r3, #8]
 800053a:	2204      	movs	r2, #4
 800053c:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800053e:	d00b      	beq.n	8000558 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000544:	2210      	movs	r2, #16
 8000546:	431a      	orrs	r2, r3
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	2250      	movs	r2, #80	; 0x50
 8000550:	2100      	movs	r1, #0
 8000552:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8000554:	2301      	movs	r3, #1
 8000556:	e132      	b.n	80007be <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800055c:	4a9a      	ldr	r2, [pc, #616]	; (80007c8 <HAL_ADC_Init+0x2d0>)
 800055e:	4013      	ands	r3, r2
 8000560:	2202      	movs	r2, #2
 8000562:	431a      	orrs	r2, r3
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	689b      	ldr	r3, [r3, #8]
 800056e:	2203      	movs	r2, #3
 8000570:	4013      	ands	r3, r2
 8000572:	2b01      	cmp	r3, #1
 8000574:	d108      	bne.n	8000588 <HAL_ADC_Init+0x90>
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	2201      	movs	r2, #1
 800057e:	4013      	ands	r3, r2
 8000580:	2b01      	cmp	r3, #1
 8000582:	d101      	bne.n	8000588 <HAL_ADC_Init+0x90>
 8000584:	2301      	movs	r3, #1
 8000586:	e000      	b.n	800058a <HAL_ADC_Init+0x92>
 8000588:	2300      	movs	r3, #0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d149      	bne.n	8000622 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	685a      	ldr	r2, [r3, #4]
 8000592:	23c0      	movs	r3, #192	; 0xc0
 8000594:	061b      	lsls	r3, r3, #24
 8000596:	429a      	cmp	r2, r3
 8000598:	d00b      	beq.n	80005b2 <HAL_ADC_Init+0xba>
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	685a      	ldr	r2, [r3, #4]
 800059e:	2380      	movs	r3, #128	; 0x80
 80005a0:	05db      	lsls	r3, r3, #23
 80005a2:	429a      	cmp	r2, r3
 80005a4:	d005      	beq.n	80005b2 <HAL_ADC_Init+0xba>
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	685a      	ldr	r2, [r3, #4]
 80005aa:	2380      	movs	r3, #128	; 0x80
 80005ac:	061b      	lsls	r3, r3, #24
 80005ae:	429a      	cmp	r2, r3
 80005b0:	d111      	bne.n	80005d6 <HAL_ADC_Init+0xde>
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	691a      	ldr	r2, [r3, #16]
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	0092      	lsls	r2, r2, #2
 80005be:	0892      	lsrs	r2, r2, #2
 80005c0:	611a      	str	r2, [r3, #16]
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	6919      	ldr	r1, [r3, #16]
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	685a      	ldr	r2, [r3, #4]
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	430a      	orrs	r2, r1
 80005d2:	611a      	str	r2, [r3, #16]
 80005d4:	e014      	b.n	8000600 <HAL_ADC_Init+0x108>
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	691a      	ldr	r2, [r3, #16]
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	0092      	lsls	r2, r2, #2
 80005e2:	0892      	lsrs	r2, r2, #2
 80005e4:	611a      	str	r2, [r3, #16]
 80005e6:	4b79      	ldr	r3, [pc, #484]	; (80007cc <HAL_ADC_Init+0x2d4>)
 80005e8:	681a      	ldr	r2, [r3, #0]
 80005ea:	4b78      	ldr	r3, [pc, #480]	; (80007cc <HAL_ADC_Init+0x2d4>)
 80005ec:	4978      	ldr	r1, [pc, #480]	; (80007d0 <HAL_ADC_Init+0x2d8>)
 80005ee:	400a      	ands	r2, r1
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	4b76      	ldr	r3, [pc, #472]	; (80007cc <HAL_ADC_Init+0x2d4>)
 80005f4:	6819      	ldr	r1, [r3, #0]
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	685a      	ldr	r2, [r3, #4]
 80005fa:	4b74      	ldr	r3, [pc, #464]	; (80007cc <HAL_ADC_Init+0x2d4>)
 80005fc:	430a      	orrs	r2, r1
 80005fe:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	68da      	ldr	r2, [r3, #12]
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	2118      	movs	r1, #24
 800060c:	438a      	bics	r2, r1
 800060e:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	68d9      	ldr	r1, [r3, #12]
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	689a      	ldr	r2, [r3, #8]
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	430a      	orrs	r2, r1
 8000620:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8000622:	4b6a      	ldr	r3, [pc, #424]	; (80007cc <HAL_ADC_Init+0x2d4>)
 8000624:	681a      	ldr	r2, [r3, #0]
 8000626:	4b69      	ldr	r3, [pc, #420]	; (80007cc <HAL_ADC_Init+0x2d4>)
 8000628:	496a      	ldr	r1, [pc, #424]	; (80007d4 <HAL_ADC_Init+0x2dc>)
 800062a:	400a      	ands	r2, r1
 800062c:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 800062e:	4b67      	ldr	r3, [pc, #412]	; (80007cc <HAL_ADC_Init+0x2d4>)
 8000630:	6819      	ldr	r1, [r3, #0]
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000636:	065a      	lsls	r2, r3, #25
 8000638:	4b64      	ldr	r3, [pc, #400]	; (80007cc <HAL_ADC_Init+0x2d4>)
 800063a:	430a      	orrs	r2, r1
 800063c:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	689a      	ldr	r2, [r3, #8]
 8000644:	2380      	movs	r3, #128	; 0x80
 8000646:	055b      	lsls	r3, r3, #21
 8000648:	4013      	ands	r3, r2
 800064a:	d108      	bne.n	800065e <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	689a      	ldr	r2, [r3, #8]
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	2180      	movs	r1, #128	; 0x80
 8000658:	0549      	lsls	r1, r1, #21
 800065a:	430a      	orrs	r2, r1
 800065c:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	68da      	ldr	r2, [r3, #12]
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	495b      	ldr	r1, [pc, #364]	; (80007d8 <HAL_ADC_Init+0x2e0>)
 800066a:	400a      	ands	r2, r1
 800066c:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	68d9      	ldr	r1, [r3, #12]
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	691b      	ldr	r3, [r3, #16]
 800067c:	2b02      	cmp	r3, #2
 800067e:	d101      	bne.n	8000684 <HAL_ADC_Init+0x18c>
 8000680:	2304      	movs	r3, #4
 8000682:	e000      	b.n	8000686 <HAL_ADC_Init+0x18e>
 8000684:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000686:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	2020      	movs	r0, #32
 800068c:	5c1b      	ldrb	r3, [r3, r0]
 800068e:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000690:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	202c      	movs	r0, #44	; 0x2c
 8000696:	5c1b      	ldrb	r3, [r3, r0]
 8000698:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800069a:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80006a0:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	699b      	ldr	r3, [r3, #24]
 80006a6:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 80006a8:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	69db      	ldr	r3, [r3, #28]
 80006ae:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80006b0:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	430a      	orrs	r2, r1
 80006b8:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80006be:	23c2      	movs	r3, #194	; 0xc2
 80006c0:	33ff      	adds	r3, #255	; 0xff
 80006c2:	429a      	cmp	r2, r3
 80006c4:	d00b      	beq.n	80006de <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	68d9      	ldr	r1, [r3, #12]
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80006d4:	431a      	orrs	r2, r3
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	430a      	orrs	r2, r1
 80006dc:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	2221      	movs	r2, #33	; 0x21
 80006e2:	5c9b      	ldrb	r3, [r3, r2]
 80006e4:	2b01      	cmp	r3, #1
 80006e6:	d11a      	bne.n	800071e <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	2220      	movs	r2, #32
 80006ec:	5c9b      	ldrb	r3, [r3, r2]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d109      	bne.n	8000706 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	68da      	ldr	r2, [r3, #12]
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	2180      	movs	r1, #128	; 0x80
 80006fe:	0249      	lsls	r1, r1, #9
 8000700:	430a      	orrs	r2, r1
 8000702:	60da      	str	r2, [r3, #12]
 8000704:	e00b      	b.n	800071e <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800070a:	2220      	movs	r2, #32
 800070c:	431a      	orrs	r2, r3
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000716:	2201      	movs	r2, #1
 8000718:	431a      	orrs	r2, r3
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000722:	2b01      	cmp	r3, #1
 8000724:	d11f      	bne.n	8000766 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	691a      	ldr	r2, [r3, #16]
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	492a      	ldr	r1, [pc, #168]	; (80007dc <HAL_ADC_Init+0x2e4>)
 8000732:	400a      	ands	r2, r1
 8000734:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	6919      	ldr	r1, [r3, #16]
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000744:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 800074a:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	430a      	orrs	r2, r1
 8000752:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	691a      	ldr	r2, [r3, #16]
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	2101      	movs	r1, #1
 8000760:	430a      	orrs	r2, r1
 8000762:	611a      	str	r2, [r3, #16]
 8000764:	e00e      	b.n	8000784 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	691b      	ldr	r3, [r3, #16]
 800076c:	2201      	movs	r2, #1
 800076e:	4013      	ands	r3, r2
 8000770:	2b01      	cmp	r3, #1
 8000772:	d107      	bne.n	8000784 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	691a      	ldr	r2, [r3, #16]
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	2101      	movs	r1, #1
 8000780:	438a      	bics	r2, r1
 8000782:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	695a      	ldr	r2, [r3, #20]
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	2107      	movs	r1, #7
 8000790:	438a      	bics	r2, r1
 8000792:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	6959      	ldr	r1, [r3, #20]
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	430a      	orrs	r2, r1
 80007a4:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	2200      	movs	r2, #0
 80007aa:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80007b0:	2203      	movs	r2, #3
 80007b2:	4393      	bics	r3, r2
 80007b4:	2201      	movs	r2, #1
 80007b6:	431a      	orrs	r2, r3
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 80007bc:	2300      	movs	r3, #0
}
 80007be:	0018      	movs	r0, r3
 80007c0:	46bd      	mov	sp, r7
 80007c2:	b002      	add	sp, #8
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	46c0      	nop			; (mov r8, r8)
 80007c8:	fffffefd 	.word	0xfffffefd
 80007cc:	40012708 	.word	0x40012708
 80007d0:	ffc3ffff 	.word	0xffc3ffff
 80007d4:	fdffffff 	.word	0xfdffffff
 80007d8:	fffe0219 	.word	0xfffe0219
 80007dc:	fffffc03 	.word	0xfffffc03

080007e0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	2204      	movs	r2, #4
 80007f0:	4013      	ands	r3, r2
 80007f2:	2b04      	cmp	r3, #4
 80007f4:	d106      	bne.n	8000804 <HAL_ADC_IRQHandler+0x24>
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	685b      	ldr	r3, [r3, #4]
 80007fc:	2204      	movs	r2, #4
 80007fe:	4013      	ands	r3, r2
 8000800:	2b04      	cmp	r3, #4
 8000802:	d00d      	beq.n	8000820 <HAL_ADC_IRQHandler+0x40>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	2208      	movs	r2, #8
 800080c:	4013      	ands	r3, r2
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 800080e:	2b08      	cmp	r3, #8
 8000810:	d154      	bne.n	80008bc <HAL_ADC_IRQHandler+0xdc>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	685b      	ldr	r3, [r3, #4]
 8000818:	2208      	movs	r2, #8
 800081a:	4013      	ands	r3, r2
 800081c:	2b08      	cmp	r3, #8
 800081e:	d14d      	bne.n	80008bc <HAL_ADC_IRQHandler+0xdc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000824:	2210      	movs	r2, #16
 8000826:	4013      	ands	r3, r2
 8000828:	d106      	bne.n	8000838 <HAL_ADC_IRQHandler+0x58>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800082e:	2280      	movs	r2, #128	; 0x80
 8000830:	0092      	lsls	r2, r2, #2
 8000832:	431a      	orrs	r2, r3
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	655a      	str	r2, [r3, #84]	; 0x54
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	68da      	ldr	r2, [r3, #12]
 800083e:	23c0      	movs	r3, #192	; 0xc0
 8000840:	011b      	lsls	r3, r3, #4
 8000842:	4013      	ands	r3, r2
 8000844:	d12e      	bne.n	80008a4 <HAL_ADC_IRQHandler+0xc4>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	2220      	movs	r2, #32
 800084a:	5c9b      	ldrb	r3, [r3, r2]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800084c:	2b00      	cmp	r3, #0
 800084e:	d129      	bne.n	80008a4 <HAL_ADC_IRQHandler+0xc4>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	2208      	movs	r2, #8
 8000858:	4013      	ands	r3, r2
 800085a:	2b08      	cmp	r3, #8
 800085c:	d122      	bne.n	80008a4 <HAL_ADC_IRQHandler+0xc4>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	689b      	ldr	r3, [r3, #8]
 8000864:	2204      	movs	r2, #4
 8000866:	4013      	ands	r3, r2
 8000868:	d110      	bne.n	800088c <HAL_ADC_IRQHandler+0xac>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	685a      	ldr	r2, [r3, #4]
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	210c      	movs	r1, #12
 8000876:	438a      	bics	r2, r1
 8000878:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800087e:	4a35      	ldr	r2, [pc, #212]	; (8000954 <HAL_ADC_IRQHandler+0x174>)
 8000880:	4013      	ands	r3, r2
 8000882:	2201      	movs	r2, #1
 8000884:	431a      	orrs	r2, r3
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	655a      	str	r2, [r3, #84]	; 0x54
 800088a:	e00b      	b.n	80008a4 <HAL_ADC_IRQHandler+0xc4>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000890:	2220      	movs	r2, #32
 8000892:	431a      	orrs	r2, r3
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800089c:	2201      	movs	r2, #1
 800089e:	431a      	orrs	r2, r3
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	659a      	str	r2, [r3, #88]	; 0x58
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	0018      	movs	r0, r3
 80008a8:	f000 f856 	bl	8000958 <HAL_ADC_ConvCpltCallback>
    /* Note: Management of low power auto-wait enabled: flags must be cleared */
    /*       by user when fetching ADC conversion data.                       */
    /*       This case is managed in IRQ handler, but this low-power mode     */
    /*       should not be used with programming model IT or DMA.             */
    /*       Refer to comment of parameter "LowPowerAutoWait".                */
    if (hadc->Init.LowPowerAutoWait != ENABLE)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	699b      	ldr	r3, [r3, #24]
 80008b0:	2b01      	cmp	r3, #1
 80008b2:	d003      	beq.n	80008bc <HAL_ADC_IRQHandler+0xdc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	220c      	movs	r2, #12
 80008ba:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	2280      	movs	r2, #128	; 0x80
 80008c4:	4013      	ands	r3, r2
 80008c6:	2b80      	cmp	r3, #128	; 0x80
 80008c8:	d115      	bne.n	80008f6 <HAL_ADC_IRQHandler+0x116>
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	685b      	ldr	r3, [r3, #4]
 80008d0:	2280      	movs	r2, #128	; 0x80
 80008d2:	4013      	ands	r3, r2
 80008d4:	2b80      	cmp	r3, #128	; 0x80
 80008d6:	d10e      	bne.n	80008f6 <HAL_ADC_IRQHandler+0x116>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80008dc:	2280      	movs	r2, #128	; 0x80
 80008de:	0252      	lsls	r2, r2, #9
 80008e0:	431a      	orrs	r2, r3
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	655a      	str	r2, [r3, #84]	; 0x54
    
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	0018      	movs	r0, r3
 80008ea:	f000 f83d 	bl	8000968 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	2280      	movs	r2, #128	; 0x80
 80008f4:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	2210      	movs	r2, #16
 80008fe:	4013      	ands	r3, r2
 8000900:	2b10      	cmp	r3, #16
 8000902:	d123      	bne.n	800094c <HAL_ADC_IRQHandler+0x16c>
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	685b      	ldr	r3, [r3, #4]
 800090a:	2210      	movs	r2, #16
 800090c:	4013      	ands	r3, r2
 800090e:	2b10      	cmp	r3, #16
 8000910:	d11c      	bne.n	800094c <HAL_ADC_IRQHandler+0x16c>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	2b00      	cmp	r3, #0
 8000918:	d006      	beq.n	8000928 <HAL_ADC_IRQHandler+0x148>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	68db      	ldr	r3, [r3, #12]
 8000920:	2201      	movs	r2, #1
 8000922:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8000924:	2b01      	cmp	r3, #1
 8000926:	d10d      	bne.n	8000944 <HAL_ADC_IRQHandler+0x164>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800092c:	2202      	movs	r2, #2
 800092e:	431a      	orrs	r2, r3
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	2210      	movs	r2, #16
 800093a:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	0018      	movs	r0, r3
 8000940:	f000 f81a 	bl	8000978 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	2210      	movs	r2, #16
 800094a:	601a      	str	r2, [r3, #0]
  }
  
}
 800094c:	46c0      	nop			; (mov r8, r8)
 800094e:	46bd      	mov	sp, r7
 8000950:	b002      	add	sp, #8
 8000952:	bd80      	pop	{r7, pc}
 8000954:	fffffefe 	.word	0xfffffefe

08000958 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000960:	46c0      	nop			; (mov r8, r8)
 8000962:	46bd      	mov	sp, r7
 8000964:	b002      	add	sp, #8
 8000966:	bd80      	pop	{r7, pc}

08000968 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8000970:	46c0      	nop			; (mov r8, r8)
 8000972:	46bd      	mov	sp, r7
 8000974:	b002      	add	sp, #8
 8000976:	bd80      	pop	{r7, pc}

08000978 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000980:	46c0      	nop			; (mov r8, r8)
 8000982:	46bd      	mov	sp, r7
 8000984:	b002      	add	sp, #8
 8000986:	bd80      	pop	{r7, pc}

08000988 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
 8000990:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	2250      	movs	r2, #80	; 0x50
 8000996:	5c9b      	ldrb	r3, [r3, r2]
 8000998:	2b01      	cmp	r3, #1
 800099a:	d101      	bne.n	80009a0 <HAL_ADC_ConfigChannel+0x18>
 800099c:	2302      	movs	r3, #2
 800099e:	e06c      	b.n	8000a7a <HAL_ADC_ConfigChannel+0xf2>
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	2250      	movs	r2, #80	; 0x50
 80009a4:	2101      	movs	r1, #1
 80009a6:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	689b      	ldr	r3, [r3, #8]
 80009ae:	2204      	movs	r2, #4
 80009b0:	4013      	ands	r3, r2
 80009b2:	d00b      	beq.n	80009cc <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80009b8:	2220      	movs	r2, #32
 80009ba:	431a      	orrs	r2, r3
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	2250      	movs	r2, #80	; 0x50
 80009c4:	2100      	movs	r1, #0
 80009c6:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80009c8:	2301      	movs	r3, #1
 80009ca:	e056      	b.n	8000a7a <HAL_ADC_ConfigChannel+0xf2>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	685b      	ldr	r3, [r3, #4]
 80009d0:	4a2c      	ldr	r2, [pc, #176]	; (8000a84 <HAL_ADC_ConfigChannel+0xfc>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d028      	beq.n	8000a28 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	035b      	lsls	r3, r3, #13
 80009e2:	0b5a      	lsrs	r2, r3, #13
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	430a      	orrs	r2, r1
 80009ea:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	681a      	ldr	r2, [r3, #0]
 80009f0:	2380      	movs	r3, #128	; 0x80
 80009f2:	02db      	lsls	r3, r3, #11
 80009f4:	4013      	ands	r3, r2
 80009f6:	d009      	beq.n	8000a0c <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 80009f8:	4b23      	ldr	r3, [pc, #140]	; (8000a88 <HAL_ADC_ConfigChannel+0x100>)
 80009fa:	681a      	ldr	r2, [r3, #0]
 80009fc:	4b22      	ldr	r3, [pc, #136]	; (8000a88 <HAL_ADC_ConfigChannel+0x100>)
 80009fe:	2180      	movs	r1, #128	; 0x80
 8000a00:	0409      	lsls	r1, r1, #16
 8000a02:	430a      	orrs	r2, r1
 8000a04:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8000a06:	200a      	movs	r0, #10
 8000a08:	f000 f844 	bl	8000a94 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	681a      	ldr	r2, [r3, #0]
 8000a10:	2380      	movs	r3, #128	; 0x80
 8000a12:	029b      	lsls	r3, r3, #10
 8000a14:	4013      	ands	r3, r2
 8000a16:	d02b      	beq.n	8000a70 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8000a18:	4b1b      	ldr	r3, [pc, #108]	; (8000a88 <HAL_ADC_ConfigChannel+0x100>)
 8000a1a:	681a      	ldr	r2, [r3, #0]
 8000a1c:	4b1a      	ldr	r3, [pc, #104]	; (8000a88 <HAL_ADC_ConfigChannel+0x100>)
 8000a1e:	2180      	movs	r1, #128	; 0x80
 8000a20:	03c9      	lsls	r1, r1, #15
 8000a22:	430a      	orrs	r2, r1
 8000a24:	601a      	str	r2, [r3, #0]
 8000a26:	e023      	b.n	8000a70 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	035b      	lsls	r3, r3, #13
 8000a34:	0b5b      	lsrs	r3, r3, #13
 8000a36:	43d9      	mvns	r1, r3
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	400a      	ands	r2, r1
 8000a3e:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	681a      	ldr	r2, [r3, #0]
 8000a44:	2380      	movs	r3, #128	; 0x80
 8000a46:	02db      	lsls	r3, r3, #11
 8000a48:	4013      	ands	r3, r2
 8000a4a:	d005      	beq.n	8000a58 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8000a4c:	4b0e      	ldr	r3, [pc, #56]	; (8000a88 <HAL_ADC_ConfigChannel+0x100>)
 8000a4e:	681a      	ldr	r2, [r3, #0]
 8000a50:	4b0d      	ldr	r3, [pc, #52]	; (8000a88 <HAL_ADC_ConfigChannel+0x100>)
 8000a52:	490e      	ldr	r1, [pc, #56]	; (8000a8c <HAL_ADC_ConfigChannel+0x104>)
 8000a54:	400a      	ands	r2, r1
 8000a56:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	681a      	ldr	r2, [r3, #0]
 8000a5c:	2380      	movs	r3, #128	; 0x80
 8000a5e:	029b      	lsls	r3, r3, #10
 8000a60:	4013      	ands	r3, r2
 8000a62:	d005      	beq.n	8000a70 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8000a64:	4b08      	ldr	r3, [pc, #32]	; (8000a88 <HAL_ADC_ConfigChannel+0x100>)
 8000a66:	681a      	ldr	r2, [r3, #0]
 8000a68:	4b07      	ldr	r3, [pc, #28]	; (8000a88 <HAL_ADC_ConfigChannel+0x100>)
 8000a6a:	4909      	ldr	r1, [pc, #36]	; (8000a90 <HAL_ADC_ConfigChannel+0x108>)
 8000a6c:	400a      	ands	r2, r1
 8000a6e:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	2250      	movs	r2, #80	; 0x50
 8000a74:	2100      	movs	r1, #0
 8000a76:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8000a78:	2300      	movs	r3, #0
}
 8000a7a:	0018      	movs	r0, r3
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	b002      	add	sp, #8
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	46c0      	nop			; (mov r8, r8)
 8000a84:	00001001 	.word	0x00001001
 8000a88:	40012708 	.word	0x40012708
 8000a8c:	ff7fffff 	.word	0xff7fffff
 8000a90:	ffbfffff 	.word	0xffbfffff

08000a94 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b084      	sub	sp, #16
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8000a9c:	4b0a      	ldr	r3, [pc, #40]	; (8000ac8 <ADC_DelayMicroSecond+0x34>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	490a      	ldr	r1, [pc, #40]	; (8000acc <ADC_DelayMicroSecond+0x38>)
 8000aa2:	0018      	movs	r0, r3
 8000aa4:	f7ff fb30 	bl	8000108 <__udivsi3>
 8000aa8:	0003      	movs	r3, r0
 8000aaa:	001a      	movs	r2, r3
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	4353      	muls	r3, r2
 8000ab0:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 8000ab2:	e002      	b.n	8000aba <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	3b01      	subs	r3, #1
 8000ab8:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d1f9      	bne.n	8000ab4 <ADC_DelayMicroSecond+0x20>
  } 
}
 8000ac0:	46c0      	nop			; (mov r8, r8)
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	b004      	add	sp, #16
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	20000000 	.word	0x20000000
 8000acc:	000f4240 	.word	0x000f4240

08000ad0 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	0002      	movs	r2, r0
 8000ad8:	1dfb      	adds	r3, r7, #7
 8000ada:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000adc:	1dfb      	adds	r3, r7, #7
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	001a      	movs	r2, r3
 8000ae2:	231f      	movs	r3, #31
 8000ae4:	401a      	ands	r2, r3
 8000ae6:	4b04      	ldr	r3, [pc, #16]	; (8000af8 <NVIC_EnableIRQ+0x28>)
 8000ae8:	2101      	movs	r1, #1
 8000aea:	4091      	lsls	r1, r2
 8000aec:	000a      	movs	r2, r1
 8000aee:	601a      	str	r2, [r3, #0]
}
 8000af0:	46c0      	nop			; (mov r8, r8)
 8000af2:	46bd      	mov	sp, r7
 8000af4:	b002      	add	sp, #8
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	e000e100 	.word	0xe000e100

08000afc <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000afc:	b590      	push	{r4, r7, lr}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	0002      	movs	r2, r0
 8000b04:	6039      	str	r1, [r7, #0]
 8000b06:	1dfb      	adds	r3, r7, #7
 8000b08:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8000b0a:	1dfb      	adds	r3, r7, #7
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	2b7f      	cmp	r3, #127	; 0x7f
 8000b10:	d932      	bls.n	8000b78 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b12:	4a2f      	ldr	r2, [pc, #188]	; (8000bd0 <NVIC_SetPriority+0xd4>)
 8000b14:	1dfb      	adds	r3, r7, #7
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	0019      	movs	r1, r3
 8000b1a:	230f      	movs	r3, #15
 8000b1c:	400b      	ands	r3, r1
 8000b1e:	3b08      	subs	r3, #8
 8000b20:	089b      	lsrs	r3, r3, #2
 8000b22:	3306      	adds	r3, #6
 8000b24:	009b      	lsls	r3, r3, #2
 8000b26:	18d3      	adds	r3, r2, r3
 8000b28:	3304      	adds	r3, #4
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	1dfa      	adds	r2, r7, #7
 8000b2e:	7812      	ldrb	r2, [r2, #0]
 8000b30:	0011      	movs	r1, r2
 8000b32:	2203      	movs	r2, #3
 8000b34:	400a      	ands	r2, r1
 8000b36:	00d2      	lsls	r2, r2, #3
 8000b38:	21ff      	movs	r1, #255	; 0xff
 8000b3a:	4091      	lsls	r1, r2
 8000b3c:	000a      	movs	r2, r1
 8000b3e:	43d2      	mvns	r2, r2
 8000b40:	401a      	ands	r2, r3
 8000b42:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	019b      	lsls	r3, r3, #6
 8000b48:	22ff      	movs	r2, #255	; 0xff
 8000b4a:	401a      	ands	r2, r3
 8000b4c:	1dfb      	adds	r3, r7, #7
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	0018      	movs	r0, r3
 8000b52:	2303      	movs	r3, #3
 8000b54:	4003      	ands	r3, r0
 8000b56:	00db      	lsls	r3, r3, #3
 8000b58:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b5a:	481d      	ldr	r0, [pc, #116]	; (8000bd0 <NVIC_SetPriority+0xd4>)
 8000b5c:	1dfb      	adds	r3, r7, #7
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	001c      	movs	r4, r3
 8000b62:	230f      	movs	r3, #15
 8000b64:	4023      	ands	r3, r4
 8000b66:	3b08      	subs	r3, #8
 8000b68:	089b      	lsrs	r3, r3, #2
 8000b6a:	430a      	orrs	r2, r1
 8000b6c:	3306      	adds	r3, #6
 8000b6e:	009b      	lsls	r3, r3, #2
 8000b70:	18c3      	adds	r3, r0, r3
 8000b72:	3304      	adds	r3, #4
 8000b74:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000b76:	e027      	b.n	8000bc8 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b78:	4a16      	ldr	r2, [pc, #88]	; (8000bd4 <NVIC_SetPriority+0xd8>)
 8000b7a:	1dfb      	adds	r3, r7, #7
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	b25b      	sxtb	r3, r3
 8000b80:	089b      	lsrs	r3, r3, #2
 8000b82:	33c0      	adds	r3, #192	; 0xc0
 8000b84:	009b      	lsls	r3, r3, #2
 8000b86:	589b      	ldr	r3, [r3, r2]
 8000b88:	1dfa      	adds	r2, r7, #7
 8000b8a:	7812      	ldrb	r2, [r2, #0]
 8000b8c:	0011      	movs	r1, r2
 8000b8e:	2203      	movs	r2, #3
 8000b90:	400a      	ands	r2, r1
 8000b92:	00d2      	lsls	r2, r2, #3
 8000b94:	21ff      	movs	r1, #255	; 0xff
 8000b96:	4091      	lsls	r1, r2
 8000b98:	000a      	movs	r2, r1
 8000b9a:	43d2      	mvns	r2, r2
 8000b9c:	401a      	ands	r2, r3
 8000b9e:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	019b      	lsls	r3, r3, #6
 8000ba4:	22ff      	movs	r2, #255	; 0xff
 8000ba6:	401a      	ands	r2, r3
 8000ba8:	1dfb      	adds	r3, r7, #7
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	0018      	movs	r0, r3
 8000bae:	2303      	movs	r3, #3
 8000bb0:	4003      	ands	r3, r0
 8000bb2:	00db      	lsls	r3, r3, #3
 8000bb4:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bb6:	4807      	ldr	r0, [pc, #28]	; (8000bd4 <NVIC_SetPriority+0xd8>)
 8000bb8:	1dfb      	adds	r3, r7, #7
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	b25b      	sxtb	r3, r3
 8000bbe:	089b      	lsrs	r3, r3, #2
 8000bc0:	430a      	orrs	r2, r1
 8000bc2:	33c0      	adds	r3, #192	; 0xc0
 8000bc4:	009b      	lsls	r3, r3, #2
 8000bc6:	501a      	str	r2, [r3, r0]
}
 8000bc8:	46c0      	nop			; (mov r8, r8)
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	b003      	add	sp, #12
 8000bce:	bd90      	pop	{r4, r7, pc}
 8000bd0:	e000ed00 	.word	0xe000ed00
 8000bd4:	e000e100 	.word	0xe000e100

08000bd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	3b01      	subs	r3, #1
 8000be4:	4a0c      	ldr	r2, [pc, #48]	; (8000c18 <SysTick_Config+0x40>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d901      	bls.n	8000bee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bea:	2301      	movs	r3, #1
 8000bec:	e010      	b.n	8000c10 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bee:	4b0b      	ldr	r3, [pc, #44]	; (8000c1c <SysTick_Config+0x44>)
 8000bf0:	687a      	ldr	r2, [r7, #4]
 8000bf2:	3a01      	subs	r2, #1
 8000bf4:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	425b      	negs	r3, r3
 8000bfa:	2103      	movs	r1, #3
 8000bfc:	0018      	movs	r0, r3
 8000bfe:	f7ff ff7d 	bl	8000afc <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c02:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <SysTick_Config+0x44>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c08:	4b04      	ldr	r3, [pc, #16]	; (8000c1c <SysTick_Config+0x44>)
 8000c0a:	2207      	movs	r2, #7
 8000c0c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c0e:	2300      	movs	r3, #0
}
 8000c10:	0018      	movs	r0, r3
 8000c12:	46bd      	mov	sp, r7
 8000c14:	b002      	add	sp, #8
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	00ffffff 	.word	0x00ffffff
 8000c1c:	e000e010 	.word	0xe000e010

08000c20 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	60b9      	str	r1, [r7, #8]
 8000c28:	607a      	str	r2, [r7, #4]
 8000c2a:	210f      	movs	r1, #15
 8000c2c:	187b      	adds	r3, r7, r1
 8000c2e:	1c02      	adds	r2, r0, #0
 8000c30:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000c32:	68ba      	ldr	r2, [r7, #8]
 8000c34:	187b      	adds	r3, r7, r1
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	b25b      	sxtb	r3, r3
 8000c3a:	0011      	movs	r1, r2
 8000c3c:	0018      	movs	r0, r3
 8000c3e:	f7ff ff5d 	bl	8000afc <NVIC_SetPriority>
}
 8000c42:	46c0      	nop			; (mov r8, r8)
 8000c44:	46bd      	mov	sp, r7
 8000c46:	b004      	add	sp, #16
 8000c48:	bd80      	pop	{r7, pc}

08000c4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	b082      	sub	sp, #8
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	0002      	movs	r2, r0
 8000c52:	1dfb      	adds	r3, r7, #7
 8000c54:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c56:	1dfb      	adds	r3, r7, #7
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	b25b      	sxtb	r3, r3
 8000c5c:	0018      	movs	r0, r3
 8000c5e:	f7ff ff37 	bl	8000ad0 <NVIC_EnableIRQ>
}
 8000c62:	46c0      	nop			; (mov r8, r8)
 8000c64:	46bd      	mov	sp, r7
 8000c66:	b002      	add	sp, #8
 8000c68:	bd80      	pop	{r7, pc}

08000c6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	b082      	sub	sp, #8
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	0018      	movs	r0, r3
 8000c76:	f7ff ffaf 	bl	8000bd8 <SysTick_Config>
 8000c7a:	0003      	movs	r3, r0
}
 8000c7c:	0018      	movs	r0, r3
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	b002      	add	sp, #8
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b086      	sub	sp, #24
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
 8000c8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c92:	2300      	movs	r3, #0
 8000c94:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000c96:	2300      	movs	r3, #0
 8000c98:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000c9a:	e155      	b.n	8000f48 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	2101      	movs	r1, #1
 8000ca2:	697a      	ldr	r2, [r7, #20]
 8000ca4:	4091      	lsls	r1, r2
 8000ca6:	000a      	movs	r2, r1
 8000ca8:	4013      	ands	r3, r2
 8000caa:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d100      	bne.n	8000cb4 <HAL_GPIO_Init+0x30>
 8000cb2:	e146      	b.n	8000f42 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	2b02      	cmp	r3, #2
 8000cba:	d003      	beq.n	8000cc4 <HAL_GPIO_Init+0x40>
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	2b12      	cmp	r3, #18
 8000cc2:	d123      	bne.n	8000d0c <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	08da      	lsrs	r2, r3, #3
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	3208      	adds	r2, #8
 8000ccc:	0092      	lsls	r2, r2, #2
 8000cce:	58d3      	ldr	r3, [r2, r3]
 8000cd0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	2207      	movs	r2, #7
 8000cd6:	4013      	ands	r3, r2
 8000cd8:	009b      	lsls	r3, r3, #2
 8000cda:	220f      	movs	r2, #15
 8000cdc:	409a      	lsls	r2, r3
 8000cde:	0013      	movs	r3, r2
 8000ce0:	43da      	mvns	r2, r3
 8000ce2:	693b      	ldr	r3, [r7, #16]
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	691a      	ldr	r2, [r3, #16]
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	2107      	movs	r1, #7
 8000cf0:	400b      	ands	r3, r1
 8000cf2:	009b      	lsls	r3, r3, #2
 8000cf4:	409a      	lsls	r2, r3
 8000cf6:	0013      	movs	r3, r2
 8000cf8:	693a      	ldr	r2, [r7, #16]
 8000cfa:	4313      	orrs	r3, r2
 8000cfc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	08da      	lsrs	r2, r3, #3
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	3208      	adds	r2, #8
 8000d06:	0092      	lsls	r2, r2, #2
 8000d08:	6939      	ldr	r1, [r7, #16]
 8000d0a:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	2b01      	cmp	r3, #1
 8000d12:	d00b      	beq.n	8000d2c <HAL_GPIO_Init+0xa8>
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	2b02      	cmp	r3, #2
 8000d1a:	d007      	beq.n	8000d2c <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d20:	2b11      	cmp	r3, #17
 8000d22:	d003      	beq.n	8000d2c <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	2b12      	cmp	r3, #18
 8000d2a:	d130      	bne.n	8000d8e <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	689b      	ldr	r3, [r3, #8]
 8000d30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	005b      	lsls	r3, r3, #1
 8000d36:	2203      	movs	r2, #3
 8000d38:	409a      	lsls	r2, r3
 8000d3a:	0013      	movs	r3, r2
 8000d3c:	43da      	mvns	r2, r3
 8000d3e:	693b      	ldr	r3, [r7, #16]
 8000d40:	4013      	ands	r3, r2
 8000d42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	68da      	ldr	r2, [r3, #12]
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	005b      	lsls	r3, r3, #1
 8000d4c:	409a      	lsls	r2, r3
 8000d4e:	0013      	movs	r3, r2
 8000d50:	693a      	ldr	r2, [r7, #16]
 8000d52:	4313      	orrs	r3, r2
 8000d54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	693a      	ldr	r2, [r7, #16]
 8000d5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d62:	2201      	movs	r2, #1
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	409a      	lsls	r2, r3
 8000d68:	0013      	movs	r3, r2
 8000d6a:	43da      	mvns	r2, r3
 8000d6c:	693b      	ldr	r3, [r7, #16]
 8000d6e:	4013      	ands	r3, r2
 8000d70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	091b      	lsrs	r3, r3, #4
 8000d78:	2201      	movs	r2, #1
 8000d7a:	401a      	ands	r2, r3
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	409a      	lsls	r2, r3
 8000d80:	0013      	movs	r3, r2
 8000d82:	693a      	ldr	r2, [r7, #16]
 8000d84:	4313      	orrs	r3, r2
 8000d86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	005b      	lsls	r3, r3, #1
 8000d98:	2203      	movs	r2, #3
 8000d9a:	409a      	lsls	r2, r3
 8000d9c:	0013      	movs	r3, r2
 8000d9e:	43da      	mvns	r2, r3
 8000da0:	693b      	ldr	r3, [r7, #16]
 8000da2:	4013      	ands	r3, r2
 8000da4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	2203      	movs	r2, #3
 8000dac:	401a      	ands	r2, r3
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	005b      	lsls	r3, r3, #1
 8000db2:	409a      	lsls	r2, r3
 8000db4:	0013      	movs	r3, r2
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	693a      	ldr	r2, [r7, #16]
 8000dc0:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	68db      	ldr	r3, [r3, #12]
 8000dc6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	005b      	lsls	r3, r3, #1
 8000dcc:	2203      	movs	r2, #3
 8000dce:	409a      	lsls	r2, r3
 8000dd0:	0013      	movs	r3, r2
 8000dd2:	43da      	mvns	r2, r3
 8000dd4:	693b      	ldr	r3, [r7, #16]
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	689a      	ldr	r2, [r3, #8]
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	409a      	lsls	r2, r3
 8000de4:	0013      	movs	r3, r2
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	4313      	orrs	r3, r2
 8000dea:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	685a      	ldr	r2, [r3, #4]
 8000df6:	2380      	movs	r3, #128	; 0x80
 8000df8:	055b      	lsls	r3, r3, #21
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	d100      	bne.n	8000e00 <HAL_GPIO_Init+0x17c>
 8000dfe:	e0a0      	b.n	8000f42 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e00:	4b57      	ldr	r3, [pc, #348]	; (8000f60 <HAL_GPIO_Init+0x2dc>)
 8000e02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e04:	4b56      	ldr	r3, [pc, #344]	; (8000f60 <HAL_GPIO_Init+0x2dc>)
 8000e06:	2101      	movs	r1, #1
 8000e08:	430a      	orrs	r2, r1
 8000e0a:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 8000e0c:	4a55      	ldr	r2, [pc, #340]	; (8000f64 <HAL_GPIO_Init+0x2e0>)
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	089b      	lsrs	r3, r3, #2
 8000e12:	3302      	adds	r3, #2
 8000e14:	009b      	lsls	r3, r3, #2
 8000e16:	589b      	ldr	r3, [r3, r2]
 8000e18:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	2203      	movs	r2, #3
 8000e1e:	4013      	ands	r3, r2
 8000e20:	009b      	lsls	r3, r3, #2
 8000e22:	220f      	movs	r2, #15
 8000e24:	409a      	lsls	r2, r3
 8000e26:	0013      	movs	r3, r2
 8000e28:	43da      	mvns	r2, r3
 8000e2a:	693b      	ldr	r3, [r7, #16]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000e30:	687a      	ldr	r2, [r7, #4]
 8000e32:	23a0      	movs	r3, #160	; 0xa0
 8000e34:	05db      	lsls	r3, r3, #23
 8000e36:	429a      	cmp	r2, r3
 8000e38:	d01f      	beq.n	8000e7a <HAL_GPIO_Init+0x1f6>
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4a4a      	ldr	r2, [pc, #296]	; (8000f68 <HAL_GPIO_Init+0x2e4>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d019      	beq.n	8000e76 <HAL_GPIO_Init+0x1f2>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4a49      	ldr	r2, [pc, #292]	; (8000f6c <HAL_GPIO_Init+0x2e8>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d013      	beq.n	8000e72 <HAL_GPIO_Init+0x1ee>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4a48      	ldr	r2, [pc, #288]	; (8000f70 <HAL_GPIO_Init+0x2ec>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d00d      	beq.n	8000e6e <HAL_GPIO_Init+0x1ea>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4a47      	ldr	r2, [pc, #284]	; (8000f74 <HAL_GPIO_Init+0x2f0>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d007      	beq.n	8000e6a <HAL_GPIO_Init+0x1e6>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4a46      	ldr	r2, [pc, #280]	; (8000f78 <HAL_GPIO_Init+0x2f4>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d101      	bne.n	8000e66 <HAL_GPIO_Init+0x1e2>
 8000e62:	2305      	movs	r3, #5
 8000e64:	e00a      	b.n	8000e7c <HAL_GPIO_Init+0x1f8>
 8000e66:	2306      	movs	r3, #6
 8000e68:	e008      	b.n	8000e7c <HAL_GPIO_Init+0x1f8>
 8000e6a:	2304      	movs	r3, #4
 8000e6c:	e006      	b.n	8000e7c <HAL_GPIO_Init+0x1f8>
 8000e6e:	2303      	movs	r3, #3
 8000e70:	e004      	b.n	8000e7c <HAL_GPIO_Init+0x1f8>
 8000e72:	2302      	movs	r3, #2
 8000e74:	e002      	b.n	8000e7c <HAL_GPIO_Init+0x1f8>
 8000e76:	2301      	movs	r3, #1
 8000e78:	e000      	b.n	8000e7c <HAL_GPIO_Init+0x1f8>
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	697a      	ldr	r2, [r7, #20]
 8000e7e:	2103      	movs	r1, #3
 8000e80:	400a      	ands	r2, r1
 8000e82:	0092      	lsls	r2, r2, #2
 8000e84:	4093      	lsls	r3, r2
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e8c:	4935      	ldr	r1, [pc, #212]	; (8000f64 <HAL_GPIO_Init+0x2e0>)
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	089b      	lsrs	r3, r3, #2
 8000e92:	3302      	adds	r3, #2
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e9a:	4b38      	ldr	r3, [pc, #224]	; (8000f7c <HAL_GPIO_Init+0x2f8>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	43da      	mvns	r2, r3
 8000ea4:	693b      	ldr	r3, [r7, #16]
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	685a      	ldr	r2, [r3, #4]
 8000eae:	2380      	movs	r3, #128	; 0x80
 8000eb0:	025b      	lsls	r3, r3, #9
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	d003      	beq.n	8000ebe <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000ebe:	4b2f      	ldr	r3, [pc, #188]	; (8000f7c <HAL_GPIO_Init+0x2f8>)
 8000ec0:	693a      	ldr	r2, [r7, #16]
 8000ec2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000ec4:	4b2d      	ldr	r3, [pc, #180]	; (8000f7c <HAL_GPIO_Init+0x2f8>)
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	43da      	mvns	r2, r3
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	685a      	ldr	r2, [r3, #4]
 8000ed8:	2380      	movs	r3, #128	; 0x80
 8000eda:	029b      	lsls	r3, r3, #10
 8000edc:	4013      	ands	r3, r2
 8000ede:	d003      	beq.n	8000ee8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000ee0:	693a      	ldr	r2, [r7, #16]
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000ee8:	4b24      	ldr	r3, [pc, #144]	; (8000f7c <HAL_GPIO_Init+0x2f8>)
 8000eea:	693a      	ldr	r2, [r7, #16]
 8000eec:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000eee:	4b23      	ldr	r3, [pc, #140]	; (8000f7c <HAL_GPIO_Init+0x2f8>)
 8000ef0:	689b      	ldr	r3, [r3, #8]
 8000ef2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	43da      	mvns	r2, r3
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	4013      	ands	r3, r2
 8000efc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	685a      	ldr	r2, [r3, #4]
 8000f02:	2380      	movs	r3, #128	; 0x80
 8000f04:	035b      	lsls	r3, r3, #13
 8000f06:	4013      	ands	r3, r2
 8000f08:	d003      	beq.n	8000f12 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8000f0a:	693a      	ldr	r2, [r7, #16]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f12:	4b1a      	ldr	r3, [pc, #104]	; (8000f7c <HAL_GPIO_Init+0x2f8>)
 8000f14:	693a      	ldr	r2, [r7, #16]
 8000f16:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000f18:	4b18      	ldr	r3, [pc, #96]	; (8000f7c <HAL_GPIO_Init+0x2f8>)
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	43da      	mvns	r2, r3
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	4013      	ands	r3, r2
 8000f26:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	685a      	ldr	r2, [r3, #4]
 8000f2c:	2380      	movs	r3, #128	; 0x80
 8000f2e:	039b      	lsls	r3, r3, #14
 8000f30:	4013      	ands	r3, r2
 8000f32:	d003      	beq.n	8000f3c <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8000f34:	693a      	ldr	r2, [r7, #16]
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f3c:	4b0f      	ldr	r3, [pc, #60]	; (8000f7c <HAL_GPIO_Init+0x2f8>)
 8000f3e:	693a      	ldr	r2, [r7, #16]
 8000f40:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	3301      	adds	r3, #1
 8000f46:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	40da      	lsrs	r2, r3
 8000f50:	1e13      	subs	r3, r2, #0
 8000f52:	d000      	beq.n	8000f56 <HAL_GPIO_Init+0x2d2>
 8000f54:	e6a2      	b.n	8000c9c <HAL_GPIO_Init+0x18>
  }
}
 8000f56:	46c0      	nop			; (mov r8, r8)
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	b006      	add	sp, #24
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	46c0      	nop			; (mov r8, r8)
 8000f60:	40021000 	.word	0x40021000
 8000f64:	40010000 	.word	0x40010000
 8000f68:	50000400 	.word	0x50000400
 8000f6c:	50000800 	.word	0x50000800
 8000f70:	50000c00 	.word	0x50000c00
 8000f74:	50001000 	.word	0x50001000
 8000f78:	50001c00 	.word	0x50001c00
 8000f7c:	40010400 	.word	0x40010400

08000f80 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	0008      	movs	r0, r1
 8000f8a:	0011      	movs	r1, r2
 8000f8c:	1cbb      	adds	r3, r7, #2
 8000f8e:	1c02      	adds	r2, r0, #0
 8000f90:	801a      	strh	r2, [r3, #0]
 8000f92:	1c7b      	adds	r3, r7, #1
 8000f94:	1c0a      	adds	r2, r1, #0
 8000f96:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 8000f98:	1c7b      	adds	r3, r7, #1
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d004      	beq.n	8000faa <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fa0:	1cbb      	adds	r3, r7, #2
 8000fa2:	881a      	ldrh	r2, [r3, #0]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8000fa8:	e003      	b.n	8000fb2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8000faa:	1cbb      	adds	r3, r7, #2
 8000fac:	881a      	ldrh	r2, [r3, #0]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000fb2:	46c0      	nop			; (mov r8, r8)
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	b002      	add	sp, #8
 8000fb8:	bd80      	pop	{r7, pc}
	...

08000fbc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	0002      	movs	r2, r0
 8000fc4:	1dbb      	adds	r3, r7, #6
 8000fc6:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8000fc8:	4b09      	ldr	r3, [pc, #36]	; (8000ff0 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8000fca:	695b      	ldr	r3, [r3, #20]
 8000fcc:	1dba      	adds	r2, r7, #6
 8000fce:	8812      	ldrh	r2, [r2, #0]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	d008      	beq.n	8000fe6 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000fd4:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8000fd6:	1dba      	adds	r2, r7, #6
 8000fd8:	8812      	ldrh	r2, [r2, #0]
 8000fda:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000fdc:	1dbb      	adds	r3, r7, #6
 8000fde:	881b      	ldrh	r3, [r3, #0]
 8000fe0:	0018      	movs	r0, r3
 8000fe2:	f000 f807 	bl	8000ff4 <HAL_GPIO_EXTI_Callback>
  }
}
 8000fe6:	46c0      	nop			; (mov r8, r8)
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	b002      	add	sp, #8
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	46c0      	nop			; (mov r8, r8)
 8000ff0:	40010400 	.word	0x40010400

08000ff4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	0002      	movs	r2, r0
 8000ffc:	1dbb      	adds	r3, r7, #6
 8000ffe:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8001000:	46c0      	nop			; (mov r8, r8)
 8001002:	46bd      	mov	sp, r7
 8001004:	b002      	add	sp, #8
 8001006:	bd80      	pop	{r7, pc}

08001008 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d101      	bne.n	800101a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	e082      	b.n	8001120 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2241      	movs	r2, #65	; 0x41
 800101e:	5c9b      	ldrb	r3, [r3, r2]
 8001020:	b2db      	uxtb	r3, r3
 8001022:	2b00      	cmp	r3, #0
 8001024:	d107      	bne.n	8001036 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2240      	movs	r2, #64	; 0x40
 800102a:	2100      	movs	r1, #0
 800102c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	0018      	movs	r0, r3
 8001032:	f002 fa11 	bl	8003458 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2241      	movs	r2, #65	; 0x41
 800103a:	2124      	movs	r1, #36	; 0x24
 800103c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	2101      	movs	r1, #1
 800104a:	438a      	bics	r2, r1
 800104c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	685a      	ldr	r2, [r3, #4]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4934      	ldr	r1, [pc, #208]	; (8001128 <HAL_I2C_Init+0x120>)
 8001058:	400a      	ands	r2, r1
 800105a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	689a      	ldr	r2, [r3, #8]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4931      	ldr	r1, [pc, #196]	; (800112c <HAL_I2C_Init+0x124>)
 8001068:	400a      	ands	r2, r1
 800106a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	2b01      	cmp	r3, #1
 8001072:	d108      	bne.n	8001086 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	689a      	ldr	r2, [r3, #8]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2180      	movs	r1, #128	; 0x80
 800107e:	0209      	lsls	r1, r1, #8
 8001080:	430a      	orrs	r2, r1
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	e007      	b.n	8001096 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	689a      	ldr	r2, [r3, #8]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	2184      	movs	r1, #132	; 0x84
 8001090:	0209      	lsls	r1, r1, #8
 8001092:	430a      	orrs	r2, r1
 8001094:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	68db      	ldr	r3, [r3, #12]
 800109a:	2b02      	cmp	r3, #2
 800109c:	d104      	bne.n	80010a8 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	2280      	movs	r2, #128	; 0x80
 80010a4:	0112      	lsls	r2, r2, #4
 80010a6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	685a      	ldr	r2, [r3, #4]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	491f      	ldr	r1, [pc, #124]	; (8001130 <HAL_I2C_Init+0x128>)
 80010b4:	430a      	orrs	r2, r1
 80010b6:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	68da      	ldr	r2, [r3, #12]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	491a      	ldr	r1, [pc, #104]	; (800112c <HAL_I2C_Init+0x124>)
 80010c4:	400a      	ands	r2, r1
 80010c6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	691a      	ldr	r2, [r3, #16]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	695b      	ldr	r3, [r3, #20]
 80010d0:	431a      	orrs	r2, r3
 80010d2:	0011      	movs	r1, r2
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	699b      	ldr	r3, [r3, #24]
 80010d8:	021a      	lsls	r2, r3, #8
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	430a      	orrs	r2, r1
 80010e0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	69d9      	ldr	r1, [r3, #28]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6a1a      	ldr	r2, [r3, #32]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	430a      	orrs	r2, r1
 80010f0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2101      	movs	r1, #1
 80010fe:	430a      	orrs	r2, r1
 8001100:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2200      	movs	r2, #0
 8001106:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2241      	movs	r2, #65	; 0x41
 800110c:	2120      	movs	r1, #32
 800110e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2200      	movs	r2, #0
 8001114:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2242      	movs	r2, #66	; 0x42
 800111a:	2100      	movs	r1, #0
 800111c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800111e:	2300      	movs	r3, #0
}
 8001120:	0018      	movs	r0, r3
 8001122:	46bd      	mov	sp, r7
 8001124:	b002      	add	sp, #8
 8001126:	bd80      	pop	{r7, pc}
 8001128:	f0ffffff 	.word	0xf0ffffff
 800112c:	ffff7fff 	.word	0xffff7fff
 8001130:	02008000 	.word	0x02008000

08001134 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2241      	movs	r2, #65	; 0x41
 8001142:	5c9b      	ldrb	r3, [r3, r2]
 8001144:	b2db      	uxtb	r3, r3
 8001146:	2b20      	cmp	r3, #32
 8001148:	d138      	bne.n	80011bc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2240      	movs	r2, #64	; 0x40
 800114e:	5c9b      	ldrb	r3, [r3, r2]
 8001150:	2b01      	cmp	r3, #1
 8001152:	d101      	bne.n	8001158 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001154:	2302      	movs	r3, #2
 8001156:	e032      	b.n	80011be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2240      	movs	r2, #64	; 0x40
 800115c:	2101      	movs	r1, #1
 800115e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2241      	movs	r2, #65	; 0x41
 8001164:	2124      	movs	r1, #36	; 0x24
 8001166:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	2101      	movs	r1, #1
 8001174:	438a      	bics	r2, r1
 8001176:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4911      	ldr	r1, [pc, #68]	; (80011c8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001184:	400a      	ands	r2, r1
 8001186:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	6819      	ldr	r1, [r3, #0]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	683a      	ldr	r2, [r7, #0]
 8001194:	430a      	orrs	r2, r1
 8001196:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	2101      	movs	r1, #1
 80011a4:	430a      	orrs	r2, r1
 80011a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2241      	movs	r2, #65	; 0x41
 80011ac:	2120      	movs	r1, #32
 80011ae:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2240      	movs	r2, #64	; 0x40
 80011b4:	2100      	movs	r1, #0
 80011b6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80011b8:	2300      	movs	r3, #0
 80011ba:	e000      	b.n	80011be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80011bc:	2302      	movs	r3, #2
  }
}
 80011be:	0018      	movs	r0, r3
 80011c0:	46bd      	mov	sp, r7
 80011c2:	b002      	add	sp, #8
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	46c0      	nop			; (mov r8, r8)
 80011c8:	ffffefff 	.word	0xffffefff

080011cc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2241      	movs	r2, #65	; 0x41
 80011da:	5c9b      	ldrb	r3, [r3, r2]
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	2b20      	cmp	r3, #32
 80011e0:	d139      	bne.n	8001256 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2240      	movs	r2, #64	; 0x40
 80011e6:	5c9b      	ldrb	r3, [r3, r2]
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d101      	bne.n	80011f0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80011ec:	2302      	movs	r3, #2
 80011ee:	e033      	b.n	8001258 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2240      	movs	r2, #64	; 0x40
 80011f4:	2101      	movs	r1, #1
 80011f6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2241      	movs	r2, #65	; 0x41
 80011fc:	2124      	movs	r1, #36	; 0x24
 80011fe:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	2101      	movs	r1, #1
 800120c:	438a      	bics	r2, r1
 800120e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	4a11      	ldr	r2, [pc, #68]	; (8001260 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800121c:	4013      	ands	r3, r2
 800121e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	021b      	lsls	r3, r3, #8
 8001224:	68fa      	ldr	r2, [r7, #12]
 8001226:	4313      	orrs	r3, r2
 8001228:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	68fa      	ldr	r2, [r7, #12]
 8001230:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2101      	movs	r1, #1
 800123e:	430a      	orrs	r2, r1
 8001240:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2241      	movs	r2, #65	; 0x41
 8001246:	2120      	movs	r1, #32
 8001248:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2240      	movs	r2, #64	; 0x40
 800124e:	2100      	movs	r1, #0
 8001250:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001252:	2300      	movs	r3, #0
 8001254:	e000      	b.n	8001258 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001256:	2302      	movs	r3, #2
  }
}
 8001258:	0018      	movs	r0, r3
 800125a:	46bd      	mov	sp, r7
 800125c:	b004      	add	sp, #16
 800125e:	bd80      	pop	{r7, pc}
 8001260:	fffff0ff 	.word	0xfffff0ff

08001264 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d101      	bne.n	8001276 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	e06c      	b.n	8001350 <HAL_LPTIM_Init+0xec>
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	222e      	movs	r2, #46	; 0x2e
 800127a:	5c9b      	ldrb	r3, [r3, r2]
 800127c:	b2db      	uxtb	r3, r3
 800127e:	2b00      	cmp	r3, #0
 8001280:	d107      	bne.n	8001292 <HAL_LPTIM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	222d      	movs	r2, #45	; 0x2d
 8001286:	2100      	movs	r1, #0
 8001288:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	0018      	movs	r0, r3
 800128e:	f002 f927 	bl	80034e0 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	222e      	movs	r2, #46	; 0x2e
 8001296:	2102      	movs	r1, #2
 8001298:	5499      	strb	r1, [r3, r2]

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	60fb      	str	r3, [r7, #12]

  if (((hlptim->Init.Clock.Source) == LPTIM_CLOCKSOURCE_ULPTIM) || ((hlptim->Init.CounterSource) == LPTIM_COUNTERSOURCE_EXTERNAL))
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d005      	beq.n	80012b6 <HAL_LPTIM_Init+0x52>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80012ae:	2380      	movs	r3, #128	; 0x80
 80012b0:	041b      	lsls	r3, r3, #16
 80012b2:	429a      	cmp	r2, r3
 80012b4:	d103      	bne.n	80012be <HAL_LPTIM_Init+0x5a>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	221e      	movs	r2, #30
 80012ba:	4393      	bics	r3, r2
 80012bc:	60fb      	str	r3, [r7, #12]
  }
  if ((hlptim->Init.Trigger.Source) != LPTIM_TRIGSOURCE_SOFTWARE)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	695b      	ldr	r3, [r3, #20]
 80012c2:	4a25      	ldr	r2, [pc, #148]	; (8001358 <HAL_LPTIM_Init+0xf4>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d003      	beq.n	80012d0 <HAL_LPTIM_Init+0x6c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	4a24      	ldr	r2, [pc, #144]	; (800135c <HAL_LPTIM_Init+0xf8>)
 80012cc:	4013      	ands	r3, r2
 80012ce:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, CKPOL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_CKPOL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	4a23      	ldr	r2, [pc, #140]	; (8001360 <HAL_LPTIM_Init+0xfc>)
 80012d4:	4013      	ands	r3, r2
 80012d6:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80012e0:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 80012e6:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 80012ec:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 80012f2:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80012f4:	68fa      	ldr	r2, [r7, #12]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	60fb      	str	r3, [r7, #12]

  if (((hlptim->Init.Clock.Source) == LPTIM_CLOCKSOURCE_ULPTIM) || ((hlptim->Init.CounterSource) == LPTIM_COUNTERSOURCE_EXTERNAL))
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d005      	beq.n	800130e <HAL_LPTIM_Init+0xaa>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001306:	2380      	movs	r3, #128	; 0x80
 8001308:	041b      	lsls	r3, r3, #16
 800130a:	429a      	cmp	r2, r3
 800130c:	d107      	bne.n	800131e <HAL_LPTIM_Init+0xba>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8001316:	4313      	orrs	r3, r2
 8001318:	68fa      	ldr	r2, [r7, #12]
 800131a:	4313      	orrs	r3, r2
 800131c:	60fb      	str	r3, [r7, #12]
  }

  if ((hlptim->Init.Trigger.Source) != LPTIM_TRIGSOURCE_SOFTWARE)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	695b      	ldr	r3, [r3, #20]
 8001322:	4a0d      	ldr	r2, [pc, #52]	; (8001358 <HAL_LPTIM_Init+0xf4>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d00a      	beq.n	800133e <HAL_LPTIM_Init+0xda>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8001330:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8001336:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8001338:	68fa      	ldr	r2, [r7, #12]
 800133a:	4313      	orrs	r3, r2
 800133c:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	68fa      	ldr	r2, [r7, #12]
 8001344:	60da      	str	r2, [r3, #12]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	222e      	movs	r2, #46	; 0x2e
 800134a:	2101      	movs	r1, #1
 800134c:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800134e:	2300      	movs	r3, #0
}
 8001350:	0018      	movs	r0, r3
 8001352:	46bd      	mov	sp, r7
 8001354:	b004      	add	sp, #16
 8001356:	bd80      	pop	{r7, pc}
 8001358:	0000ffff 	.word	0x0000ffff
 800135c:	ffff1f3f 	.word	0xffff1f3f
 8001360:	ff19f1f8 	.word	0xff19f1f8

08001364 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	2201      	movs	r2, #1
 8001374:	4013      	ands	r3, r2
 8001376:	2b01      	cmp	r3, #1
 8001378:	d10e      	bne.n	8001398 <HAL_LPTIM_IRQHandler+0x34>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	2201      	movs	r2, #1
 8001382:	4013      	ands	r3, r2
 8001384:	2b01      	cmp	r3, #1
 8001386:	d107      	bne.n	8001398 <HAL_LPTIM_IRQHandler+0x34>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2201      	movs	r2, #1
 800138e:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	0018      	movs	r0, r3
 8001394:	f000 f888 	bl	80014a8 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	2202      	movs	r2, #2
 80013a0:	4013      	ands	r3, r2
 80013a2:	2b02      	cmp	r3, #2
 80013a4:	d10e      	bne.n	80013c4 <HAL_LPTIM_IRQHandler+0x60>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	2202      	movs	r2, #2
 80013ae:	4013      	ands	r3, r2
 80013b0:	2b02      	cmp	r3, #2
 80013b2:	d107      	bne.n	80013c4 <HAL_LPTIM_IRQHandler+0x60>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	2202      	movs	r2, #2
 80013ba:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	0018      	movs	r0, r3
 80013c0:	f000 f87a 	bl	80014b8 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	2204      	movs	r2, #4
 80013cc:	4013      	ands	r3, r2
 80013ce:	2b04      	cmp	r3, #4
 80013d0:	d10e      	bne.n	80013f0 <HAL_LPTIM_IRQHandler+0x8c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	2204      	movs	r2, #4
 80013da:	4013      	ands	r3, r2
 80013dc:	2b04      	cmp	r3, #4
 80013de:	d107      	bne.n	80013f0 <HAL_LPTIM_IRQHandler+0x8c>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	2204      	movs	r2, #4
 80013e6:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	0018      	movs	r0, r3
 80013ec:	f000 f86c 	bl	80014c8 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	2208      	movs	r2, #8
 80013f8:	4013      	ands	r3, r2
 80013fa:	2b08      	cmp	r3, #8
 80013fc:	d10e      	bne.n	800141c <HAL_LPTIM_IRQHandler+0xb8>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	2208      	movs	r2, #8
 8001406:	4013      	ands	r3, r2
 8001408:	2b08      	cmp	r3, #8
 800140a:	d107      	bne.n	800141c <HAL_LPTIM_IRQHandler+0xb8>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2208      	movs	r2, #8
 8001412:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	0018      	movs	r0, r3
 8001418:	f000 f85e 	bl	80014d8 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	2210      	movs	r2, #16
 8001424:	4013      	ands	r3, r2
 8001426:	2b10      	cmp	r3, #16
 8001428:	d10e      	bne.n	8001448 <HAL_LPTIM_IRQHandler+0xe4>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	2210      	movs	r2, #16
 8001432:	4013      	ands	r3, r2
 8001434:	2b10      	cmp	r3, #16
 8001436:	d107      	bne.n	8001448 <HAL_LPTIM_IRQHandler+0xe4>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	2210      	movs	r2, #16
 800143e:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	0018      	movs	r0, r3
 8001444:	f000 f850 	bl	80014e8 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	2220      	movs	r2, #32
 8001450:	4013      	ands	r3, r2
 8001452:	2b20      	cmp	r3, #32
 8001454:	d10e      	bne.n	8001474 <HAL_LPTIM_IRQHandler+0x110>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	2220      	movs	r2, #32
 800145e:	4013      	ands	r3, r2
 8001460:	2b20      	cmp	r3, #32
 8001462:	d107      	bne.n	8001474 <HAL_LPTIM_IRQHandler+0x110>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	2220      	movs	r2, #32
 800146a:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	0018      	movs	r0, r3
 8001470:	f000 f842 	bl	80014f8 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	2240      	movs	r2, #64	; 0x40
 800147c:	4013      	ands	r3, r2
 800147e:	2b40      	cmp	r3, #64	; 0x40
 8001480:	d10e      	bne.n	80014a0 <HAL_LPTIM_IRQHandler+0x13c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	2240      	movs	r2, #64	; 0x40
 800148a:	4013      	ands	r3, r2
 800148c:	2b40      	cmp	r3, #64	; 0x40
 800148e:	d107      	bne.n	80014a0 <HAL_LPTIM_IRQHandler+0x13c>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2240      	movs	r2, #64	; 0x40
 8001496:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	0018      	movs	r0, r3
 800149c:	f000 f834 	bl	8001508 <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 80014a0:	46c0      	nop			; (mov r8, r8)
 80014a2:	46bd      	mov	sp, r7
 80014a4:	b002      	add	sp, #8
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 80014b0:	46c0      	nop			; (mov r8, r8)
 80014b2:	46bd      	mov	sp, r7
 80014b4:	b002      	add	sp, #8
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 80014c0:	46c0      	nop			; (mov r8, r8)
 80014c2:	46bd      	mov	sp, r7
 80014c4:	b002      	add	sp, #8
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 80014d0:	46c0      	nop			; (mov r8, r8)
 80014d2:	46bd      	mov	sp, r7
 80014d4:	b002      	add	sp, #8
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 80014e0:	46c0      	nop			; (mov r8, r8)
 80014e2:	46bd      	mov	sp, r7
 80014e4:	b002      	add	sp, #8
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 80014f0:	46c0      	nop			; (mov r8, r8)
 80014f2:	46bd      	mov	sp, r7
 80014f4:	b002      	add	sp, #8
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8001500:	46c0      	nop			; (mov r8, r8)
 8001502:	46bd      	mov	sp, r7
 8001504:	b002      	add	sp, #8
 8001506:	bd80      	pop	{r7, pc}

08001508 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8001510:	46c0      	nop			; (mov r8, r8)
 8001512:	46bd      	mov	sp, r7
 8001514:	b002      	add	sp, #8
 8001516:	bd80      	pop	{r7, pc}

08001518 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001518:	b5b0      	push	{r4, r5, r7, lr}
 800151a:	b08a      	sub	sp, #40	; 0x28
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d102      	bne.n	800152c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	f000 fbbc 	bl	8001ca4 <HAL_RCC_OscConfig+0x78c>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800152c:	4bc8      	ldr	r3, [pc, #800]	; (8001850 <HAL_RCC_OscConfig+0x338>)
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	220c      	movs	r2, #12
 8001532:	4013      	ands	r3, r2
 8001534:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001536:	4bc6      	ldr	r3, [pc, #792]	; (8001850 <HAL_RCC_OscConfig+0x338>)
 8001538:	68da      	ldr	r2, [r3, #12]
 800153a:	2380      	movs	r3, #128	; 0x80
 800153c:	025b      	lsls	r3, r3, #9
 800153e:	4013      	ands	r3, r2
 8001540:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	2201      	movs	r2, #1
 8001548:	4013      	ands	r3, r2
 800154a:	d100      	bne.n	800154e <HAL_RCC_OscConfig+0x36>
 800154c:	e07e      	b.n	800164c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	2b08      	cmp	r3, #8
 8001552:	d007      	beq.n	8001564 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	2b0c      	cmp	r3, #12
 8001558:	d112      	bne.n	8001580 <HAL_RCC_OscConfig+0x68>
 800155a:	69ba      	ldr	r2, [r7, #24]
 800155c:	2380      	movs	r3, #128	; 0x80
 800155e:	025b      	lsls	r3, r3, #9
 8001560:	429a      	cmp	r2, r3
 8001562:	d10d      	bne.n	8001580 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001564:	4bba      	ldr	r3, [pc, #744]	; (8001850 <HAL_RCC_OscConfig+0x338>)
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	2380      	movs	r3, #128	; 0x80
 800156a:	029b      	lsls	r3, r3, #10
 800156c:	4013      	ands	r3, r2
 800156e:	d100      	bne.n	8001572 <HAL_RCC_OscConfig+0x5a>
 8001570:	e06b      	b.n	800164a <HAL_RCC_OscConfig+0x132>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d167      	bne.n	800164a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	f000 fb92 	bl	8001ca4 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	685a      	ldr	r2, [r3, #4]
 8001584:	2380      	movs	r3, #128	; 0x80
 8001586:	025b      	lsls	r3, r3, #9
 8001588:	429a      	cmp	r2, r3
 800158a:	d107      	bne.n	800159c <HAL_RCC_OscConfig+0x84>
 800158c:	4bb0      	ldr	r3, [pc, #704]	; (8001850 <HAL_RCC_OscConfig+0x338>)
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	4baf      	ldr	r3, [pc, #700]	; (8001850 <HAL_RCC_OscConfig+0x338>)
 8001592:	2180      	movs	r1, #128	; 0x80
 8001594:	0249      	lsls	r1, r1, #9
 8001596:	430a      	orrs	r2, r1
 8001598:	601a      	str	r2, [r3, #0]
 800159a:	e027      	b.n	80015ec <HAL_RCC_OscConfig+0xd4>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	685a      	ldr	r2, [r3, #4]
 80015a0:	23a0      	movs	r3, #160	; 0xa0
 80015a2:	02db      	lsls	r3, r3, #11
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d10e      	bne.n	80015c6 <HAL_RCC_OscConfig+0xae>
 80015a8:	4ba9      	ldr	r3, [pc, #676]	; (8001850 <HAL_RCC_OscConfig+0x338>)
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	4ba8      	ldr	r3, [pc, #672]	; (8001850 <HAL_RCC_OscConfig+0x338>)
 80015ae:	2180      	movs	r1, #128	; 0x80
 80015b0:	02c9      	lsls	r1, r1, #11
 80015b2:	430a      	orrs	r2, r1
 80015b4:	601a      	str	r2, [r3, #0]
 80015b6:	4ba6      	ldr	r3, [pc, #664]	; (8001850 <HAL_RCC_OscConfig+0x338>)
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	4ba5      	ldr	r3, [pc, #660]	; (8001850 <HAL_RCC_OscConfig+0x338>)
 80015bc:	2180      	movs	r1, #128	; 0x80
 80015be:	0249      	lsls	r1, r1, #9
 80015c0:	430a      	orrs	r2, r1
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	e012      	b.n	80015ec <HAL_RCC_OscConfig+0xd4>
 80015c6:	4ba2      	ldr	r3, [pc, #648]	; (8001850 <HAL_RCC_OscConfig+0x338>)
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	4ba1      	ldr	r3, [pc, #644]	; (8001850 <HAL_RCC_OscConfig+0x338>)
 80015cc:	49a1      	ldr	r1, [pc, #644]	; (8001854 <HAL_RCC_OscConfig+0x33c>)
 80015ce:	400a      	ands	r2, r1
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	4b9f      	ldr	r3, [pc, #636]	; (8001850 <HAL_RCC_OscConfig+0x338>)
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	2380      	movs	r3, #128	; 0x80
 80015d8:	025b      	lsls	r3, r3, #9
 80015da:	4013      	ands	r3, r2
 80015dc:	60fb      	str	r3, [r7, #12]
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	4b9b      	ldr	r3, [pc, #620]	; (8001850 <HAL_RCC_OscConfig+0x338>)
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	4b9a      	ldr	r3, [pc, #616]	; (8001850 <HAL_RCC_OscConfig+0x338>)
 80015e6:	499c      	ldr	r1, [pc, #624]	; (8001858 <HAL_RCC_OscConfig+0x340>)
 80015e8:	400a      	ands	r2, r1
 80015ea:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d015      	beq.n	8001620 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f4:	f7fe ff76 	bl	80004e4 <HAL_GetTick>
 80015f8:	0003      	movs	r3, r0
 80015fa:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80015fc:	e009      	b.n	8001612 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015fe:	f7fe ff71 	bl	80004e4 <HAL_GetTick>
 8001602:	0002      	movs	r2, r0
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	2b64      	cmp	r3, #100	; 0x64
 800160a:	d902      	bls.n	8001612 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800160c:	2303      	movs	r3, #3
 800160e:	f000 fb49 	bl	8001ca4 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001612:	4b8f      	ldr	r3, [pc, #572]	; (8001850 <HAL_RCC_OscConfig+0x338>)
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	2380      	movs	r3, #128	; 0x80
 8001618:	029b      	lsls	r3, r3, #10
 800161a:	4013      	ands	r3, r2
 800161c:	d0ef      	beq.n	80015fe <HAL_RCC_OscConfig+0xe6>
 800161e:	e015      	b.n	800164c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001620:	f7fe ff60 	bl	80004e4 <HAL_GetTick>
 8001624:	0003      	movs	r3, r0
 8001626:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001628:	e008      	b.n	800163c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800162a:	f7fe ff5b 	bl	80004e4 <HAL_GetTick>
 800162e:	0002      	movs	r2, r0
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	2b64      	cmp	r3, #100	; 0x64
 8001636:	d901      	bls.n	800163c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001638:	2303      	movs	r3, #3
 800163a:	e333      	b.n	8001ca4 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800163c:	4b84      	ldr	r3, [pc, #528]	; (8001850 <HAL_RCC_OscConfig+0x338>)
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	2380      	movs	r3, #128	; 0x80
 8001642:	029b      	lsls	r3, r3, #10
 8001644:	4013      	ands	r3, r2
 8001646:	d1f0      	bne.n	800162a <HAL_RCC_OscConfig+0x112>
 8001648:	e000      	b.n	800164c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800164a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2202      	movs	r2, #2
 8001652:	4013      	ands	r3, r2
 8001654:	d100      	bne.n	8001658 <HAL_RCC_OscConfig+0x140>
 8001656:	e098      	b.n	800178a <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800165e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001660:	2220      	movs	r2, #32
 8001662:	4013      	ands	r3, r2
 8001664:	d009      	beq.n	800167a <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001666:	4b7a      	ldr	r3, [pc, #488]	; (8001850 <HAL_RCC_OscConfig+0x338>)
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	4b79      	ldr	r3, [pc, #484]	; (8001850 <HAL_RCC_OscConfig+0x338>)
 800166c:	2120      	movs	r1, #32
 800166e:	430a      	orrs	r2, r1
 8001670:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001674:	2220      	movs	r2, #32
 8001676:	4393      	bics	r3, r2
 8001678:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	2b04      	cmp	r3, #4
 800167e:	d005      	beq.n	800168c <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	2b0c      	cmp	r3, #12
 8001684:	d13d      	bne.n	8001702 <HAL_RCC_OscConfig+0x1ea>
 8001686:	69bb      	ldr	r3, [r7, #24]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d13a      	bne.n	8001702 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800168c:	4b70      	ldr	r3, [pc, #448]	; (8001850 <HAL_RCC_OscConfig+0x338>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2204      	movs	r2, #4
 8001692:	4013      	ands	r3, r2
 8001694:	d004      	beq.n	80016a0 <HAL_RCC_OscConfig+0x188>
 8001696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001698:	2b00      	cmp	r3, #0
 800169a:	d101      	bne.n	80016a0 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	e301      	b.n	8001ca4 <HAL_RCC_OscConfig+0x78c>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016a0:	4b6b      	ldr	r3, [pc, #428]	; (8001850 <HAL_RCC_OscConfig+0x338>)
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	4a6d      	ldr	r2, [pc, #436]	; (800185c <HAL_RCC_OscConfig+0x344>)
 80016a6:	4013      	ands	r3, r2
 80016a8:	0019      	movs	r1, r3
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	691b      	ldr	r3, [r3, #16]
 80016ae:	021a      	lsls	r2, r3, #8
 80016b0:	4b67      	ldr	r3, [pc, #412]	; (8001850 <HAL_RCC_OscConfig+0x338>)
 80016b2:	430a      	orrs	r2, r1
 80016b4:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80016b6:	4b66      	ldr	r3, [pc, #408]	; (8001850 <HAL_RCC_OscConfig+0x338>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	2209      	movs	r2, #9
 80016bc:	4393      	bics	r3, r2
 80016be:	0019      	movs	r1, r3
 80016c0:	4b63      	ldr	r3, [pc, #396]	; (8001850 <HAL_RCC_OscConfig+0x338>)
 80016c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016c4:	430a      	orrs	r2, r1
 80016c6:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016c8:	f000 fc20 	bl	8001f0c <HAL_RCC_GetSysClockFreq>
 80016cc:	0001      	movs	r1, r0
 80016ce:	4b60      	ldr	r3, [pc, #384]	; (8001850 <HAL_RCC_OscConfig+0x338>)
 80016d0:	68db      	ldr	r3, [r3, #12]
 80016d2:	091b      	lsrs	r3, r3, #4
 80016d4:	220f      	movs	r2, #15
 80016d6:	4013      	ands	r3, r2
 80016d8:	4a61      	ldr	r2, [pc, #388]	; (8001860 <HAL_RCC_OscConfig+0x348>)
 80016da:	5cd3      	ldrb	r3, [r2, r3]
 80016dc:	000a      	movs	r2, r1
 80016de:	40da      	lsrs	r2, r3
 80016e0:	4b60      	ldr	r3, [pc, #384]	; (8001864 <HAL_RCC_OscConfig+0x34c>)
 80016e2:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 80016e4:	2513      	movs	r5, #19
 80016e6:	197c      	adds	r4, r7, r5
 80016e8:	2000      	movs	r0, #0
 80016ea:	f7fe fec5 	bl	8000478 <HAL_InitTick>
 80016ee:	0003      	movs	r3, r0
 80016f0:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80016f2:	197b      	adds	r3, r7, r5
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d047      	beq.n	800178a <HAL_RCC_OscConfig+0x272>
      {
        return status;
 80016fa:	2313      	movs	r3, #19
 80016fc:	18fb      	adds	r3, r7, r3
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	e2d0      	b.n	8001ca4 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001704:	2b00      	cmp	r3, #0
 8001706:	d027      	beq.n	8001758 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001708:	4b51      	ldr	r3, [pc, #324]	; (8001850 <HAL_RCC_OscConfig+0x338>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	2209      	movs	r2, #9
 800170e:	4393      	bics	r3, r2
 8001710:	0019      	movs	r1, r3
 8001712:	4b4f      	ldr	r3, [pc, #316]	; (8001850 <HAL_RCC_OscConfig+0x338>)
 8001714:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001716:	430a      	orrs	r2, r1
 8001718:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800171a:	f7fe fee3 	bl	80004e4 <HAL_GetTick>
 800171e:	0003      	movs	r3, r0
 8001720:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001722:	e008      	b.n	8001736 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001724:	f7fe fede 	bl	80004e4 <HAL_GetTick>
 8001728:	0002      	movs	r2, r0
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	2b02      	cmp	r3, #2
 8001730:	d901      	bls.n	8001736 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e2b6      	b.n	8001ca4 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001736:	4b46      	ldr	r3, [pc, #280]	; (8001850 <HAL_RCC_OscConfig+0x338>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	2204      	movs	r2, #4
 800173c:	4013      	ands	r3, r2
 800173e:	d0f1      	beq.n	8001724 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001740:	4b43      	ldr	r3, [pc, #268]	; (8001850 <HAL_RCC_OscConfig+0x338>)
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	4a45      	ldr	r2, [pc, #276]	; (800185c <HAL_RCC_OscConfig+0x344>)
 8001746:	4013      	ands	r3, r2
 8001748:	0019      	movs	r1, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	691b      	ldr	r3, [r3, #16]
 800174e:	021a      	lsls	r2, r3, #8
 8001750:	4b3f      	ldr	r3, [pc, #252]	; (8001850 <HAL_RCC_OscConfig+0x338>)
 8001752:	430a      	orrs	r2, r1
 8001754:	605a      	str	r2, [r3, #4]
 8001756:	e018      	b.n	800178a <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001758:	4b3d      	ldr	r3, [pc, #244]	; (8001850 <HAL_RCC_OscConfig+0x338>)
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	4b3c      	ldr	r3, [pc, #240]	; (8001850 <HAL_RCC_OscConfig+0x338>)
 800175e:	2101      	movs	r1, #1
 8001760:	438a      	bics	r2, r1
 8001762:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001764:	f7fe febe 	bl	80004e4 <HAL_GetTick>
 8001768:	0003      	movs	r3, r0
 800176a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800176c:	e008      	b.n	8001780 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800176e:	f7fe feb9 	bl	80004e4 <HAL_GetTick>
 8001772:	0002      	movs	r2, r0
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	2b02      	cmp	r3, #2
 800177a:	d901      	bls.n	8001780 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 800177c:	2303      	movs	r3, #3
 800177e:	e291      	b.n	8001ca4 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001780:	4b33      	ldr	r3, [pc, #204]	; (8001850 <HAL_RCC_OscConfig+0x338>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2204      	movs	r2, #4
 8001786:	4013      	ands	r3, r2
 8001788:	d1f1      	bne.n	800176e <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	2210      	movs	r2, #16
 8001790:	4013      	ands	r3, r2
 8001792:	d100      	bne.n	8001796 <HAL_RCC_OscConfig+0x27e>
 8001794:	e09f      	b.n	80018d6 <HAL_RCC_OscConfig+0x3be>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d13f      	bne.n	800181c <HAL_RCC_OscConfig+0x304>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800179c:	4b2c      	ldr	r3, [pc, #176]	; (8001850 <HAL_RCC_OscConfig+0x338>)
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	2380      	movs	r3, #128	; 0x80
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	4013      	ands	r3, r2
 80017a6:	d005      	beq.n	80017b4 <HAL_RCC_OscConfig+0x29c>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	69db      	ldr	r3, [r3, #28]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d101      	bne.n	80017b4 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	e277      	b.n	8001ca4 <HAL_RCC_OscConfig+0x78c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017b4:	4b26      	ldr	r3, [pc, #152]	; (8001850 <HAL_RCC_OscConfig+0x338>)
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	4a2b      	ldr	r2, [pc, #172]	; (8001868 <HAL_RCC_OscConfig+0x350>)
 80017ba:	4013      	ands	r3, r2
 80017bc:	0019      	movs	r1, r3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017c2:	4b23      	ldr	r3, [pc, #140]	; (8001850 <HAL_RCC_OscConfig+0x338>)
 80017c4:	430a      	orrs	r2, r1
 80017c6:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017c8:	4b21      	ldr	r3, [pc, #132]	; (8001850 <HAL_RCC_OscConfig+0x338>)
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	021b      	lsls	r3, r3, #8
 80017ce:	0a19      	lsrs	r1, r3, #8
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6a1b      	ldr	r3, [r3, #32]
 80017d4:	061a      	lsls	r2, r3, #24
 80017d6:	4b1e      	ldr	r3, [pc, #120]	; (8001850 <HAL_RCC_OscConfig+0x338>)
 80017d8:	430a      	orrs	r2, r1
 80017da:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e0:	0b5b      	lsrs	r3, r3, #13
 80017e2:	3301      	adds	r3, #1
 80017e4:	2280      	movs	r2, #128	; 0x80
 80017e6:	0212      	lsls	r2, r2, #8
 80017e8:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80017ea:	4b19      	ldr	r3, [pc, #100]	; (8001850 <HAL_RCC_OscConfig+0x338>)
 80017ec:	68db      	ldr	r3, [r3, #12]
 80017ee:	091b      	lsrs	r3, r3, #4
 80017f0:	210f      	movs	r1, #15
 80017f2:	400b      	ands	r3, r1
 80017f4:	491a      	ldr	r1, [pc, #104]	; (8001860 <HAL_RCC_OscConfig+0x348>)
 80017f6:	5ccb      	ldrb	r3, [r1, r3]
 80017f8:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80017fa:	4b1a      	ldr	r3, [pc, #104]	; (8001864 <HAL_RCC_OscConfig+0x34c>)
 80017fc:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 80017fe:	2513      	movs	r5, #19
 8001800:	197c      	adds	r4, r7, r5
 8001802:	2000      	movs	r0, #0
 8001804:	f7fe fe38 	bl	8000478 <HAL_InitTick>
 8001808:	0003      	movs	r3, r0
 800180a:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800180c:	197b      	adds	r3, r7, r5
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d060      	beq.n	80018d6 <HAL_RCC_OscConfig+0x3be>
        {
          return status;
 8001814:	2313      	movs	r3, #19
 8001816:	18fb      	adds	r3, r7, r3
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	e243      	b.n	8001ca4 <HAL_RCC_OscConfig+0x78c>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	69db      	ldr	r3, [r3, #28]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d03e      	beq.n	80018a2 <HAL_RCC_OscConfig+0x38a>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001824:	4b0a      	ldr	r3, [pc, #40]	; (8001850 <HAL_RCC_OscConfig+0x338>)
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	4b09      	ldr	r3, [pc, #36]	; (8001850 <HAL_RCC_OscConfig+0x338>)
 800182a:	2180      	movs	r1, #128	; 0x80
 800182c:	0049      	lsls	r1, r1, #1
 800182e:	430a      	orrs	r2, r1
 8001830:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001832:	f7fe fe57 	bl	80004e4 <HAL_GetTick>
 8001836:	0003      	movs	r3, r0
 8001838:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800183a:	e017      	b.n	800186c <HAL_RCC_OscConfig+0x354>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800183c:	f7fe fe52 	bl	80004e4 <HAL_GetTick>
 8001840:	0002      	movs	r2, r0
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	2b02      	cmp	r3, #2
 8001848:	d910      	bls.n	800186c <HAL_RCC_OscConfig+0x354>
          {
            return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e22a      	b.n	8001ca4 <HAL_RCC_OscConfig+0x78c>
 800184e:	46c0      	nop			; (mov r8, r8)
 8001850:	40021000 	.word	0x40021000
 8001854:	fffeffff 	.word	0xfffeffff
 8001858:	fffbffff 	.word	0xfffbffff
 800185c:	ffffe0ff 	.word	0xffffe0ff
 8001860:	080037d8 	.word	0x080037d8
 8001864:	20000000 	.word	0x20000000
 8001868:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800186c:	4bc6      	ldr	r3, [pc, #792]	; (8001b88 <HAL_RCC_OscConfig+0x670>)
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	2380      	movs	r3, #128	; 0x80
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	4013      	ands	r3, r2
 8001876:	d0e1      	beq.n	800183c <HAL_RCC_OscConfig+0x324>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001878:	4bc3      	ldr	r3, [pc, #780]	; (8001b88 <HAL_RCC_OscConfig+0x670>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	4ac3      	ldr	r2, [pc, #780]	; (8001b8c <HAL_RCC_OscConfig+0x674>)
 800187e:	4013      	ands	r3, r2
 8001880:	0019      	movs	r1, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001886:	4bc0      	ldr	r3, [pc, #768]	; (8001b88 <HAL_RCC_OscConfig+0x670>)
 8001888:	430a      	orrs	r2, r1
 800188a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800188c:	4bbe      	ldr	r3, [pc, #760]	; (8001b88 <HAL_RCC_OscConfig+0x670>)
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	021b      	lsls	r3, r3, #8
 8001892:	0a19      	lsrs	r1, r3, #8
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6a1b      	ldr	r3, [r3, #32]
 8001898:	061a      	lsls	r2, r3, #24
 800189a:	4bbb      	ldr	r3, [pc, #748]	; (8001b88 <HAL_RCC_OscConfig+0x670>)
 800189c:	430a      	orrs	r2, r1
 800189e:	605a      	str	r2, [r3, #4]
 80018a0:	e019      	b.n	80018d6 <HAL_RCC_OscConfig+0x3be>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80018a2:	4bb9      	ldr	r3, [pc, #740]	; (8001b88 <HAL_RCC_OscConfig+0x670>)
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	4bb8      	ldr	r3, [pc, #736]	; (8001b88 <HAL_RCC_OscConfig+0x670>)
 80018a8:	49b9      	ldr	r1, [pc, #740]	; (8001b90 <HAL_RCC_OscConfig+0x678>)
 80018aa:	400a      	ands	r2, r1
 80018ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ae:	f7fe fe19 	bl	80004e4 <HAL_GetTick>
 80018b2:	0003      	movs	r3, r0
 80018b4:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80018b6:	e008      	b.n	80018ca <HAL_RCC_OscConfig+0x3b2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018b8:	f7fe fe14 	bl	80004e4 <HAL_GetTick>
 80018bc:	0002      	movs	r2, r0
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d901      	bls.n	80018ca <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e1ec      	b.n	8001ca4 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80018ca:	4baf      	ldr	r3, [pc, #700]	; (8001b88 <HAL_RCC_OscConfig+0x670>)
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	2380      	movs	r3, #128	; 0x80
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	4013      	ands	r3, r2
 80018d4:	d1f0      	bne.n	80018b8 <HAL_RCC_OscConfig+0x3a0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	2208      	movs	r2, #8
 80018dc:	4013      	ands	r3, r2
 80018de:	d036      	beq.n	800194e <HAL_RCC_OscConfig+0x436>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	695b      	ldr	r3, [r3, #20]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d019      	beq.n	800191c <HAL_RCC_OscConfig+0x404>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018e8:	4ba7      	ldr	r3, [pc, #668]	; (8001b88 <HAL_RCC_OscConfig+0x670>)
 80018ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80018ec:	4ba6      	ldr	r3, [pc, #664]	; (8001b88 <HAL_RCC_OscConfig+0x670>)
 80018ee:	2101      	movs	r1, #1
 80018f0:	430a      	orrs	r2, r1
 80018f2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018f4:	f7fe fdf6 	bl	80004e4 <HAL_GetTick>
 80018f8:	0003      	movs	r3, r0
 80018fa:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80018fc:	e008      	b.n	8001910 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018fe:	f7fe fdf1 	bl	80004e4 <HAL_GetTick>
 8001902:	0002      	movs	r2, r0
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	2b02      	cmp	r3, #2
 800190a:	d901      	bls.n	8001910 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 800190c:	2303      	movs	r3, #3
 800190e:	e1c9      	b.n	8001ca4 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001910:	4b9d      	ldr	r3, [pc, #628]	; (8001b88 <HAL_RCC_OscConfig+0x670>)
 8001912:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001914:	2202      	movs	r2, #2
 8001916:	4013      	ands	r3, r2
 8001918:	d0f1      	beq.n	80018fe <HAL_RCC_OscConfig+0x3e6>
 800191a:	e018      	b.n	800194e <HAL_RCC_OscConfig+0x436>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800191c:	4b9a      	ldr	r3, [pc, #616]	; (8001b88 <HAL_RCC_OscConfig+0x670>)
 800191e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001920:	4b99      	ldr	r3, [pc, #612]	; (8001b88 <HAL_RCC_OscConfig+0x670>)
 8001922:	2101      	movs	r1, #1
 8001924:	438a      	bics	r2, r1
 8001926:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001928:	f7fe fddc 	bl	80004e4 <HAL_GetTick>
 800192c:	0003      	movs	r3, r0
 800192e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001930:	e008      	b.n	8001944 <HAL_RCC_OscConfig+0x42c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001932:	f7fe fdd7 	bl	80004e4 <HAL_GetTick>
 8001936:	0002      	movs	r2, r0
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	1ad3      	subs	r3, r2, r3
 800193c:	2b02      	cmp	r3, #2
 800193e:	d901      	bls.n	8001944 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8001940:	2303      	movs	r3, #3
 8001942:	e1af      	b.n	8001ca4 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001944:	4b90      	ldr	r3, [pc, #576]	; (8001b88 <HAL_RCC_OscConfig+0x670>)
 8001946:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001948:	2202      	movs	r2, #2
 800194a:	4013      	ands	r3, r2
 800194c:	d1f1      	bne.n	8001932 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	2204      	movs	r2, #4
 8001954:	4013      	ands	r3, r2
 8001956:	d100      	bne.n	800195a <HAL_RCC_OscConfig+0x442>
 8001958:	e0af      	b.n	8001aba <HAL_RCC_OscConfig+0x5a2>
  {
    FlagStatus       pwrclkchanged = RESET;
 800195a:	2323      	movs	r3, #35	; 0x23
 800195c:	18fb      	adds	r3, r7, r3
 800195e:	2200      	movs	r2, #0
 8001960:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001962:	4b89      	ldr	r3, [pc, #548]	; (8001b88 <HAL_RCC_OscConfig+0x670>)
 8001964:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001966:	2380      	movs	r3, #128	; 0x80
 8001968:	055b      	lsls	r3, r3, #21
 800196a:	4013      	ands	r3, r2
 800196c:	d10a      	bne.n	8001984 <HAL_RCC_OscConfig+0x46c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800196e:	4b86      	ldr	r3, [pc, #536]	; (8001b88 <HAL_RCC_OscConfig+0x670>)
 8001970:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001972:	4b85      	ldr	r3, [pc, #532]	; (8001b88 <HAL_RCC_OscConfig+0x670>)
 8001974:	2180      	movs	r1, #128	; 0x80
 8001976:	0549      	lsls	r1, r1, #21
 8001978:	430a      	orrs	r2, r1
 800197a:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800197c:	2323      	movs	r3, #35	; 0x23
 800197e:	18fb      	adds	r3, r7, r3
 8001980:	2201      	movs	r2, #1
 8001982:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001984:	4b83      	ldr	r3, [pc, #524]	; (8001b94 <HAL_RCC_OscConfig+0x67c>)
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	2380      	movs	r3, #128	; 0x80
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	4013      	ands	r3, r2
 800198e:	d11a      	bne.n	80019c6 <HAL_RCC_OscConfig+0x4ae>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001990:	4b80      	ldr	r3, [pc, #512]	; (8001b94 <HAL_RCC_OscConfig+0x67c>)
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	4b7f      	ldr	r3, [pc, #508]	; (8001b94 <HAL_RCC_OscConfig+0x67c>)
 8001996:	2180      	movs	r1, #128	; 0x80
 8001998:	0049      	lsls	r1, r1, #1
 800199a:	430a      	orrs	r2, r1
 800199c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800199e:	f7fe fda1 	bl	80004e4 <HAL_GetTick>
 80019a2:	0003      	movs	r3, r0
 80019a4:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019a6:	e008      	b.n	80019ba <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019a8:	f7fe fd9c 	bl	80004e4 <HAL_GetTick>
 80019ac:	0002      	movs	r2, r0
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	2b64      	cmp	r3, #100	; 0x64
 80019b4:	d901      	bls.n	80019ba <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80019b6:	2303      	movs	r3, #3
 80019b8:	e174      	b.n	8001ca4 <HAL_RCC_OscConfig+0x78c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019ba:	4b76      	ldr	r3, [pc, #472]	; (8001b94 <HAL_RCC_OscConfig+0x67c>)
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	2380      	movs	r3, #128	; 0x80
 80019c0:	005b      	lsls	r3, r3, #1
 80019c2:	4013      	ands	r3, r2
 80019c4:	d0f0      	beq.n	80019a8 <HAL_RCC_OscConfig+0x490>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	689a      	ldr	r2, [r3, #8]
 80019ca:	2380      	movs	r3, #128	; 0x80
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d107      	bne.n	80019e2 <HAL_RCC_OscConfig+0x4ca>
 80019d2:	4b6d      	ldr	r3, [pc, #436]	; (8001b88 <HAL_RCC_OscConfig+0x670>)
 80019d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019d6:	4b6c      	ldr	r3, [pc, #432]	; (8001b88 <HAL_RCC_OscConfig+0x670>)
 80019d8:	2180      	movs	r1, #128	; 0x80
 80019da:	0049      	lsls	r1, r1, #1
 80019dc:	430a      	orrs	r2, r1
 80019de:	651a      	str	r2, [r3, #80]	; 0x50
 80019e0:	e031      	b.n	8001a46 <HAL_RCC_OscConfig+0x52e>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d10c      	bne.n	8001a04 <HAL_RCC_OscConfig+0x4ec>
 80019ea:	4b67      	ldr	r3, [pc, #412]	; (8001b88 <HAL_RCC_OscConfig+0x670>)
 80019ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019ee:	4b66      	ldr	r3, [pc, #408]	; (8001b88 <HAL_RCC_OscConfig+0x670>)
 80019f0:	4967      	ldr	r1, [pc, #412]	; (8001b90 <HAL_RCC_OscConfig+0x678>)
 80019f2:	400a      	ands	r2, r1
 80019f4:	651a      	str	r2, [r3, #80]	; 0x50
 80019f6:	4b64      	ldr	r3, [pc, #400]	; (8001b88 <HAL_RCC_OscConfig+0x670>)
 80019f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019fa:	4b63      	ldr	r3, [pc, #396]	; (8001b88 <HAL_RCC_OscConfig+0x670>)
 80019fc:	4966      	ldr	r1, [pc, #408]	; (8001b98 <HAL_RCC_OscConfig+0x680>)
 80019fe:	400a      	ands	r2, r1
 8001a00:	651a      	str	r2, [r3, #80]	; 0x50
 8001a02:	e020      	b.n	8001a46 <HAL_RCC_OscConfig+0x52e>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	689a      	ldr	r2, [r3, #8]
 8001a08:	23a0      	movs	r3, #160	; 0xa0
 8001a0a:	00db      	lsls	r3, r3, #3
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d10e      	bne.n	8001a2e <HAL_RCC_OscConfig+0x516>
 8001a10:	4b5d      	ldr	r3, [pc, #372]	; (8001b88 <HAL_RCC_OscConfig+0x670>)
 8001a12:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a14:	4b5c      	ldr	r3, [pc, #368]	; (8001b88 <HAL_RCC_OscConfig+0x670>)
 8001a16:	2180      	movs	r1, #128	; 0x80
 8001a18:	00c9      	lsls	r1, r1, #3
 8001a1a:	430a      	orrs	r2, r1
 8001a1c:	651a      	str	r2, [r3, #80]	; 0x50
 8001a1e:	4b5a      	ldr	r3, [pc, #360]	; (8001b88 <HAL_RCC_OscConfig+0x670>)
 8001a20:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a22:	4b59      	ldr	r3, [pc, #356]	; (8001b88 <HAL_RCC_OscConfig+0x670>)
 8001a24:	2180      	movs	r1, #128	; 0x80
 8001a26:	0049      	lsls	r1, r1, #1
 8001a28:	430a      	orrs	r2, r1
 8001a2a:	651a      	str	r2, [r3, #80]	; 0x50
 8001a2c:	e00b      	b.n	8001a46 <HAL_RCC_OscConfig+0x52e>
 8001a2e:	4b56      	ldr	r3, [pc, #344]	; (8001b88 <HAL_RCC_OscConfig+0x670>)
 8001a30:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a32:	4b55      	ldr	r3, [pc, #340]	; (8001b88 <HAL_RCC_OscConfig+0x670>)
 8001a34:	4956      	ldr	r1, [pc, #344]	; (8001b90 <HAL_RCC_OscConfig+0x678>)
 8001a36:	400a      	ands	r2, r1
 8001a38:	651a      	str	r2, [r3, #80]	; 0x50
 8001a3a:	4b53      	ldr	r3, [pc, #332]	; (8001b88 <HAL_RCC_OscConfig+0x670>)
 8001a3c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a3e:	4b52      	ldr	r3, [pc, #328]	; (8001b88 <HAL_RCC_OscConfig+0x670>)
 8001a40:	4955      	ldr	r1, [pc, #340]	; (8001b98 <HAL_RCC_OscConfig+0x680>)
 8001a42:	400a      	ands	r2, r1
 8001a44:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d015      	beq.n	8001a7a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a4e:	f7fe fd49 	bl	80004e4 <HAL_GetTick>
 8001a52:	0003      	movs	r3, r0
 8001a54:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001a56:	e009      	b.n	8001a6c <HAL_RCC_OscConfig+0x554>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a58:	f7fe fd44 	bl	80004e4 <HAL_GetTick>
 8001a5c:	0002      	movs	r2, r0
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	4a4e      	ldr	r2, [pc, #312]	; (8001b9c <HAL_RCC_OscConfig+0x684>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d901      	bls.n	8001a6c <HAL_RCC_OscConfig+0x554>
        {
          return HAL_TIMEOUT;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	e11b      	b.n	8001ca4 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001a6c:	4b46      	ldr	r3, [pc, #280]	; (8001b88 <HAL_RCC_OscConfig+0x670>)
 8001a6e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a70:	2380      	movs	r3, #128	; 0x80
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	4013      	ands	r3, r2
 8001a76:	d0ef      	beq.n	8001a58 <HAL_RCC_OscConfig+0x540>
 8001a78:	e014      	b.n	8001aa4 <HAL_RCC_OscConfig+0x58c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a7a:	f7fe fd33 	bl	80004e4 <HAL_GetTick>
 8001a7e:	0003      	movs	r3, r0
 8001a80:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001a82:	e009      	b.n	8001a98 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a84:	f7fe fd2e 	bl	80004e4 <HAL_GetTick>
 8001a88:	0002      	movs	r2, r0
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	4a43      	ldr	r2, [pc, #268]	; (8001b9c <HAL_RCC_OscConfig+0x684>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d901      	bls.n	8001a98 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001a94:	2303      	movs	r3, #3
 8001a96:	e105      	b.n	8001ca4 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001a98:	4b3b      	ldr	r3, [pc, #236]	; (8001b88 <HAL_RCC_OscConfig+0x670>)
 8001a9a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a9c:	2380      	movs	r3, #128	; 0x80
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	d1ef      	bne.n	8001a84 <HAL_RCC_OscConfig+0x56c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001aa4:	2323      	movs	r3, #35	; 0x23
 8001aa6:	18fb      	adds	r3, r7, r3
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d105      	bne.n	8001aba <HAL_RCC_OscConfig+0x5a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001aae:	4b36      	ldr	r3, [pc, #216]	; (8001b88 <HAL_RCC_OscConfig+0x670>)
 8001ab0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ab2:	4b35      	ldr	r3, [pc, #212]	; (8001b88 <HAL_RCC_OscConfig+0x670>)
 8001ab4:	493a      	ldr	r1, [pc, #232]	; (8001ba0 <HAL_RCC_OscConfig+0x688>)
 8001ab6:	400a      	ands	r2, r1
 8001ab8:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	2220      	movs	r2, #32
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	d049      	beq.n	8001b58 <HAL_RCC_OscConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	699b      	ldr	r3, [r3, #24]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d026      	beq.n	8001b1a <HAL_RCC_OscConfig+0x602>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001acc:	4b2e      	ldr	r3, [pc, #184]	; (8001b88 <HAL_RCC_OscConfig+0x670>)
 8001ace:	689a      	ldr	r2, [r3, #8]
 8001ad0:	4b2d      	ldr	r3, [pc, #180]	; (8001b88 <HAL_RCC_OscConfig+0x670>)
 8001ad2:	2101      	movs	r1, #1
 8001ad4:	430a      	orrs	r2, r1
 8001ad6:	609a      	str	r2, [r3, #8]
 8001ad8:	4b2b      	ldr	r3, [pc, #172]	; (8001b88 <HAL_RCC_OscConfig+0x670>)
 8001ada:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001adc:	4b2a      	ldr	r3, [pc, #168]	; (8001b88 <HAL_RCC_OscConfig+0x670>)
 8001ade:	2101      	movs	r1, #1
 8001ae0:	430a      	orrs	r2, r1
 8001ae2:	635a      	str	r2, [r3, #52]	; 0x34
 8001ae4:	4b2f      	ldr	r3, [pc, #188]	; (8001ba4 <HAL_RCC_OscConfig+0x68c>)
 8001ae6:	6a1a      	ldr	r2, [r3, #32]
 8001ae8:	4b2e      	ldr	r3, [pc, #184]	; (8001ba4 <HAL_RCC_OscConfig+0x68c>)
 8001aea:	2180      	movs	r1, #128	; 0x80
 8001aec:	0189      	lsls	r1, r1, #6
 8001aee:	430a      	orrs	r2, r1
 8001af0:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af2:	f7fe fcf7 	bl	80004e4 <HAL_GetTick>
 8001af6:	0003      	movs	r3, r0
 8001af8:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001afa:	e008      	b.n	8001b0e <HAL_RCC_OscConfig+0x5f6>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001afc:	f7fe fcf2 	bl	80004e4 <HAL_GetTick>
 8001b00:	0002      	movs	r2, r0
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d901      	bls.n	8001b0e <HAL_RCC_OscConfig+0x5f6>
          {
            return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e0ca      	b.n	8001ca4 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001b0e:	4b1e      	ldr	r3, [pc, #120]	; (8001b88 <HAL_RCC_OscConfig+0x670>)
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	2202      	movs	r2, #2
 8001b14:	4013      	ands	r3, r2
 8001b16:	d0f1      	beq.n	8001afc <HAL_RCC_OscConfig+0x5e4>
 8001b18:	e01e      	b.n	8001b58 <HAL_RCC_OscConfig+0x640>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001b1a:	4b1b      	ldr	r3, [pc, #108]	; (8001b88 <HAL_RCC_OscConfig+0x670>)
 8001b1c:	689a      	ldr	r2, [r3, #8]
 8001b1e:	4b1a      	ldr	r3, [pc, #104]	; (8001b88 <HAL_RCC_OscConfig+0x670>)
 8001b20:	2101      	movs	r1, #1
 8001b22:	438a      	bics	r2, r1
 8001b24:	609a      	str	r2, [r3, #8]
 8001b26:	4b1f      	ldr	r3, [pc, #124]	; (8001ba4 <HAL_RCC_OscConfig+0x68c>)
 8001b28:	6a1a      	ldr	r2, [r3, #32]
 8001b2a:	4b1e      	ldr	r3, [pc, #120]	; (8001ba4 <HAL_RCC_OscConfig+0x68c>)
 8001b2c:	491e      	ldr	r1, [pc, #120]	; (8001ba8 <HAL_RCC_OscConfig+0x690>)
 8001b2e:	400a      	ands	r2, r1
 8001b30:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b32:	f7fe fcd7 	bl	80004e4 <HAL_GetTick>
 8001b36:	0003      	movs	r3, r0
 8001b38:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001b3a:	e008      	b.n	8001b4e <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b3c:	f7fe fcd2 	bl	80004e4 <HAL_GetTick>
 8001b40:	0002      	movs	r2, r0
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d901      	bls.n	8001b4e <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e0aa      	b.n	8001ca4 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001b4e:	4b0e      	ldr	r3, [pc, #56]	; (8001b88 <HAL_RCC_OscConfig+0x670>)
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	2202      	movs	r2, #2
 8001b54:	4013      	ands	r3, r2
 8001b56:	d1f1      	bne.n	8001b3c <HAL_RCC_OscConfig+0x624>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d100      	bne.n	8001b62 <HAL_RCC_OscConfig+0x64a>
 8001b60:	e09f      	b.n	8001ca2 <HAL_RCC_OscConfig+0x78a>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	2b0c      	cmp	r3, #12
 8001b66:	d100      	bne.n	8001b6a <HAL_RCC_OscConfig+0x652>
 8001b68:	e078      	b.n	8001c5c <HAL_RCC_OscConfig+0x744>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d159      	bne.n	8001c26 <HAL_RCC_OscConfig+0x70e>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b72:	4b05      	ldr	r3, [pc, #20]	; (8001b88 <HAL_RCC_OscConfig+0x670>)
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	4b04      	ldr	r3, [pc, #16]	; (8001b88 <HAL_RCC_OscConfig+0x670>)
 8001b78:	490c      	ldr	r1, [pc, #48]	; (8001bac <HAL_RCC_OscConfig+0x694>)
 8001b7a:	400a      	ands	r2, r1
 8001b7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b7e:	f7fe fcb1 	bl	80004e4 <HAL_GetTick>
 8001b82:	0003      	movs	r3, r0
 8001b84:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001b86:	e01c      	b.n	8001bc2 <HAL_RCC_OscConfig+0x6aa>
 8001b88:	40021000 	.word	0x40021000
 8001b8c:	ffff1fff 	.word	0xffff1fff
 8001b90:	fffffeff 	.word	0xfffffeff
 8001b94:	40007000 	.word	0x40007000
 8001b98:	fffffbff 	.word	0xfffffbff
 8001b9c:	00001388 	.word	0x00001388
 8001ba0:	efffffff 	.word	0xefffffff
 8001ba4:	40010000 	.word	0x40010000
 8001ba8:	ffffdfff 	.word	0xffffdfff
 8001bac:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bb0:	f7fe fc98 	bl	80004e4 <HAL_GetTick>
 8001bb4:	0002      	movs	r2, r0
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d901      	bls.n	8001bc2 <HAL_RCC_OscConfig+0x6aa>
          {
            return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e070      	b.n	8001ca4 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001bc2:	4b3a      	ldr	r3, [pc, #232]	; (8001cac <HAL_RCC_OscConfig+0x794>)
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	2380      	movs	r3, #128	; 0x80
 8001bc8:	049b      	lsls	r3, r3, #18
 8001bca:	4013      	ands	r3, r2
 8001bcc:	d1f0      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x698>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bce:	4b37      	ldr	r3, [pc, #220]	; (8001cac <HAL_RCC_OscConfig+0x794>)
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	4a37      	ldr	r2, [pc, #220]	; (8001cb0 <HAL_RCC_OscConfig+0x798>)
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	0019      	movs	r1, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be0:	431a      	orrs	r2, r3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001be6:	431a      	orrs	r2, r3
 8001be8:	4b30      	ldr	r3, [pc, #192]	; (8001cac <HAL_RCC_OscConfig+0x794>)
 8001bea:	430a      	orrs	r2, r1
 8001bec:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bee:	4b2f      	ldr	r3, [pc, #188]	; (8001cac <HAL_RCC_OscConfig+0x794>)
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	4b2e      	ldr	r3, [pc, #184]	; (8001cac <HAL_RCC_OscConfig+0x794>)
 8001bf4:	2180      	movs	r1, #128	; 0x80
 8001bf6:	0449      	lsls	r1, r1, #17
 8001bf8:	430a      	orrs	r2, r1
 8001bfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bfc:	f7fe fc72 	bl	80004e4 <HAL_GetTick>
 8001c00:	0003      	movs	r3, r0
 8001c02:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001c04:	e008      	b.n	8001c18 <HAL_RCC_OscConfig+0x700>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c06:	f7fe fc6d 	bl	80004e4 <HAL_GetTick>
 8001c0a:	0002      	movs	r2, r0
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d901      	bls.n	8001c18 <HAL_RCC_OscConfig+0x700>
          {
            return HAL_TIMEOUT;
 8001c14:	2303      	movs	r3, #3
 8001c16:	e045      	b.n	8001ca4 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001c18:	4b24      	ldr	r3, [pc, #144]	; (8001cac <HAL_RCC_OscConfig+0x794>)
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	2380      	movs	r3, #128	; 0x80
 8001c1e:	049b      	lsls	r3, r3, #18
 8001c20:	4013      	ands	r3, r2
 8001c22:	d0f0      	beq.n	8001c06 <HAL_RCC_OscConfig+0x6ee>
 8001c24:	e03d      	b.n	8001ca2 <HAL_RCC_OscConfig+0x78a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c26:	4b21      	ldr	r3, [pc, #132]	; (8001cac <HAL_RCC_OscConfig+0x794>)
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	4b20      	ldr	r3, [pc, #128]	; (8001cac <HAL_RCC_OscConfig+0x794>)
 8001c2c:	4921      	ldr	r1, [pc, #132]	; (8001cb4 <HAL_RCC_OscConfig+0x79c>)
 8001c2e:	400a      	ands	r2, r1
 8001c30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c32:	f7fe fc57 	bl	80004e4 <HAL_GetTick>
 8001c36:	0003      	movs	r3, r0
 8001c38:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001c3a:	e008      	b.n	8001c4e <HAL_RCC_OscConfig+0x736>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c3c:	f7fe fc52 	bl	80004e4 <HAL_GetTick>
 8001c40:	0002      	movs	r2, r0
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_OscConfig+0x736>
          {
            return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e02a      	b.n	8001ca4 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001c4e:	4b17      	ldr	r3, [pc, #92]	; (8001cac <HAL_RCC_OscConfig+0x794>)
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	2380      	movs	r3, #128	; 0x80
 8001c54:	049b      	lsls	r3, r3, #18
 8001c56:	4013      	ands	r3, r2
 8001c58:	d1f0      	bne.n	8001c3c <HAL_RCC_OscConfig+0x724>
 8001c5a:	e022      	b.n	8001ca2 <HAL_RCC_OscConfig+0x78a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d101      	bne.n	8001c68 <HAL_RCC_OscConfig+0x750>
      {
        return HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	e01d      	b.n	8001ca4 <HAL_RCC_OscConfig+0x78c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c68:	4b10      	ldr	r3, [pc, #64]	; (8001cac <HAL_RCC_OscConfig+0x794>)
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c6e:	69ba      	ldr	r2, [r7, #24]
 8001c70:	2380      	movs	r3, #128	; 0x80
 8001c72:	025b      	lsls	r3, r3, #9
 8001c74:	401a      	ands	r2, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d10f      	bne.n	8001c9e <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001c7e:	69ba      	ldr	r2, [r7, #24]
 8001c80:	23f0      	movs	r3, #240	; 0xf0
 8001c82:	039b      	lsls	r3, r3, #14
 8001c84:	401a      	ands	r2, r3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d107      	bne.n	8001c9e <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001c8e:	69ba      	ldr	r2, [r7, #24]
 8001c90:	23c0      	movs	r3, #192	; 0xc0
 8001c92:	041b      	lsls	r3, r3, #16
 8001c94:	401a      	ands	r2, r3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d001      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e000      	b.n	8001ca4 <HAL_RCC_OscConfig+0x78c>
        }
      }
    }
  }

  return HAL_OK;
 8001ca2:	2300      	movs	r3, #0
}
 8001ca4:	0018      	movs	r0, r3
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	b00a      	add	sp, #40	; 0x28
 8001caa:	bdb0      	pop	{r4, r5, r7, pc}
 8001cac:	40021000 	.word	0x40021000
 8001cb0:	ff02ffff 	.word	0xff02ffff
 8001cb4:	feffffff 	.word	0xfeffffff

08001cb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cb8:	b5b0      	push	{r4, r5, r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d101      	bne.n	8001ccc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e10d      	b.n	8001ee8 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ccc:	4b88      	ldr	r3, [pc, #544]	; (8001ef0 <HAL_RCC_ClockConfig+0x238>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	683a      	ldr	r2, [r7, #0]
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d911      	bls.n	8001cfe <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cda:	4b85      	ldr	r3, [pc, #532]	; (8001ef0 <HAL_RCC_ClockConfig+0x238>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	2201      	movs	r2, #1
 8001ce0:	4393      	bics	r3, r2
 8001ce2:	0019      	movs	r1, r3
 8001ce4:	4b82      	ldr	r3, [pc, #520]	; (8001ef0 <HAL_RCC_ClockConfig+0x238>)
 8001ce6:	683a      	ldr	r2, [r7, #0]
 8001ce8:	430a      	orrs	r2, r1
 8001cea:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cec:	4b80      	ldr	r3, [pc, #512]	; (8001ef0 <HAL_RCC_ClockConfig+0x238>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	683a      	ldr	r2, [r7, #0]
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d001      	beq.n	8001cfe <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e0f4      	b.n	8001ee8 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	2202      	movs	r2, #2
 8001d04:	4013      	ands	r3, r2
 8001d06:	d009      	beq.n	8001d1c <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d08:	4b7a      	ldr	r3, [pc, #488]	; (8001ef4 <HAL_RCC_ClockConfig+0x23c>)
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	22f0      	movs	r2, #240	; 0xf0
 8001d0e:	4393      	bics	r3, r2
 8001d10:	0019      	movs	r1, r3
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	689a      	ldr	r2, [r3, #8]
 8001d16:	4b77      	ldr	r3, [pc, #476]	; (8001ef4 <HAL_RCC_ClockConfig+0x23c>)
 8001d18:	430a      	orrs	r2, r1
 8001d1a:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2201      	movs	r2, #1
 8001d22:	4013      	ands	r3, r2
 8001d24:	d100      	bne.n	8001d28 <HAL_RCC_ClockConfig+0x70>
 8001d26:	e089      	b.n	8001e3c <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	d107      	bne.n	8001d40 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d30:	4b70      	ldr	r3, [pc, #448]	; (8001ef4 <HAL_RCC_ClockConfig+0x23c>)
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	2380      	movs	r3, #128	; 0x80
 8001d36:	029b      	lsls	r3, r3, #10
 8001d38:	4013      	ands	r3, r2
 8001d3a:	d120      	bne.n	8001d7e <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e0d3      	b.n	8001ee8 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	2b03      	cmp	r3, #3
 8001d46:	d107      	bne.n	8001d58 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001d48:	4b6a      	ldr	r3, [pc, #424]	; (8001ef4 <HAL_RCC_ClockConfig+0x23c>)
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	2380      	movs	r3, #128	; 0x80
 8001d4e:	049b      	lsls	r3, r3, #18
 8001d50:	4013      	ands	r3, r2
 8001d52:	d114      	bne.n	8001d7e <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e0c7      	b.n	8001ee8 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d106      	bne.n	8001d6e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d60:	4b64      	ldr	r3, [pc, #400]	; (8001ef4 <HAL_RCC_ClockConfig+0x23c>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2204      	movs	r2, #4
 8001d66:	4013      	ands	r3, r2
 8001d68:	d109      	bne.n	8001d7e <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e0bc      	b.n	8001ee8 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001d6e:	4b61      	ldr	r3, [pc, #388]	; (8001ef4 <HAL_RCC_ClockConfig+0x23c>)
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	2380      	movs	r3, #128	; 0x80
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	4013      	ands	r3, r2
 8001d78:	d101      	bne.n	8001d7e <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e0b4      	b.n	8001ee8 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d7e:	4b5d      	ldr	r3, [pc, #372]	; (8001ef4 <HAL_RCC_ClockConfig+0x23c>)
 8001d80:	68db      	ldr	r3, [r3, #12]
 8001d82:	2203      	movs	r2, #3
 8001d84:	4393      	bics	r3, r2
 8001d86:	0019      	movs	r1, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685a      	ldr	r2, [r3, #4]
 8001d8c:	4b59      	ldr	r3, [pc, #356]	; (8001ef4 <HAL_RCC_ClockConfig+0x23c>)
 8001d8e:	430a      	orrs	r2, r1
 8001d90:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d92:	f7fe fba7 	bl	80004e4 <HAL_GetTick>
 8001d96:	0003      	movs	r3, r0
 8001d98:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	d111      	bne.n	8001dc6 <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001da2:	e009      	b.n	8001db8 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001da4:	f7fe fb9e 	bl	80004e4 <HAL_GetTick>
 8001da8:	0002      	movs	r2, r0
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	4a52      	ldr	r2, [pc, #328]	; (8001ef8 <HAL_RCC_ClockConfig+0x240>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d901      	bls.n	8001db8 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 8001db4:	2303      	movs	r3, #3
 8001db6:	e097      	b.n	8001ee8 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001db8:	4b4e      	ldr	r3, [pc, #312]	; (8001ef4 <HAL_RCC_ClockConfig+0x23c>)
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	220c      	movs	r2, #12
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	2b08      	cmp	r3, #8
 8001dc2:	d1ef      	bne.n	8001da4 <HAL_RCC_ClockConfig+0xec>
 8001dc4:	e03a      	b.n	8001e3c <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	2b03      	cmp	r3, #3
 8001dcc:	d111      	bne.n	8001df2 <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001dce:	e009      	b.n	8001de4 <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dd0:	f7fe fb88 	bl	80004e4 <HAL_GetTick>
 8001dd4:	0002      	movs	r2, r0
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	4a47      	ldr	r2, [pc, #284]	; (8001ef8 <HAL_RCC_ClockConfig+0x240>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d901      	bls.n	8001de4 <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 8001de0:	2303      	movs	r3, #3
 8001de2:	e081      	b.n	8001ee8 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001de4:	4b43      	ldr	r3, [pc, #268]	; (8001ef4 <HAL_RCC_ClockConfig+0x23c>)
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	220c      	movs	r2, #12
 8001dea:	4013      	ands	r3, r2
 8001dec:	2b0c      	cmp	r3, #12
 8001dee:	d1ef      	bne.n	8001dd0 <HAL_RCC_ClockConfig+0x118>
 8001df0:	e024      	b.n	8001e3c <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d11b      	bne.n	8001e32 <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001dfa:	e009      	b.n	8001e10 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dfc:	f7fe fb72 	bl	80004e4 <HAL_GetTick>
 8001e00:	0002      	movs	r2, r0
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	4a3c      	ldr	r2, [pc, #240]	; (8001ef8 <HAL_RCC_ClockConfig+0x240>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d901      	bls.n	8001e10 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	e06b      	b.n	8001ee8 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e10:	4b38      	ldr	r3, [pc, #224]	; (8001ef4 <HAL_RCC_ClockConfig+0x23c>)
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	220c      	movs	r2, #12
 8001e16:	4013      	ands	r3, r2
 8001e18:	2b04      	cmp	r3, #4
 8001e1a:	d1ef      	bne.n	8001dfc <HAL_RCC_ClockConfig+0x144>
 8001e1c:	e00e      	b.n	8001e3c <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e1e:	f7fe fb61 	bl	80004e4 <HAL_GetTick>
 8001e22:	0002      	movs	r2, r0
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	4a33      	ldr	r2, [pc, #204]	; (8001ef8 <HAL_RCC_ClockConfig+0x240>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e05a      	b.n	8001ee8 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001e32:	4b30      	ldr	r3, [pc, #192]	; (8001ef4 <HAL_RCC_ClockConfig+0x23c>)
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	220c      	movs	r2, #12
 8001e38:	4013      	ands	r3, r2
 8001e3a:	d1f0      	bne.n	8001e1e <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e3c:	4b2c      	ldr	r3, [pc, #176]	; (8001ef0 <HAL_RCC_ClockConfig+0x238>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2201      	movs	r2, #1
 8001e42:	4013      	ands	r3, r2
 8001e44:	683a      	ldr	r2, [r7, #0]
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d211      	bcs.n	8001e6e <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e4a:	4b29      	ldr	r3, [pc, #164]	; (8001ef0 <HAL_RCC_ClockConfig+0x238>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	4393      	bics	r3, r2
 8001e52:	0019      	movs	r1, r3
 8001e54:	4b26      	ldr	r3, [pc, #152]	; (8001ef0 <HAL_RCC_ClockConfig+0x238>)
 8001e56:	683a      	ldr	r2, [r7, #0]
 8001e58:	430a      	orrs	r2, r1
 8001e5a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e5c:	4b24      	ldr	r3, [pc, #144]	; (8001ef0 <HAL_RCC_ClockConfig+0x238>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2201      	movs	r2, #1
 8001e62:	4013      	ands	r3, r2
 8001e64:	683a      	ldr	r2, [r7, #0]
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d001      	beq.n	8001e6e <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e03c      	b.n	8001ee8 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2204      	movs	r2, #4
 8001e74:	4013      	ands	r3, r2
 8001e76:	d009      	beq.n	8001e8c <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e78:	4b1e      	ldr	r3, [pc, #120]	; (8001ef4 <HAL_RCC_ClockConfig+0x23c>)
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	4a1f      	ldr	r2, [pc, #124]	; (8001efc <HAL_RCC_ClockConfig+0x244>)
 8001e7e:	4013      	ands	r3, r2
 8001e80:	0019      	movs	r1, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	68da      	ldr	r2, [r3, #12]
 8001e86:	4b1b      	ldr	r3, [pc, #108]	; (8001ef4 <HAL_RCC_ClockConfig+0x23c>)
 8001e88:	430a      	orrs	r2, r1
 8001e8a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	2208      	movs	r2, #8
 8001e92:	4013      	ands	r3, r2
 8001e94:	d00a      	beq.n	8001eac <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e96:	4b17      	ldr	r3, [pc, #92]	; (8001ef4 <HAL_RCC_ClockConfig+0x23c>)
 8001e98:	68db      	ldr	r3, [r3, #12]
 8001e9a:	4a19      	ldr	r2, [pc, #100]	; (8001f00 <HAL_RCC_ClockConfig+0x248>)
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	0019      	movs	r1, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	691b      	ldr	r3, [r3, #16]
 8001ea4:	00da      	lsls	r2, r3, #3
 8001ea6:	4b13      	ldr	r3, [pc, #76]	; (8001ef4 <HAL_RCC_ClockConfig+0x23c>)
 8001ea8:	430a      	orrs	r2, r1
 8001eaa:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001eac:	f000 f82e 	bl	8001f0c <HAL_RCC_GetSysClockFreq>
 8001eb0:	0001      	movs	r1, r0
 8001eb2:	4b10      	ldr	r3, [pc, #64]	; (8001ef4 <HAL_RCC_ClockConfig+0x23c>)
 8001eb4:	68db      	ldr	r3, [r3, #12]
 8001eb6:	091b      	lsrs	r3, r3, #4
 8001eb8:	220f      	movs	r2, #15
 8001eba:	4013      	ands	r3, r2
 8001ebc:	4a11      	ldr	r2, [pc, #68]	; (8001f04 <HAL_RCC_ClockConfig+0x24c>)
 8001ebe:	5cd3      	ldrb	r3, [r2, r3]
 8001ec0:	000a      	movs	r2, r1
 8001ec2:	40da      	lsrs	r2, r3
 8001ec4:	4b10      	ldr	r3, [pc, #64]	; (8001f08 <HAL_RCC_ClockConfig+0x250>)
 8001ec6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8001ec8:	250b      	movs	r5, #11
 8001eca:	197c      	adds	r4, r7, r5
 8001ecc:	2000      	movs	r0, #0
 8001ece:	f7fe fad3 	bl	8000478 <HAL_InitTick>
 8001ed2:	0003      	movs	r3, r0
 8001ed4:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001ed6:	197b      	adds	r3, r7, r5
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d003      	beq.n	8001ee6 <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 8001ede:	230b      	movs	r3, #11
 8001ee0:	18fb      	adds	r3, r7, r3
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	e000      	b.n	8001ee8 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 8001ee6:	2300      	movs	r3, #0
}
 8001ee8:	0018      	movs	r0, r3
 8001eea:	46bd      	mov	sp, r7
 8001eec:	b004      	add	sp, #16
 8001eee:	bdb0      	pop	{r4, r5, r7, pc}
 8001ef0:	40022000 	.word	0x40022000
 8001ef4:	40021000 	.word	0x40021000
 8001ef8:	00001388 	.word	0x00001388
 8001efc:	fffff8ff 	.word	0xfffff8ff
 8001f00:	ffffc7ff 	.word	0xffffc7ff
 8001f04:	080037d8 	.word	0x080037d8
 8001f08:	20000000 	.word	0x20000000

08001f0c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b086      	sub	sp, #24
 8001f10:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001f12:	4b3b      	ldr	r3, [pc, #236]	; (8002000 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001f14:	68db      	ldr	r3, [r3, #12]
 8001f16:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	220c      	movs	r2, #12
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	2b08      	cmp	r3, #8
 8001f20:	d00e      	beq.n	8001f40 <HAL_RCC_GetSysClockFreq+0x34>
 8001f22:	2b0c      	cmp	r3, #12
 8001f24:	d00f      	beq.n	8001f46 <HAL_RCC_GetSysClockFreq+0x3a>
 8001f26:	2b04      	cmp	r3, #4
 8001f28:	d157      	bne.n	8001fda <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001f2a:	4b35      	ldr	r3, [pc, #212]	; (8002000 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	2210      	movs	r2, #16
 8001f30:	4013      	ands	r3, r2
 8001f32:	d002      	beq.n	8001f3a <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001f34:	4b33      	ldr	r3, [pc, #204]	; (8002004 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f36:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001f38:	e05d      	b.n	8001ff6 <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 8001f3a:	4b33      	ldr	r3, [pc, #204]	; (8002008 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001f3c:	613b      	str	r3, [r7, #16]
      break;
 8001f3e:	e05a      	b.n	8001ff6 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f40:	4b32      	ldr	r3, [pc, #200]	; (800200c <HAL_RCC_GetSysClockFreq+0x100>)
 8001f42:	613b      	str	r3, [r7, #16]
      break;
 8001f44:	e057      	b.n	8001ff6 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	0c9b      	lsrs	r3, r3, #18
 8001f4a:	220f      	movs	r2, #15
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	4a30      	ldr	r2, [pc, #192]	; (8002010 <HAL_RCC_GetSysClockFreq+0x104>)
 8001f50:	5cd3      	ldrb	r3, [r2, r3]
 8001f52:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	0d9b      	lsrs	r3, r3, #22
 8001f58:	2203      	movs	r2, #3
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f60:	4b27      	ldr	r3, [pc, #156]	; (8002000 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001f62:	68da      	ldr	r2, [r3, #12]
 8001f64:	2380      	movs	r3, #128	; 0x80
 8001f66:	025b      	lsls	r3, r3, #9
 8001f68:	4013      	ands	r3, r2
 8001f6a:	d00f      	beq.n	8001f8c <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8001f6c:	68b9      	ldr	r1, [r7, #8]
 8001f6e:	000a      	movs	r2, r1
 8001f70:	0152      	lsls	r2, r2, #5
 8001f72:	1a52      	subs	r2, r2, r1
 8001f74:	0193      	lsls	r3, r2, #6
 8001f76:	1a9b      	subs	r3, r3, r2
 8001f78:	00db      	lsls	r3, r3, #3
 8001f7a:	185b      	adds	r3, r3, r1
 8001f7c:	025b      	lsls	r3, r3, #9
 8001f7e:	6879      	ldr	r1, [r7, #4]
 8001f80:	0018      	movs	r0, r3
 8001f82:	f7fe f8c1 	bl	8000108 <__udivsi3>
 8001f86:	0003      	movs	r3, r0
 8001f88:	617b      	str	r3, [r7, #20]
 8001f8a:	e023      	b.n	8001fd4 <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001f8c:	4b1c      	ldr	r3, [pc, #112]	; (8002000 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2210      	movs	r2, #16
 8001f92:	4013      	ands	r3, r2
 8001f94:	d00f      	beq.n	8001fb6 <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8001f96:	68b9      	ldr	r1, [r7, #8]
 8001f98:	000a      	movs	r2, r1
 8001f9a:	0152      	lsls	r2, r2, #5
 8001f9c:	1a52      	subs	r2, r2, r1
 8001f9e:	0193      	lsls	r3, r2, #6
 8001fa0:	1a9b      	subs	r3, r3, r2
 8001fa2:	00db      	lsls	r3, r3, #3
 8001fa4:	185b      	adds	r3, r3, r1
 8001fa6:	021b      	lsls	r3, r3, #8
 8001fa8:	6879      	ldr	r1, [r7, #4]
 8001faa:	0018      	movs	r0, r3
 8001fac:	f7fe f8ac 	bl	8000108 <__udivsi3>
 8001fb0:	0003      	movs	r3, r0
 8001fb2:	617b      	str	r3, [r7, #20]
 8001fb4:	e00e      	b.n	8001fd4 <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 8001fb6:	68b9      	ldr	r1, [r7, #8]
 8001fb8:	000a      	movs	r2, r1
 8001fba:	0152      	lsls	r2, r2, #5
 8001fbc:	1a52      	subs	r2, r2, r1
 8001fbe:	0193      	lsls	r3, r2, #6
 8001fc0:	1a9b      	subs	r3, r3, r2
 8001fc2:	00db      	lsls	r3, r3, #3
 8001fc4:	185b      	adds	r3, r3, r1
 8001fc6:	029b      	lsls	r3, r3, #10
 8001fc8:	6879      	ldr	r1, [r7, #4]
 8001fca:	0018      	movs	r0, r3
 8001fcc:	f7fe f89c 	bl	8000108 <__udivsi3>
 8001fd0:	0003      	movs	r3, r0
 8001fd2:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	613b      	str	r3, [r7, #16]
      break;
 8001fd8:	e00d      	b.n	8001ff6 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001fda:	4b09      	ldr	r3, [pc, #36]	; (8002000 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	0b5b      	lsrs	r3, r3, #13
 8001fe0:	2207      	movs	r2, #7
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	3301      	adds	r3, #1
 8001fea:	2280      	movs	r2, #128	; 0x80
 8001fec:	0212      	lsls	r2, r2, #8
 8001fee:	409a      	lsls	r2, r3
 8001ff0:	0013      	movs	r3, r2
 8001ff2:	613b      	str	r3, [r7, #16]
      break;
 8001ff4:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001ff6:	693b      	ldr	r3, [r7, #16]
}
 8001ff8:	0018      	movs	r0, r3
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	b006      	add	sp, #24
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	40021000 	.word	0x40021000
 8002004:	003d0900 	.word	0x003d0900
 8002008:	00f42400 	.word	0x00f42400
 800200c:	007a1200 	.word	0x007a1200
 8002010:	080037f0 	.word	0x080037f0

08002014 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002018:	4b02      	ldr	r3, [pc, #8]	; (8002024 <HAL_RCC_GetHCLKFreq+0x10>)
 800201a:	681b      	ldr	r3, [r3, #0]
}
 800201c:	0018      	movs	r0, r3
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	46c0      	nop			; (mov r8, r8)
 8002024:	20000000 	.word	0x20000000

08002028 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800202c:	f7ff fff2 	bl	8002014 <HAL_RCC_GetHCLKFreq>
 8002030:	0001      	movs	r1, r0
 8002032:	4b06      	ldr	r3, [pc, #24]	; (800204c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	0a1b      	lsrs	r3, r3, #8
 8002038:	2207      	movs	r2, #7
 800203a:	4013      	ands	r3, r2
 800203c:	4a04      	ldr	r2, [pc, #16]	; (8002050 <HAL_RCC_GetPCLK1Freq+0x28>)
 800203e:	5cd3      	ldrb	r3, [r2, r3]
 8002040:	40d9      	lsrs	r1, r3
 8002042:	000b      	movs	r3, r1
}
 8002044:	0018      	movs	r0, r3
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	46c0      	nop			; (mov r8, r8)
 800204c:	40021000 	.word	0x40021000
 8002050:	080037e8 	.word	0x080037e8

08002054 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002058:	f7ff ffdc 	bl	8002014 <HAL_RCC_GetHCLKFreq>
 800205c:	0001      	movs	r1, r0
 800205e:	4b06      	ldr	r3, [pc, #24]	; (8002078 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	0adb      	lsrs	r3, r3, #11
 8002064:	2207      	movs	r2, #7
 8002066:	4013      	ands	r3, r2
 8002068:	4a04      	ldr	r2, [pc, #16]	; (800207c <HAL_RCC_GetPCLK2Freq+0x28>)
 800206a:	5cd3      	ldrb	r3, [r2, r3]
 800206c:	40d9      	lsrs	r1, r3
 800206e:	000b      	movs	r3, r1
}
 8002070:	0018      	movs	r0, r3
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	46c0      	nop			; (mov r8, r8)
 8002078:	40021000 	.word	0x40021000
 800207c:	080037e8 	.word	0x080037e8

08002080 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b086      	sub	sp, #24
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2220      	movs	r2, #32
 800208e:	4013      	ands	r3, r2
 8002090:	d100      	bne.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x14>
 8002092:	e0c7      	b.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 8002094:	2317      	movs	r3, #23
 8002096:	18fb      	adds	r3, r7, r3
 8002098:	2200      	movs	r2, #0
 800209a:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800209c:	4b99      	ldr	r3, [pc, #612]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800209e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020a0:	2380      	movs	r3, #128	; 0x80
 80020a2:	055b      	lsls	r3, r3, #21
 80020a4:	4013      	ands	r3, r2
 80020a6:	d10a      	bne.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x3e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020a8:	4b96      	ldr	r3, [pc, #600]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80020aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020ac:	4b95      	ldr	r3, [pc, #596]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80020ae:	2180      	movs	r1, #128	; 0x80
 80020b0:	0549      	lsls	r1, r1, #21
 80020b2:	430a      	orrs	r2, r1
 80020b4:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80020b6:	2317      	movs	r3, #23
 80020b8:	18fb      	adds	r3, r7, r3
 80020ba:	2201      	movs	r2, #1
 80020bc:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020be:	4b92      	ldr	r3, [pc, #584]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	2380      	movs	r3, #128	; 0x80
 80020c4:	005b      	lsls	r3, r3, #1
 80020c6:	4013      	ands	r3, r2
 80020c8:	d11a      	bne.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020ca:	4b8f      	ldr	r3, [pc, #572]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	4b8e      	ldr	r3, [pc, #568]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80020d0:	2180      	movs	r1, #128	; 0x80
 80020d2:	0049      	lsls	r1, r1, #1
 80020d4:	430a      	orrs	r2, r1
 80020d6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020d8:	f7fe fa04 	bl	80004e4 <HAL_GetTick>
 80020dc:	0003      	movs	r3, r0
 80020de:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020e0:	e008      	b.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020e2:	f7fe f9ff 	bl	80004e4 <HAL_GetTick>
 80020e6:	0002      	movs	r2, r0
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	2b64      	cmp	r3, #100	; 0x64
 80020ee:	d901      	bls.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0x74>
        {
          return HAL_TIMEOUT;
 80020f0:	2303      	movs	r3, #3
 80020f2:	e102      	b.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x27a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020f4:	4b84      	ldr	r3, [pc, #528]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	2380      	movs	r3, #128	; 0x80
 80020fa:	005b      	lsls	r3, r3, #1
 80020fc:	4013      	ands	r3, r2
 80020fe:	d0f0      	beq.n	80020e2 <HAL_RCCEx_PeriphCLKConfig+0x62>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002100:	4b80      	ldr	r3, [pc, #512]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	23c0      	movs	r3, #192	; 0xc0
 8002106:	039b      	lsls	r3, r3, #14
 8002108:	4013      	ands	r3, r2
 800210a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685a      	ldr	r2, [r3, #4]
 8002110:	23c0      	movs	r3, #192	; 0xc0
 8002112:	039b      	lsls	r3, r3, #14
 8002114:	4013      	ands	r3, r2
 8002116:	68fa      	ldr	r2, [r7, #12]
 8002118:	429a      	cmp	r2, r3
 800211a:	d013      	beq.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0xc4>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	685a      	ldr	r2, [r3, #4]
 8002120:	23c0      	movs	r3, #192	; 0xc0
 8002122:	029b      	lsls	r3, r3, #10
 8002124:	401a      	ands	r2, r3
 8002126:	23c0      	movs	r3, #192	; 0xc0
 8002128:	029b      	lsls	r3, r3, #10
 800212a:	429a      	cmp	r2, r3
 800212c:	d10a      	bne.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0xc4>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800212e:	4b75      	ldr	r3, [pc, #468]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	2380      	movs	r3, #128	; 0x80
 8002134:	029b      	lsls	r3, r3, #10
 8002136:	401a      	ands	r2, r3
 8002138:	2380      	movs	r3, #128	; 0x80
 800213a:	029b      	lsls	r3, r3, #10
 800213c:	429a      	cmp	r2, r3
 800213e:	d101      	bne.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0xc4>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e0da      	b.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x27a>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002144:	4b6f      	ldr	r3, [pc, #444]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002146:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002148:	23c0      	movs	r3, #192	; 0xc0
 800214a:	029b      	lsls	r3, r3, #10
 800214c:	4013      	ands	r3, r2
 800214e:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d03b      	beq.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685a      	ldr	r2, [r3, #4]
 800215a:	23c0      	movs	r3, #192	; 0xc0
 800215c:	029b      	lsls	r3, r3, #10
 800215e:	4013      	ands	r3, r2
 8002160:	68fa      	ldr	r2, [r7, #12]
 8002162:	429a      	cmp	r2, r3
 8002164:	d033      	beq.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x14e>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2220      	movs	r2, #32
 800216c:	4013      	ands	r3, r2
 800216e:	d02e      	beq.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x14e>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002170:	4b64      	ldr	r3, [pc, #400]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002172:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002174:	4a65      	ldr	r2, [pc, #404]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002176:	4013      	ands	r3, r2
 8002178:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800217a:	4b62      	ldr	r3, [pc, #392]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800217c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800217e:	4b61      	ldr	r3, [pc, #388]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002180:	2180      	movs	r1, #128	; 0x80
 8002182:	0309      	lsls	r1, r1, #12
 8002184:	430a      	orrs	r2, r1
 8002186:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002188:	4b5e      	ldr	r3, [pc, #376]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800218a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800218c:	4b5d      	ldr	r3, [pc, #372]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800218e:	4960      	ldr	r1, [pc, #384]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8002190:	400a      	ands	r2, r1
 8002192:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002194:	4b5b      	ldr	r3, [pc, #364]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002196:	68fa      	ldr	r2, [r7, #12]
 8002198:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800219a:	68fa      	ldr	r2, [r7, #12]
 800219c:	2380      	movs	r3, #128	; 0x80
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	4013      	ands	r3, r2
 80021a2:	d014      	beq.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a4:	f7fe f99e 	bl	80004e4 <HAL_GetTick>
 80021a8:	0003      	movs	r3, r0
 80021aa:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80021ac:	e009      	b.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x142>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021ae:	f7fe f999 	bl	80004e4 <HAL_GetTick>
 80021b2:	0002      	movs	r2, r0
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	4a56      	ldr	r2, [pc, #344]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d901      	bls.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x142>
          {
            return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e09b      	b.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x27a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80021c2:	4b50      	ldr	r3, [pc, #320]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80021c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80021c6:	2380      	movs	r3, #128	; 0x80
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	4013      	ands	r3, r2
 80021cc:	d0ef      	beq.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685a      	ldr	r2, [r3, #4]
 80021d2:	23c0      	movs	r3, #192	; 0xc0
 80021d4:	029b      	lsls	r3, r3, #10
 80021d6:	401a      	ands	r2, r3
 80021d8:	23c0      	movs	r3, #192	; 0xc0
 80021da:	029b      	lsls	r3, r3, #10
 80021dc:	429a      	cmp	r2, r3
 80021de:	d10c      	bne.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80021e0:	4b48      	ldr	r3, [pc, #288]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a4c      	ldr	r2, [pc, #304]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80021e6:	4013      	ands	r3, r2
 80021e8:	0019      	movs	r1, r3
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	685a      	ldr	r2, [r3, #4]
 80021ee:	23c0      	movs	r3, #192	; 0xc0
 80021f0:	039b      	lsls	r3, r3, #14
 80021f2:	401a      	ands	r2, r3
 80021f4:	4b43      	ldr	r3, [pc, #268]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80021f6:	430a      	orrs	r2, r1
 80021f8:	601a      	str	r2, [r3, #0]
 80021fa:	4b42      	ldr	r3, [pc, #264]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80021fc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685a      	ldr	r2, [r3, #4]
 8002202:	23c0      	movs	r3, #192	; 0xc0
 8002204:	029b      	lsls	r3, r3, #10
 8002206:	401a      	ands	r2, r3
 8002208:	4b3e      	ldr	r3, [pc, #248]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800220a:	430a      	orrs	r2, r1
 800220c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800220e:	2317      	movs	r3, #23
 8002210:	18fb      	adds	r3, r7, r3
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	2b01      	cmp	r3, #1
 8002216:	d105      	bne.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002218:	4b3a      	ldr	r3, [pc, #232]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800221a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800221c:	4b39      	ldr	r3, [pc, #228]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800221e:	493f      	ldr	r1, [pc, #252]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002220:	400a      	ands	r2, r1
 8002222:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	2201      	movs	r2, #1
 800222a:	4013      	ands	r3, r2
 800222c:	d009      	beq.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800222e:	4b35      	ldr	r3, [pc, #212]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002232:	2203      	movs	r2, #3
 8002234:	4393      	bics	r3, r2
 8002236:	0019      	movs	r1, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	689a      	ldr	r2, [r3, #8]
 800223c:	4b31      	ldr	r3, [pc, #196]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800223e:	430a      	orrs	r2, r1
 8002240:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	2202      	movs	r2, #2
 8002248:	4013      	ands	r3, r2
 800224a:	d009      	beq.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800224c:	4b2d      	ldr	r3, [pc, #180]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800224e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002250:	220c      	movs	r2, #12
 8002252:	4393      	bics	r3, r2
 8002254:	0019      	movs	r1, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	68da      	ldr	r2, [r3, #12]
 800225a:	4b2a      	ldr	r3, [pc, #168]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800225c:	430a      	orrs	r2, r1
 800225e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2204      	movs	r2, #4
 8002266:	4013      	ands	r3, r2
 8002268:	d009      	beq.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800226a:	4b26      	ldr	r3, [pc, #152]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800226c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800226e:	4a2c      	ldr	r2, [pc, #176]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8002270:	4013      	ands	r3, r2
 8002272:	0019      	movs	r1, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	691a      	ldr	r2, [r3, #16]
 8002278:	4b22      	ldr	r3, [pc, #136]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800227a:	430a      	orrs	r2, r1
 800227c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	2208      	movs	r2, #8
 8002284:	4013      	ands	r3, r2
 8002286:	d009      	beq.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002288:	4b1e      	ldr	r3, [pc, #120]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800228a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800228c:	4a25      	ldr	r2, [pc, #148]	; (8002324 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800228e:	4013      	ands	r3, r2
 8002290:	0019      	movs	r1, r3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	695a      	ldr	r2, [r3, #20]
 8002296:	4b1b      	ldr	r3, [pc, #108]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002298:	430a      	orrs	r2, r1
 800229a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	2380      	movs	r3, #128	; 0x80
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	4013      	ands	r3, r2
 80022a6:	d009      	beq.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80022a8:	4b16      	ldr	r3, [pc, #88]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80022aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ac:	4a17      	ldr	r2, [pc, #92]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80022ae:	4013      	ands	r3, r2
 80022b0:	0019      	movs	r1, r3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	699a      	ldr	r2, [r3, #24]
 80022b6:	4b13      	ldr	r3, [pc, #76]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80022b8:	430a      	orrs	r2, r1
 80022ba:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	2240      	movs	r2, #64	; 0x40
 80022c2:	4013      	ands	r3, r2
 80022c4:	d009      	beq.n	80022da <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80022c6:	4b0f      	ldr	r3, [pc, #60]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80022c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ca:	4a17      	ldr	r2, [pc, #92]	; (8002328 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80022cc:	4013      	ands	r3, r2
 80022ce:	0019      	movs	r1, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6a1a      	ldr	r2, [r3, #32]
 80022d4:	4b0b      	ldr	r3, [pc, #44]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80022d6:	430a      	orrs	r2, r1
 80022d8:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	2280      	movs	r2, #128	; 0x80
 80022e0:	4013      	ands	r3, r2
 80022e2:	d009      	beq.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80022e4:	4b07      	ldr	r3, [pc, #28]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80022e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022e8:	4a10      	ldr	r2, [pc, #64]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80022ea:	4013      	ands	r3, r2
 80022ec:	0019      	movs	r1, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	69da      	ldr	r2, [r3, #28]
 80022f2:	4b04      	ldr	r3, [pc, #16]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80022f4:	430a      	orrs	r2, r1
 80022f6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	0018      	movs	r0, r3
 80022fc:	46bd      	mov	sp, r7
 80022fe:	b006      	add	sp, #24
 8002300:	bd80      	pop	{r7, pc}
 8002302:	46c0      	nop			; (mov r8, r8)
 8002304:	40021000 	.word	0x40021000
 8002308:	40007000 	.word	0x40007000
 800230c:	fffcffff 	.word	0xfffcffff
 8002310:	fff7ffff 	.word	0xfff7ffff
 8002314:	00001388 	.word	0x00001388
 8002318:	ffcfffff 	.word	0xffcfffff
 800231c:	efffffff 	.word	0xefffffff
 8002320:	fffff3ff 	.word	0xfffff3ff
 8002324:	ffffcfff 	.word	0xffffcfff
 8002328:	fbffffff 	.word	0xfbffffff
 800232c:	fff3ffff 	.word	0xfff3ffff

08002330 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d101      	bne.n	8002342 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e08e      	b.n	8002460 <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2221      	movs	r2, #33	; 0x21
 8002346:	5c9b      	ldrb	r3, [r3, r2]
 8002348:	b2db      	uxtb	r3, r3
 800234a:	2b00      	cmp	r3, #0
 800234c:	d107      	bne.n	800235e <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2220      	movs	r2, #32
 8002352:	2100      	movs	r1, #0
 8002354:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	0018      	movs	r0, r3
 800235a:	f001 f8e1 	bl	8003520 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2221      	movs	r2, #33	; 0x21
 8002362:	2102      	movs	r1, #2
 8002364:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	22ca      	movs	r2, #202	; 0xca
 800236c:	625a      	str	r2, [r3, #36]	; 0x24
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	2253      	movs	r2, #83	; 0x53
 8002374:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	0018      	movs	r0, r3
 800237a:	f000 f89e 	bl	80024ba <RTC_EnterInitMode>
 800237e:	1e03      	subs	r3, r0, #0
 8002380:	d009      	beq.n	8002396 <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	22ff      	movs	r2, #255	; 0xff
 8002388:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2221      	movs	r2, #33	; 0x21
 800238e:	2104      	movs	r1, #4
 8002390:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e064      	b.n	8002460 <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	689a      	ldr	r2, [r3, #8]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4931      	ldr	r1, [pc, #196]	; (8002468 <HAL_RTC_Init+0x138>)
 80023a2:	400a      	ands	r2, r1
 80023a4:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	6899      	ldr	r1, [r3, #8]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685a      	ldr	r2, [r3, #4]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	691b      	ldr	r3, [r3, #16]
 80023b4:	431a      	orrs	r2, r3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	699b      	ldr	r3, [r3, #24]
 80023ba:	431a      	orrs	r2, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	430a      	orrs	r2, r1
 80023c2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	68d2      	ldr	r2, [r2, #12]
 80023cc:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	6919      	ldr	r1, [r3, #16]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	041a      	lsls	r2, r3, #16
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	430a      	orrs	r2, r1
 80023e0:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	68da      	ldr	r2, [r3, #12]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2180      	movs	r1, #128	; 0x80
 80023ee:	438a      	bics	r2, r1
 80023f0:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2103      	movs	r1, #3
 80023fe:	438a      	bics	r2, r1
 8002400:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	69da      	ldr	r2, [r3, #28]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	695b      	ldr	r3, [r3, #20]
 8002410:	431a      	orrs	r2, r3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	430a      	orrs	r2, r1
 8002418:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	2220      	movs	r2, #32
 8002422:	4013      	ands	r3, r2
 8002424:	d113      	bne.n	800244e <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	0018      	movs	r0, r3
 800242a:	f000 f81f 	bl	800246c <HAL_RTC_WaitForSynchro>
 800242e:	1e03      	subs	r3, r0, #0
 8002430:	d00d      	beq.n	800244e <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	22ff      	movs	r2, #255	; 0xff
 8002438:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2221      	movs	r2, #33	; 0x21
 800243e:	2104      	movs	r1, #4
 8002440:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2220      	movs	r2, #32
 8002446:	2100      	movs	r1, #0
 8002448:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e008      	b.n	8002460 <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	22ff      	movs	r2, #255	; 0xff
 8002454:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2221      	movs	r2, #33	; 0x21
 800245a:	2101      	movs	r1, #1
 800245c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800245e:	2300      	movs	r3, #0
  }
}
 8002460:	0018      	movs	r0, r3
 8002462:	46bd      	mov	sp, r7
 8002464:	b002      	add	sp, #8
 8002466:	bd80      	pop	{r7, pc}
 8002468:	ff8fffbf 	.word	0xff8fffbf

0800246c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	68da      	ldr	r2, [r3, #12]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	21a0      	movs	r1, #160	; 0xa0
 8002480:	438a      	bics	r2, r1
 8002482:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8002484:	f7fe f82e 	bl	80004e4 <HAL_GetTick>
 8002488:	0003      	movs	r3, r0
 800248a:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800248c:	e00a      	b.n	80024a4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800248e:	f7fe f829 	bl	80004e4 <HAL_GetTick>
 8002492:	0002      	movs	r2, r0
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	1ad2      	subs	r2, r2, r3
 8002498:	23fa      	movs	r3, #250	; 0xfa
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	429a      	cmp	r2, r3
 800249e:	d901      	bls.n	80024a4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80024a0:	2303      	movs	r3, #3
 80024a2:	e006      	b.n	80024b2 <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	2220      	movs	r2, #32
 80024ac:	4013      	ands	r3, r2
 80024ae:	d0ee      	beq.n	800248e <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 80024b0:	2300      	movs	r3, #0
}
 80024b2:	0018      	movs	r0, r3
 80024b4:	46bd      	mov	sp, r7
 80024b6:	b004      	add	sp, #16
 80024b8:	bd80      	pop	{r7, pc}

080024ba <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80024ba:	b580      	push	{r7, lr}
 80024bc:	b084      	sub	sp, #16
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	2240      	movs	r2, #64	; 0x40
 80024ca:	4013      	ands	r3, r2
 80024cc:	d11a      	bne.n	8002504 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	2201      	movs	r2, #1
 80024d4:	4252      	negs	r2, r2
 80024d6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80024d8:	f7fe f804 	bl	80004e4 <HAL_GetTick>
 80024dc:	0003      	movs	r3, r0
 80024de:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80024e0:	e00a      	b.n	80024f8 <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80024e2:	f7fd ffff 	bl	80004e4 <HAL_GetTick>
 80024e6:	0002      	movs	r2, r0
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	1ad2      	subs	r2, r2, r3
 80024ec:	23fa      	movs	r3, #250	; 0xfa
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d901      	bls.n	80024f8 <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e006      	b.n	8002506 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	2240      	movs	r2, #64	; 0x40
 8002500:	4013      	ands	r3, r2
 8002502:	d0ee      	beq.n	80024e2 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8002504:	2300      	movs	r3, #0
}
 8002506:	0018      	movs	r0, r3
 8002508:	46bd      	mov	sp, r7
 800250a:	b004      	add	sp, #16
 800250c:	bd80      	pop	{r7, pc}
	...

08002510 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d101      	bne.n	8002522 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e044      	b.n	80025ac <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002526:	2b00      	cmp	r3, #0
 8002528:	d107      	bne.n	800253a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2270      	movs	r2, #112	; 0x70
 800252e:	2100      	movs	r1, #0
 8002530:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	0018      	movs	r0, r3
 8002536:	f001 f80b 	bl	8003550 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2224      	movs	r2, #36	; 0x24
 800253e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	2101      	movs	r1, #1
 800254c:	438a      	bics	r2, r1
 800254e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	0018      	movs	r0, r3
 8002554:	f000 f830 	bl	80025b8 <UART_SetConfig>
 8002558:	0003      	movs	r3, r0
 800255a:	2b01      	cmp	r3, #1
 800255c:	d101      	bne.n	8002562 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e024      	b.n	80025ac <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002566:	2b00      	cmp	r3, #0
 8002568:	d003      	beq.n	8002572 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	0018      	movs	r0, r3
 800256e:	f000 fb57 	bl	8002c20 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	685a      	ldr	r2, [r3, #4]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	490d      	ldr	r1, [pc, #52]	; (80025b4 <HAL_UART_Init+0xa4>)
 800257e:	400a      	ands	r2, r1
 8002580:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	689a      	ldr	r2, [r3, #8]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	212a      	movs	r1, #42	; 0x2a
 800258e:	438a      	bics	r2, r1
 8002590:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2101      	movs	r1, #1
 800259e:	430a      	orrs	r2, r1
 80025a0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	0018      	movs	r0, r3
 80025a6:	f000 fbef 	bl	8002d88 <UART_CheckIdleState>
 80025aa:	0003      	movs	r3, r0
}
 80025ac:	0018      	movs	r0, r3
 80025ae:	46bd      	mov	sp, r7
 80025b0:	b002      	add	sp, #8
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	ffffb7ff 	.word	0xffffb7ff

080025b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025b8:	b5b0      	push	{r4, r5, r7, lr}
 80025ba:	b08e      	sub	sp, #56	; 0x38
 80025bc:	af00      	add	r7, sp, #0
 80025be:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 80025c0:	231b      	movs	r3, #27
 80025c2:	2218      	movs	r2, #24
 80025c4:	4694      	mov	ip, r2
 80025c6:	44bc      	add	ip, r7
 80025c8:	4463      	add	r3, ip
 80025ca:	2210      	movs	r2, #16
 80025cc:	701a      	strb	r2, [r3, #0]
  uint32_t usartdiv                   = 0x00000000U;
 80025ce:	2300      	movs	r3, #0
 80025d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef ret               = HAL_OK;
 80025d2:	2313      	movs	r3, #19
 80025d4:	2218      	movs	r2, #24
 80025d6:	4694      	mov	ip, r2
 80025d8:	44bc      	add	ip, r7
 80025da:	4463      	add	r3, ip
 80025dc:	2200      	movs	r2, #0
 80025de:	701a      	strb	r2, [r3, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80025e0:	2300      	movs	r3, #0
 80025e2:	627b      	str	r3, [r7, #36]	; 0x24
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	689a      	ldr	r2, [r3, #8]
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	691b      	ldr	r3, [r3, #16]
 80025ec:	431a      	orrs	r2, r3
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	695b      	ldr	r3, [r3, #20]
 80025f2:	431a      	orrs	r2, r3
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	69db      	ldr	r3, [r3, #28]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4aca      	ldr	r2, [pc, #808]	; (800292c <UART_SetConfig+0x374>)
 8002604:	4013      	ands	r3, r2
 8002606:	0019      	movs	r1, r3
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800260e:	430a      	orrs	r2, r1
 8002610:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	4ac5      	ldr	r2, [pc, #788]	; (8002930 <UART_SetConfig+0x378>)
 800261a:	4013      	ands	r3, r2
 800261c:	0019      	movs	r1, r3
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	68da      	ldr	r2, [r3, #12]
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	430a      	orrs	r2, r1
 8002628:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	699b      	ldr	r3, [r3, #24]
 800262e:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4abf      	ldr	r2, [pc, #764]	; (8002934 <UART_SetConfig+0x37c>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d004      	beq.n	8002644 <UART_SetConfig+0x8c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	6a1b      	ldr	r3, [r3, #32]
 800263e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002640:	4313      	orrs	r3, r2
 8002642:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	4abb      	ldr	r2, [pc, #748]	; (8002938 <UART_SetConfig+0x380>)
 800264c:	4013      	ands	r3, r2
 800264e:	0019      	movs	r1, r3
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002656:	430a      	orrs	r2, r1
 8002658:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4ab7      	ldr	r2, [pc, #732]	; (800293c <UART_SetConfig+0x384>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d134      	bne.n	80026ce <UART_SetConfig+0x116>
 8002664:	4bb6      	ldr	r3, [pc, #728]	; (8002940 <UART_SetConfig+0x388>)
 8002666:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002668:	2203      	movs	r2, #3
 800266a:	4013      	ands	r3, r2
 800266c:	2b01      	cmp	r3, #1
 800266e:	d015      	beq.n	800269c <UART_SetConfig+0xe4>
 8002670:	d304      	bcc.n	800267c <UART_SetConfig+0xc4>
 8002672:	2b02      	cmp	r3, #2
 8002674:	d00a      	beq.n	800268c <UART_SetConfig+0xd4>
 8002676:	2b03      	cmp	r3, #3
 8002678:	d018      	beq.n	80026ac <UART_SetConfig+0xf4>
 800267a:	e01f      	b.n	80026bc <UART_SetConfig+0x104>
 800267c:	231b      	movs	r3, #27
 800267e:	2218      	movs	r2, #24
 8002680:	4694      	mov	ip, r2
 8002682:	44bc      	add	ip, r7
 8002684:	4463      	add	r3, ip
 8002686:	2201      	movs	r2, #1
 8002688:	701a      	strb	r2, [r3, #0]
 800268a:	e0c5      	b.n	8002818 <UART_SetConfig+0x260>
 800268c:	231b      	movs	r3, #27
 800268e:	2218      	movs	r2, #24
 8002690:	4694      	mov	ip, r2
 8002692:	44bc      	add	ip, r7
 8002694:	4463      	add	r3, ip
 8002696:	2202      	movs	r2, #2
 8002698:	701a      	strb	r2, [r3, #0]
 800269a:	e0bd      	b.n	8002818 <UART_SetConfig+0x260>
 800269c:	231b      	movs	r3, #27
 800269e:	2218      	movs	r2, #24
 80026a0:	4694      	mov	ip, r2
 80026a2:	44bc      	add	ip, r7
 80026a4:	4463      	add	r3, ip
 80026a6:	2204      	movs	r2, #4
 80026a8:	701a      	strb	r2, [r3, #0]
 80026aa:	e0b5      	b.n	8002818 <UART_SetConfig+0x260>
 80026ac:	231b      	movs	r3, #27
 80026ae:	2218      	movs	r2, #24
 80026b0:	4694      	mov	ip, r2
 80026b2:	44bc      	add	ip, r7
 80026b4:	4463      	add	r3, ip
 80026b6:	2208      	movs	r2, #8
 80026b8:	701a      	strb	r2, [r3, #0]
 80026ba:	e0ad      	b.n	8002818 <UART_SetConfig+0x260>
 80026bc:	231b      	movs	r3, #27
 80026be:	2218      	movs	r2, #24
 80026c0:	4694      	mov	ip, r2
 80026c2:	44bc      	add	ip, r7
 80026c4:	4463      	add	r3, ip
 80026c6:	2210      	movs	r2, #16
 80026c8:	701a      	strb	r2, [r3, #0]
 80026ca:	46c0      	nop			; (mov r8, r8)
 80026cc:	e0a4      	b.n	8002818 <UART_SetConfig+0x260>
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a9c      	ldr	r2, [pc, #624]	; (8002944 <UART_SetConfig+0x38c>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d137      	bne.n	8002748 <UART_SetConfig+0x190>
 80026d8:	4b99      	ldr	r3, [pc, #612]	; (8002940 <UART_SetConfig+0x388>)
 80026da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026dc:	220c      	movs	r2, #12
 80026de:	4013      	ands	r3, r2
 80026e0:	2b04      	cmp	r3, #4
 80026e2:	d018      	beq.n	8002716 <UART_SetConfig+0x15e>
 80026e4:	d802      	bhi.n	80026ec <UART_SetConfig+0x134>
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d005      	beq.n	80026f6 <UART_SetConfig+0x13e>
 80026ea:	e024      	b.n	8002736 <UART_SetConfig+0x17e>
 80026ec:	2b08      	cmp	r3, #8
 80026ee:	d00a      	beq.n	8002706 <UART_SetConfig+0x14e>
 80026f0:	2b0c      	cmp	r3, #12
 80026f2:	d018      	beq.n	8002726 <UART_SetConfig+0x16e>
 80026f4:	e01f      	b.n	8002736 <UART_SetConfig+0x17e>
 80026f6:	231b      	movs	r3, #27
 80026f8:	2218      	movs	r2, #24
 80026fa:	4694      	mov	ip, r2
 80026fc:	44bc      	add	ip, r7
 80026fe:	4463      	add	r3, ip
 8002700:	2200      	movs	r2, #0
 8002702:	701a      	strb	r2, [r3, #0]
 8002704:	e088      	b.n	8002818 <UART_SetConfig+0x260>
 8002706:	231b      	movs	r3, #27
 8002708:	2218      	movs	r2, #24
 800270a:	4694      	mov	ip, r2
 800270c:	44bc      	add	ip, r7
 800270e:	4463      	add	r3, ip
 8002710:	2202      	movs	r2, #2
 8002712:	701a      	strb	r2, [r3, #0]
 8002714:	e080      	b.n	8002818 <UART_SetConfig+0x260>
 8002716:	231b      	movs	r3, #27
 8002718:	2218      	movs	r2, #24
 800271a:	4694      	mov	ip, r2
 800271c:	44bc      	add	ip, r7
 800271e:	4463      	add	r3, ip
 8002720:	2204      	movs	r2, #4
 8002722:	701a      	strb	r2, [r3, #0]
 8002724:	e078      	b.n	8002818 <UART_SetConfig+0x260>
 8002726:	231b      	movs	r3, #27
 8002728:	2218      	movs	r2, #24
 800272a:	4694      	mov	ip, r2
 800272c:	44bc      	add	ip, r7
 800272e:	4463      	add	r3, ip
 8002730:	2208      	movs	r2, #8
 8002732:	701a      	strb	r2, [r3, #0]
 8002734:	e070      	b.n	8002818 <UART_SetConfig+0x260>
 8002736:	231b      	movs	r3, #27
 8002738:	2218      	movs	r2, #24
 800273a:	4694      	mov	ip, r2
 800273c:	44bc      	add	ip, r7
 800273e:	4463      	add	r3, ip
 8002740:	2210      	movs	r2, #16
 8002742:	701a      	strb	r2, [r3, #0]
 8002744:	46c0      	nop			; (mov r8, r8)
 8002746:	e067      	b.n	8002818 <UART_SetConfig+0x260>
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a7e      	ldr	r2, [pc, #504]	; (8002948 <UART_SetConfig+0x390>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d107      	bne.n	8002762 <UART_SetConfig+0x1aa>
 8002752:	231b      	movs	r3, #27
 8002754:	2218      	movs	r2, #24
 8002756:	4694      	mov	ip, r2
 8002758:	44bc      	add	ip, r7
 800275a:	4463      	add	r3, ip
 800275c:	2200      	movs	r2, #0
 800275e:	701a      	strb	r2, [r3, #0]
 8002760:	e05a      	b.n	8002818 <UART_SetConfig+0x260>
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a79      	ldr	r2, [pc, #484]	; (800294c <UART_SetConfig+0x394>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d107      	bne.n	800277c <UART_SetConfig+0x1c4>
 800276c:	231b      	movs	r3, #27
 800276e:	2218      	movs	r2, #24
 8002770:	4694      	mov	ip, r2
 8002772:	44bc      	add	ip, r7
 8002774:	4463      	add	r3, ip
 8002776:	2200      	movs	r2, #0
 8002778:	701a      	strb	r2, [r3, #0]
 800277a:	e04d      	b.n	8002818 <UART_SetConfig+0x260>
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a6c      	ldr	r2, [pc, #432]	; (8002934 <UART_SetConfig+0x37c>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d141      	bne.n	800280a <UART_SetConfig+0x252>
 8002786:	4b6e      	ldr	r3, [pc, #440]	; (8002940 <UART_SetConfig+0x388>)
 8002788:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800278a:	23c0      	movs	r3, #192	; 0xc0
 800278c:	011b      	lsls	r3, r3, #4
 800278e:	4013      	ands	r3, r2
 8002790:	2280      	movs	r2, #128	; 0x80
 8002792:	00d2      	lsls	r2, r2, #3
 8002794:	4293      	cmp	r3, r2
 8002796:	d01f      	beq.n	80027d8 <UART_SetConfig+0x220>
 8002798:	2280      	movs	r2, #128	; 0x80
 800279a:	00d2      	lsls	r2, r2, #3
 800279c:	4293      	cmp	r3, r2
 800279e:	d802      	bhi.n	80027a6 <UART_SetConfig+0x1ee>
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d009      	beq.n	80027b8 <UART_SetConfig+0x200>
 80027a4:	e028      	b.n	80027f8 <UART_SetConfig+0x240>
 80027a6:	2280      	movs	r2, #128	; 0x80
 80027a8:	0112      	lsls	r2, r2, #4
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d00c      	beq.n	80027c8 <UART_SetConfig+0x210>
 80027ae:	22c0      	movs	r2, #192	; 0xc0
 80027b0:	0112      	lsls	r2, r2, #4
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d018      	beq.n	80027e8 <UART_SetConfig+0x230>
 80027b6:	e01f      	b.n	80027f8 <UART_SetConfig+0x240>
 80027b8:	231b      	movs	r3, #27
 80027ba:	2218      	movs	r2, #24
 80027bc:	4694      	mov	ip, r2
 80027be:	44bc      	add	ip, r7
 80027c0:	4463      	add	r3, ip
 80027c2:	2200      	movs	r2, #0
 80027c4:	701a      	strb	r2, [r3, #0]
 80027c6:	e027      	b.n	8002818 <UART_SetConfig+0x260>
 80027c8:	231b      	movs	r3, #27
 80027ca:	2218      	movs	r2, #24
 80027cc:	4694      	mov	ip, r2
 80027ce:	44bc      	add	ip, r7
 80027d0:	4463      	add	r3, ip
 80027d2:	2202      	movs	r2, #2
 80027d4:	701a      	strb	r2, [r3, #0]
 80027d6:	e01f      	b.n	8002818 <UART_SetConfig+0x260>
 80027d8:	231b      	movs	r3, #27
 80027da:	2218      	movs	r2, #24
 80027dc:	4694      	mov	ip, r2
 80027de:	44bc      	add	ip, r7
 80027e0:	4463      	add	r3, ip
 80027e2:	2204      	movs	r2, #4
 80027e4:	701a      	strb	r2, [r3, #0]
 80027e6:	e017      	b.n	8002818 <UART_SetConfig+0x260>
 80027e8:	231b      	movs	r3, #27
 80027ea:	2218      	movs	r2, #24
 80027ec:	4694      	mov	ip, r2
 80027ee:	44bc      	add	ip, r7
 80027f0:	4463      	add	r3, ip
 80027f2:	2208      	movs	r2, #8
 80027f4:	701a      	strb	r2, [r3, #0]
 80027f6:	e00f      	b.n	8002818 <UART_SetConfig+0x260>
 80027f8:	231b      	movs	r3, #27
 80027fa:	2218      	movs	r2, #24
 80027fc:	4694      	mov	ip, r2
 80027fe:	44bc      	add	ip, r7
 8002800:	4463      	add	r3, ip
 8002802:	2210      	movs	r2, #16
 8002804:	701a      	strb	r2, [r3, #0]
 8002806:	46c0      	nop			; (mov r8, r8)
 8002808:	e006      	b.n	8002818 <UART_SetConfig+0x260>
 800280a:	231b      	movs	r3, #27
 800280c:	2218      	movs	r2, #24
 800280e:	4694      	mov	ip, r2
 8002810:	44bc      	add	ip, r7
 8002812:	4463      	add	r3, ip
 8002814:	2210      	movs	r2, #16
 8002816:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a45      	ldr	r2, [pc, #276]	; (8002934 <UART_SetConfig+0x37c>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d000      	beq.n	8002824 <UART_SetConfig+0x26c>
 8002822:	e09d      	b.n	8002960 <UART_SetConfig+0x3a8>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002824:	231b      	movs	r3, #27
 8002826:	2218      	movs	r2, #24
 8002828:	4694      	mov	ip, r2
 800282a:	44bc      	add	ip, r7
 800282c:	4463      	add	r3, ip
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	2b02      	cmp	r3, #2
 8002832:	d00d      	beq.n	8002850 <UART_SetConfig+0x298>
 8002834:	dc02      	bgt.n	800283c <UART_SetConfig+0x284>
 8002836:	2b00      	cmp	r3, #0
 8002838:	d005      	beq.n	8002846 <UART_SetConfig+0x28e>
 800283a:	e01d      	b.n	8002878 <UART_SetConfig+0x2c0>
 800283c:	2b04      	cmp	r3, #4
 800283e:	d012      	beq.n	8002866 <UART_SetConfig+0x2ae>
 8002840:	2b08      	cmp	r3, #8
 8002842:	d015      	beq.n	8002870 <UART_SetConfig+0x2b8>
 8002844:	e018      	b.n	8002878 <UART_SetConfig+0x2c0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8002846:	f7ff fbef 	bl	8002028 <HAL_RCC_GetPCLK1Freq>
 800284a:	0003      	movs	r3, r0
 800284c:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800284e:	e01b      	b.n	8002888 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002850:	4b3b      	ldr	r3, [pc, #236]	; (8002940 <UART_SetConfig+0x388>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2210      	movs	r2, #16
 8002856:	4013      	ands	r3, r2
 8002858:	d002      	beq.n	8002860 <UART_SetConfig+0x2a8>
        {
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 800285a:	4b3d      	ldr	r3, [pc, #244]	; (8002950 <UART_SetConfig+0x398>)
 800285c:	627b      	str	r3, [r7, #36]	; 0x24
        }
        else
        {
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
        }
        break;
 800285e:	e013      	b.n	8002888 <UART_SetConfig+0x2d0>
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8002860:	4b3c      	ldr	r3, [pc, #240]	; (8002954 <UART_SetConfig+0x39c>)
 8002862:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002864:	e010      	b.n	8002888 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8002866:	f7ff fb51 	bl	8001f0c <HAL_RCC_GetSysClockFreq>
 800286a:	0003      	movs	r3, r0
 800286c:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800286e:	e00b      	b.n	8002888 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8002870:	2380      	movs	r3, #128	; 0x80
 8002872:	021b      	lsls	r3, r3, #8
 8002874:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002876:	e007      	b.n	8002888 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002878:	2313      	movs	r3, #19
 800287a:	2218      	movs	r2, #24
 800287c:	4694      	mov	ip, r2
 800287e:	44bc      	add	ip, r7
 8002880:	4463      	add	r3, ip
 8002882:	2201      	movs	r2, #1
 8002884:	701a      	strb	r2, [r3, #0]
        break;
 8002886:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8002888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288a:	2b00      	cmp	r3, #0
 800288c:	d100      	bne.n	8002890 <UART_SetConfig+0x2d8>
 800288e:	e1a6      	b.n	8002bde <UART_SetConfig+0x626>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	685a      	ldr	r2, [r3, #4]
 8002894:	0013      	movs	r3, r2
 8002896:	005b      	lsls	r3, r3, #1
 8002898:	189b      	adds	r3, r3, r2
 800289a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800289c:	429a      	cmp	r2, r3
 800289e:	d305      	bcc.n	80028ac <UART_SetConfig+0x2f4>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80028a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d907      	bls.n	80028bc <UART_SetConfig+0x304>
      {
        ret = HAL_ERROR;
 80028ac:	2313      	movs	r3, #19
 80028ae:	2218      	movs	r2, #24
 80028b0:	4694      	mov	ip, r2
 80028b2:	44bc      	add	ip, r7
 80028b4:	4463      	add	r3, ip
 80028b6:	2201      	movs	r2, #1
 80028b8:	701a      	strb	r2, [r3, #0]
 80028ba:	e190      	b.n	8002bde <UART_SetConfig+0x626>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 80028bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028be:	613b      	str	r3, [r7, #16]
 80028c0:	2300      	movs	r3, #0
 80028c2:	617b      	str	r3, [r7, #20]
 80028c4:	6939      	ldr	r1, [r7, #16]
 80028c6:	697a      	ldr	r2, [r7, #20]
 80028c8:	000b      	movs	r3, r1
 80028ca:	0e1b      	lsrs	r3, r3, #24
 80028cc:	0010      	movs	r0, r2
 80028ce:	0205      	lsls	r5, r0, #8
 80028d0:	431d      	orrs	r5, r3
 80028d2:	000b      	movs	r3, r1
 80028d4:	021c      	lsls	r4, r3, #8
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	085b      	lsrs	r3, r3, #1
 80028dc:	60bb      	str	r3, [r7, #8]
 80028de:	2300      	movs	r3, #0
 80028e0:	60fb      	str	r3, [r7, #12]
 80028e2:	68b8      	ldr	r0, [r7, #8]
 80028e4:	68f9      	ldr	r1, [r7, #12]
 80028e6:	1900      	adds	r0, r0, r4
 80028e8:	4169      	adcs	r1, r5
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	603b      	str	r3, [r7, #0]
 80028f0:	2300      	movs	r3, #0
 80028f2:	607b      	str	r3, [r7, #4]
 80028f4:	683a      	ldr	r2, [r7, #0]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f7fd fc92 	bl	8000220 <__aeabi_uldivmod>
 80028fc:	0003      	movs	r3, r0
 80028fe:	000c      	movs	r4, r1
 8002900:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002904:	4a14      	ldr	r2, [pc, #80]	; (8002958 <UART_SetConfig+0x3a0>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d908      	bls.n	800291c <UART_SetConfig+0x364>
 800290a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800290c:	4a13      	ldr	r2, [pc, #76]	; (800295c <UART_SetConfig+0x3a4>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d804      	bhi.n	800291c <UART_SetConfig+0x364>
        {
          huart->Instance->BRR = usartdiv;
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002918:	60da      	str	r2, [r3, #12]
 800291a:	e160      	b.n	8002bde <UART_SetConfig+0x626>
        }
        else
        {
          ret = HAL_ERROR;
 800291c:	2313      	movs	r3, #19
 800291e:	2218      	movs	r2, #24
 8002920:	4694      	mov	ip, r2
 8002922:	44bc      	add	ip, r7
 8002924:	4463      	add	r3, ip
 8002926:	2201      	movs	r2, #1
 8002928:	701a      	strb	r2, [r3, #0]
 800292a:	e158      	b.n	8002bde <UART_SetConfig+0x626>
 800292c:	efff69f3 	.word	0xefff69f3
 8002930:	ffffcfff 	.word	0xffffcfff
 8002934:	40004800 	.word	0x40004800
 8002938:	fffff4ff 	.word	0xfffff4ff
 800293c:	40013800 	.word	0x40013800
 8002940:	40021000 	.word	0x40021000
 8002944:	40004400 	.word	0x40004400
 8002948:	40004c00 	.word	0x40004c00
 800294c:	40005000 	.word	0x40005000
 8002950:	003d0900 	.word	0x003d0900
 8002954:	00f42400 	.word	0x00f42400
 8002958:	000002ff 	.word	0x000002ff
 800295c:	000fffff 	.word	0x000fffff
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	69da      	ldr	r2, [r3, #28]
 8002964:	2380      	movs	r3, #128	; 0x80
 8002966:	021b      	lsls	r3, r3, #8
 8002968:	429a      	cmp	r2, r3
 800296a:	d000      	beq.n	800296e <UART_SetConfig+0x3b6>
 800296c:	e0a9      	b.n	8002ac2 <UART_SetConfig+0x50a>
  {
    switch (clocksource)
 800296e:	231b      	movs	r3, #27
 8002970:	2218      	movs	r2, #24
 8002972:	4694      	mov	ip, r2
 8002974:	44bc      	add	ip, r7
 8002976:	4463      	add	r3, ip
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	2b08      	cmp	r3, #8
 800297c:	d86d      	bhi.n	8002a5a <UART_SetConfig+0x4a2>
 800297e:	009a      	lsls	r2, r3, #2
 8002980:	4b9f      	ldr	r3, [pc, #636]	; (8002c00 <UART_SetConfig+0x648>)
 8002982:	18d3      	adds	r3, r2, r3
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002988:	f7ff fb4e 	bl	8002028 <HAL_RCC_GetPCLK1Freq>
 800298c:	0003      	movs	r3, r0
 800298e:	005a      	lsls	r2, r3, #1
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	085b      	lsrs	r3, r3, #1
 8002996:	18d2      	adds	r2, r2, r3
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	0019      	movs	r1, r3
 800299e:	0010      	movs	r0, r2
 80029a0:	f7fd fbb2 	bl	8000108 <__udivsi3>
 80029a4:	0003      	movs	r3, r0
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80029aa:	e05e      	b.n	8002a6a <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80029ac:	f7ff fb52 	bl	8002054 <HAL_RCC_GetPCLK2Freq>
 80029b0:	0003      	movs	r3, r0
 80029b2:	005a      	lsls	r2, r3, #1
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	085b      	lsrs	r3, r3, #1
 80029ba:	18d2      	adds	r2, r2, r3
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	0019      	movs	r1, r3
 80029c2:	0010      	movs	r0, r2
 80029c4:	f7fd fba0 	bl	8000108 <__udivsi3>
 80029c8:	0003      	movs	r3, r0
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80029ce:	e04c      	b.n	8002a6a <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80029d0:	4b8c      	ldr	r3, [pc, #560]	; (8002c04 <UART_SetConfig+0x64c>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2210      	movs	r2, #16
 80029d6:	4013      	ands	r3, r2
 80029d8:	d00e      	beq.n	80029f8 <UART_SetConfig+0x440>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	085b      	lsrs	r3, r3, #1
 80029e0:	4a89      	ldr	r2, [pc, #548]	; (8002c08 <UART_SetConfig+0x650>)
 80029e2:	189a      	adds	r2, r3, r2
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	0019      	movs	r1, r3
 80029ea:	0010      	movs	r0, r2
 80029ec:	f7fd fb8c 	bl	8000108 <__udivsi3>
 80029f0:	0003      	movs	r3, r0
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 80029f6:	e038      	b.n	8002a6a <UART_SetConfig+0x4b2>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	085b      	lsrs	r3, r3, #1
 80029fe:	4a83      	ldr	r2, [pc, #524]	; (8002c0c <UART_SetConfig+0x654>)
 8002a00:	189a      	adds	r2, r3, r2
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	0019      	movs	r1, r3
 8002a08:	0010      	movs	r0, r2
 8002a0a:	f7fd fb7d 	bl	8000108 <__udivsi3>
 8002a0e:	0003      	movs	r3, r0
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002a14:	e029      	b.n	8002a6a <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002a16:	f7ff fa79 	bl	8001f0c <HAL_RCC_GetSysClockFreq>
 8002a1a:	0003      	movs	r3, r0
 8002a1c:	005a      	lsls	r2, r3, #1
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	085b      	lsrs	r3, r3, #1
 8002a24:	18d2      	adds	r2, r2, r3
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	0019      	movs	r1, r3
 8002a2c:	0010      	movs	r0, r2
 8002a2e:	f7fd fb6b 	bl	8000108 <__udivsi3>
 8002a32:	0003      	movs	r3, r0
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002a38:	e017      	b.n	8002a6a <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	085b      	lsrs	r3, r3, #1
 8002a40:	2280      	movs	r2, #128	; 0x80
 8002a42:	0252      	lsls	r2, r2, #9
 8002a44:	189a      	adds	r2, r3, r2
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	0019      	movs	r1, r3
 8002a4c:	0010      	movs	r0, r2
 8002a4e:	f7fd fb5b 	bl	8000108 <__udivsi3>
 8002a52:	0003      	movs	r3, r0
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002a58:	e007      	b.n	8002a6a <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002a5a:	2313      	movs	r3, #19
 8002a5c:	2218      	movs	r2, #24
 8002a5e:	4694      	mov	ip, r2
 8002a60:	44bc      	add	ip, r7
 8002a62:	4463      	add	r3, ip
 8002a64:	2201      	movs	r2, #1
 8002a66:	701a      	strb	r2, [r3, #0]
        break;
 8002a68:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a6c:	2b0f      	cmp	r3, #15
 8002a6e:	d920      	bls.n	8002ab2 <UART_SetConfig+0x4fa>
 8002a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a72:	4a67      	ldr	r2, [pc, #412]	; (8002c10 <UART_SetConfig+0x658>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d81c      	bhi.n	8002ab2 <UART_SetConfig+0x4fa>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a7a:	b29a      	uxth	r2, r3
 8002a7c:	200a      	movs	r0, #10
 8002a7e:	2418      	movs	r4, #24
 8002a80:	193b      	adds	r3, r7, r4
 8002a82:	181b      	adds	r3, r3, r0
 8002a84:	210f      	movs	r1, #15
 8002a86:	438a      	bics	r2, r1
 8002a88:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a8c:	085b      	lsrs	r3, r3, #1
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	2207      	movs	r2, #7
 8002a92:	4013      	ands	r3, r2
 8002a94:	b299      	uxth	r1, r3
 8002a96:	193b      	adds	r3, r7, r4
 8002a98:	181b      	adds	r3, r3, r0
 8002a9a:	193a      	adds	r2, r7, r4
 8002a9c:	1812      	adds	r2, r2, r0
 8002a9e:	8812      	ldrh	r2, [r2, #0]
 8002aa0:	430a      	orrs	r2, r1
 8002aa2:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	193a      	adds	r2, r7, r4
 8002aaa:	1812      	adds	r2, r2, r0
 8002aac:	8812      	ldrh	r2, [r2, #0]
 8002aae:	60da      	str	r2, [r3, #12]
 8002ab0:	e095      	b.n	8002bde <UART_SetConfig+0x626>
    }
    else
    {
      ret = HAL_ERROR;
 8002ab2:	2313      	movs	r3, #19
 8002ab4:	2218      	movs	r2, #24
 8002ab6:	4694      	mov	ip, r2
 8002ab8:	44bc      	add	ip, r7
 8002aba:	4463      	add	r3, ip
 8002abc:	2201      	movs	r2, #1
 8002abe:	701a      	strb	r2, [r3, #0]
 8002ac0:	e08d      	b.n	8002bde <UART_SetConfig+0x626>
    }
  }
  else
  {
    switch (clocksource)
 8002ac2:	231b      	movs	r3, #27
 8002ac4:	2218      	movs	r2, #24
 8002ac6:	4694      	mov	ip, r2
 8002ac8:	44bc      	add	ip, r7
 8002aca:	4463      	add	r3, ip
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	2b08      	cmp	r3, #8
 8002ad0:	d86a      	bhi.n	8002ba8 <UART_SetConfig+0x5f0>
 8002ad2:	009a      	lsls	r2, r3, #2
 8002ad4:	4b4f      	ldr	r3, [pc, #316]	; (8002c14 <UART_SetConfig+0x65c>)
 8002ad6:	18d3      	adds	r3, r2, r3
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002adc:	f7ff faa4 	bl	8002028 <HAL_RCC_GetPCLK1Freq>
 8002ae0:	0002      	movs	r2, r0
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	085b      	lsrs	r3, r3, #1
 8002ae8:	18d2      	adds	r2, r2, r3
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	0019      	movs	r1, r3
 8002af0:	0010      	movs	r0, r2
 8002af2:	f7fd fb09 	bl	8000108 <__udivsi3>
 8002af6:	0003      	movs	r3, r0
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002afc:	e05c      	b.n	8002bb8 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002afe:	f7ff faa9 	bl	8002054 <HAL_RCC_GetPCLK2Freq>
 8002b02:	0002      	movs	r2, r0
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	085b      	lsrs	r3, r3, #1
 8002b0a:	18d2      	adds	r2, r2, r3
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	0019      	movs	r1, r3
 8002b12:	0010      	movs	r0, r2
 8002b14:	f7fd faf8 	bl	8000108 <__udivsi3>
 8002b18:	0003      	movs	r3, r0
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002b1e:	e04b      	b.n	8002bb8 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002b20:	4b38      	ldr	r3, [pc, #224]	; (8002c04 <UART_SetConfig+0x64c>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	2210      	movs	r2, #16
 8002b26:	4013      	ands	r3, r2
 8002b28:	d00e      	beq.n	8002b48 <UART_SetConfig+0x590>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	085b      	lsrs	r3, r3, #1
 8002b30:	4a39      	ldr	r2, [pc, #228]	; (8002c18 <UART_SetConfig+0x660>)
 8002b32:	189a      	adds	r2, r3, r2
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	0019      	movs	r1, r3
 8002b3a:	0010      	movs	r0, r2
 8002b3c:	f7fd fae4 	bl	8000108 <__udivsi3>
 8002b40:	0003      	movs	r3, r0
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 8002b46:	e037      	b.n	8002bb8 <UART_SetConfig+0x600>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	085b      	lsrs	r3, r3, #1
 8002b4e:	4a33      	ldr	r2, [pc, #204]	; (8002c1c <UART_SetConfig+0x664>)
 8002b50:	189a      	adds	r2, r3, r2
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	0019      	movs	r1, r3
 8002b58:	0010      	movs	r0, r2
 8002b5a:	f7fd fad5 	bl	8000108 <__udivsi3>
 8002b5e:	0003      	movs	r3, r0
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002b64:	e028      	b.n	8002bb8 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002b66:	f7ff f9d1 	bl	8001f0c <HAL_RCC_GetSysClockFreq>
 8002b6a:	0002      	movs	r2, r0
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	085b      	lsrs	r3, r3, #1
 8002b72:	18d2      	adds	r2, r2, r3
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	0019      	movs	r1, r3
 8002b7a:	0010      	movs	r0, r2
 8002b7c:	f7fd fac4 	bl	8000108 <__udivsi3>
 8002b80:	0003      	movs	r3, r0
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002b86:	e017      	b.n	8002bb8 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	085b      	lsrs	r3, r3, #1
 8002b8e:	2280      	movs	r2, #128	; 0x80
 8002b90:	0212      	lsls	r2, r2, #8
 8002b92:	189a      	adds	r2, r3, r2
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	0019      	movs	r1, r3
 8002b9a:	0010      	movs	r0, r2
 8002b9c:	f7fd fab4 	bl	8000108 <__udivsi3>
 8002ba0:	0003      	movs	r3, r0
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002ba6:	e007      	b.n	8002bb8 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002ba8:	2313      	movs	r3, #19
 8002baa:	2218      	movs	r2, #24
 8002bac:	4694      	mov	ip, r2
 8002bae:	44bc      	add	ip, r7
 8002bb0:	4463      	add	r3, ip
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	701a      	strb	r2, [r3, #0]
        break;
 8002bb6:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bba:	2b0f      	cmp	r3, #15
 8002bbc:	d908      	bls.n	8002bd0 <UART_SetConfig+0x618>
 8002bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bc0:	4a13      	ldr	r2, [pc, #76]	; (8002c10 <UART_SetConfig+0x658>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d804      	bhi.n	8002bd0 <UART_SetConfig+0x618>
    {
      huart->Instance->BRR = usartdiv;
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bcc:	60da      	str	r2, [r3, #12]
 8002bce:	e006      	b.n	8002bde <UART_SetConfig+0x626>
    }
    else
    {
      ret = HAL_ERROR;
 8002bd0:	2313      	movs	r3, #19
 8002bd2:	2218      	movs	r2, #24
 8002bd4:	4694      	mov	ip, r2
 8002bd6:	44bc      	add	ip, r7
 8002bd8:	4463      	add	r3, ip
 8002bda:	2201      	movs	r2, #1
 8002bdc:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	2200      	movs	r2, #0
 8002be2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	2200      	movs	r2, #0
 8002be8:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8002bea:	2313      	movs	r3, #19
 8002bec:	2218      	movs	r2, #24
 8002bee:	4694      	mov	ip, r2
 8002bf0:	44bc      	add	ip, r7
 8002bf2:	4463      	add	r3, ip
 8002bf4:	781b      	ldrb	r3, [r3, #0]
}
 8002bf6:	0018      	movs	r0, r3
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	b00e      	add	sp, #56	; 0x38
 8002bfc:	bdb0      	pop	{r4, r5, r7, pc}
 8002bfe:	46c0      	nop			; (mov r8, r8)
 8002c00:	08003790 	.word	0x08003790
 8002c04:	40021000 	.word	0x40021000
 8002c08:	007a1200 	.word	0x007a1200
 8002c0c:	01e84800 	.word	0x01e84800
 8002c10:	0000ffff 	.word	0x0000ffff
 8002c14:	080037b4 	.word	0x080037b4
 8002c18:	003d0900 	.word	0x003d0900
 8002c1c:	00f42400 	.word	0x00f42400

08002c20 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	4013      	ands	r3, r2
 8002c30:	d00b      	beq.n	8002c4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	4a4a      	ldr	r2, [pc, #296]	; (8002d64 <UART_AdvFeatureConfig+0x144>)
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	0019      	movs	r1, r3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	430a      	orrs	r2, r1
 8002c48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4e:	2202      	movs	r2, #2
 8002c50:	4013      	ands	r3, r2
 8002c52:	d00b      	beq.n	8002c6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	4a43      	ldr	r2, [pc, #268]	; (8002d68 <UART_AdvFeatureConfig+0x148>)
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	0019      	movs	r1, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	430a      	orrs	r2, r1
 8002c6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c70:	2204      	movs	r2, #4
 8002c72:	4013      	ands	r3, r2
 8002c74:	d00b      	beq.n	8002c8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	4a3b      	ldr	r2, [pc, #236]	; (8002d6c <UART_AdvFeatureConfig+0x14c>)
 8002c7e:	4013      	ands	r3, r2
 8002c80:	0019      	movs	r1, r3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	430a      	orrs	r2, r1
 8002c8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c92:	2208      	movs	r2, #8
 8002c94:	4013      	ands	r3, r2
 8002c96:	d00b      	beq.n	8002cb0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	4a34      	ldr	r2, [pc, #208]	; (8002d70 <UART_AdvFeatureConfig+0x150>)
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	0019      	movs	r1, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	430a      	orrs	r2, r1
 8002cae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb4:	2210      	movs	r2, #16
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	d00b      	beq.n	8002cd2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	4a2c      	ldr	r2, [pc, #176]	; (8002d74 <UART_AdvFeatureConfig+0x154>)
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	0019      	movs	r1, r3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	430a      	orrs	r2, r1
 8002cd0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd6:	2220      	movs	r2, #32
 8002cd8:	4013      	ands	r3, r2
 8002cda:	d00b      	beq.n	8002cf4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	4a25      	ldr	r2, [pc, #148]	; (8002d78 <UART_AdvFeatureConfig+0x158>)
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	0019      	movs	r1, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	430a      	orrs	r2, r1
 8002cf2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf8:	2240      	movs	r2, #64	; 0x40
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	d01d      	beq.n	8002d3a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	4a1d      	ldr	r2, [pc, #116]	; (8002d7c <UART_AdvFeatureConfig+0x15c>)
 8002d06:	4013      	ands	r3, r2
 8002d08:	0019      	movs	r1, r3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	430a      	orrs	r2, r1
 8002d14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d1a:	2380      	movs	r3, #128	; 0x80
 8002d1c:	035b      	lsls	r3, r3, #13
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d10b      	bne.n	8002d3a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	4a15      	ldr	r2, [pc, #84]	; (8002d80 <UART_AdvFeatureConfig+0x160>)
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	0019      	movs	r1, r3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	430a      	orrs	r2, r1
 8002d38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3e:	2280      	movs	r2, #128	; 0x80
 8002d40:	4013      	ands	r3, r2
 8002d42:	d00b      	beq.n	8002d5c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	4a0e      	ldr	r2, [pc, #56]	; (8002d84 <UART_AdvFeatureConfig+0x164>)
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	0019      	movs	r1, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	430a      	orrs	r2, r1
 8002d5a:	605a      	str	r2, [r3, #4]
  }
}
 8002d5c:	46c0      	nop			; (mov r8, r8)
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	b002      	add	sp, #8
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	fffdffff 	.word	0xfffdffff
 8002d68:	fffeffff 	.word	0xfffeffff
 8002d6c:	fffbffff 	.word	0xfffbffff
 8002d70:	ffff7fff 	.word	0xffff7fff
 8002d74:	ffffefff 	.word	0xffffefff
 8002d78:	ffffdfff 	.word	0xffffdfff
 8002d7c:	ffefffff 	.word	0xffefffff
 8002d80:	ff9fffff 	.word	0xff9fffff
 8002d84:	fff7ffff 	.word	0xfff7ffff

08002d88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b086      	sub	sp, #24
 8002d8c:	af02      	add	r7, sp, #8
 8002d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002d96:	f7fd fba5 	bl	80004e4 <HAL_GetTick>
 8002d9a:	0003      	movs	r3, r0
 8002d9c:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2208      	movs	r2, #8
 8002da6:	4013      	ands	r3, r2
 8002da8:	2b08      	cmp	r3, #8
 8002daa:	d10d      	bne.n	8002dc8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002dac:	68fa      	ldr	r2, [r7, #12]
 8002dae:	2380      	movs	r3, #128	; 0x80
 8002db0:	0399      	lsls	r1, r3, #14
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	4b16      	ldr	r3, [pc, #88]	; (8002e10 <UART_CheckIdleState+0x88>)
 8002db6:	9300      	str	r3, [sp, #0]
 8002db8:	0013      	movs	r3, r2
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f000 f82a 	bl	8002e14 <UART_WaitOnFlagUntilTimeout>
 8002dc0:	1e03      	subs	r3, r0, #0
 8002dc2:	d001      	beq.n	8002dc8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	e01f      	b.n	8002e08 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2204      	movs	r2, #4
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	2b04      	cmp	r3, #4
 8002dd4:	d10d      	bne.n	8002df2 <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002dd6:	68fa      	ldr	r2, [r7, #12]
 8002dd8:	2380      	movs	r3, #128	; 0x80
 8002dda:	03d9      	lsls	r1, r3, #15
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	4b0c      	ldr	r3, [pc, #48]	; (8002e10 <UART_CheckIdleState+0x88>)
 8002de0:	9300      	str	r3, [sp, #0]
 8002de2:	0013      	movs	r3, r2
 8002de4:	2200      	movs	r2, #0
 8002de6:	f000 f815 	bl	8002e14 <UART_WaitOnFlagUntilTimeout>
 8002dea:	1e03      	subs	r3, r0, #0
 8002dec:	d001      	beq.n	8002df2 <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e00a      	b.n	8002e08 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2220      	movs	r2, #32
 8002df6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2220      	movs	r2, #32
 8002dfc:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2270      	movs	r2, #112	; 0x70
 8002e02:	2100      	movs	r1, #0
 8002e04:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e06:	2300      	movs	r3, #0
}
 8002e08:	0018      	movs	r0, r3
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	b004      	add	sp, #16
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	01ffffff 	.word	0x01ffffff

08002e14 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b084      	sub	sp, #16
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	60f8      	str	r0, [r7, #12]
 8002e1c:	60b9      	str	r1, [r7, #8]
 8002e1e:	603b      	str	r3, [r7, #0]
 8002e20:	1dfb      	adds	r3, r7, #7
 8002e22:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e24:	e029      	b.n	8002e7a <UART_WaitOnFlagUntilTimeout+0x66>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e26:	69bb      	ldr	r3, [r7, #24]
 8002e28:	3301      	adds	r3, #1
 8002e2a:	d026      	beq.n	8002e7a <UART_WaitOnFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e2c:	f7fd fb5a 	bl	80004e4 <HAL_GetTick>
 8002e30:	0002      	movs	r2, r0
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	69ba      	ldr	r2, [r7, #24]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d302      	bcc.n	8002e42 <UART_WaitOnFlagUntilTimeout+0x2e>
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d11b      	bne.n	8002e7a <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4915      	ldr	r1, [pc, #84]	; (8002ea4 <UART_WaitOnFlagUntilTimeout+0x90>)
 8002e4e:	400a      	ands	r2, r1
 8002e50:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	689a      	ldr	r2, [r3, #8]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2101      	movs	r1, #1
 8002e5e:	438a      	bics	r2, r1
 8002e60:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2220      	movs	r2, #32
 8002e66:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2220      	movs	r2, #32
 8002e6c:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2270      	movs	r2, #112	; 0x70
 8002e72:	2100      	movs	r1, #0
 8002e74:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e00f      	b.n	8002e9a <UART_WaitOnFlagUntilTimeout+0x86>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	69db      	ldr	r3, [r3, #28]
 8002e80:	68ba      	ldr	r2, [r7, #8]
 8002e82:	4013      	ands	r3, r2
 8002e84:	68ba      	ldr	r2, [r7, #8]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	425a      	negs	r2, r3
 8002e8a:	4153      	adcs	r3, r2
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	001a      	movs	r2, r3
 8002e90:	1dfb      	adds	r3, r7, #7
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d0c6      	beq.n	8002e26 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	0018      	movs	r0, r3
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	b004      	add	sp, #16
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	46c0      	nop			; (mov r8, r8)
 8002ea4:	fffffe5f 	.word	0xfffffe5f

08002ea8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002eac:	f7fd fac4 	bl	8000438 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002eb0:	f000 f80e 	bl	8002ed0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002eb4:	f000 f9ba 	bl	800322c <MX_GPIO_Init>
  MX_ADC_Init();
 8002eb8:	f000 f884 	bl	8002fc4 <MX_ADC_Init>
  MX_LPTIM1_Init();
 8002ebc:	f000 f934 	bl	8003128 <MX_LPTIM1_Init>
  MX_RTC_Init();
 8002ec0:	f000 f95a 	bl	8003178 <MX_RTC_Init>
  MX_I2C1_Init();
 8002ec4:	f000 f8f0 	bl	80030a8 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8002ec8:	f000 f980 	bl	80031cc <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002ecc:	e7fe      	b.n	8002ecc <main+0x24>
	...

08002ed0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ed0:	b590      	push	{r4, r7, lr}
 8002ed2:	b09d      	sub	sp, #116	; 0x74
 8002ed4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ed6:	2438      	movs	r4, #56	; 0x38
 8002ed8:	193b      	adds	r3, r7, r4
 8002eda:	0018      	movs	r0, r3
 8002edc:	2338      	movs	r3, #56	; 0x38
 8002ede:	001a      	movs	r2, r3
 8002ee0:	2100      	movs	r1, #0
 8002ee2:	f000 fc41 	bl	8003768 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ee6:	2324      	movs	r3, #36	; 0x24
 8002ee8:	18fb      	adds	r3, r7, r3
 8002eea:	0018      	movs	r0, r3
 8002eec:	2314      	movs	r3, #20
 8002eee:	001a      	movs	r2, r3
 8002ef0:	2100      	movs	r1, #0
 8002ef2:	f000 fc39 	bl	8003768 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ef6:	003b      	movs	r3, r7
 8002ef8:	0018      	movs	r0, r3
 8002efa:	2324      	movs	r3, #36	; 0x24
 8002efc:	001a      	movs	r2, r3
 8002efe:	2100      	movs	r1, #0
 8002f00:	f000 fc32 	bl	8003768 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f04:	4b2d      	ldr	r3, [pc, #180]	; (8002fbc <SystemClock_Config+0xec>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a2d      	ldr	r2, [pc, #180]	; (8002fc0 <SystemClock_Config+0xf0>)
 8002f0a:	401a      	ands	r2, r3
 8002f0c:	4b2b      	ldr	r3, [pc, #172]	; (8002fbc <SystemClock_Config+0xec>)
 8002f0e:	2180      	movs	r1, #128	; 0x80
 8002f10:	0109      	lsls	r1, r1, #4
 8002f12:	430a      	orrs	r2, r1
 8002f14:	601a      	str	r2, [r3, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 8002f16:	0021      	movs	r1, r4
 8002f18:	187b      	adds	r3, r7, r1
 8002f1a:	2218      	movs	r2, #24
 8002f1c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002f1e:	187b      	adds	r3, r7, r1
 8002f20:	2201      	movs	r2, #1
 8002f22:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002f24:	187b      	adds	r3, r7, r1
 8002f26:	2201      	movs	r2, #1
 8002f28:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002f2a:	187b      	adds	r3, r7, r1
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8002f30:	187b      	adds	r3, r7, r1
 8002f32:	22a0      	movs	r2, #160	; 0xa0
 8002f34:	0212      	lsls	r2, r2, #8
 8002f36:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002f38:	187b      	adds	r3, r7, r1
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f3e:	187b      	adds	r3, r7, r1
 8002f40:	0018      	movs	r0, r3
 8002f42:	f7fe fae9 	bl	8001518 <HAL_RCC_OscConfig>
 8002f46:	1e03      	subs	r3, r0, #0
 8002f48:	d001      	beq.n	8002f4e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8002f4a:	f000 fa25 	bl	8003398 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f4e:	2124      	movs	r1, #36	; 0x24
 8002f50:	187b      	adds	r3, r7, r1
 8002f52:	220f      	movs	r2, #15
 8002f54:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8002f56:	187b      	adds	r3, r7, r1
 8002f58:	2200      	movs	r2, #0
 8002f5a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f5c:	187b      	adds	r3, r7, r1
 8002f5e:	2200      	movs	r2, #0
 8002f60:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002f62:	187b      	adds	r3, r7, r1
 8002f64:	2200      	movs	r2, #0
 8002f66:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002f68:	187b      	adds	r3, r7, r1
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002f6e:	187b      	adds	r3, r7, r1
 8002f70:	2100      	movs	r1, #0
 8002f72:	0018      	movs	r0, r3
 8002f74:	f7fe fea0 	bl	8001cb8 <HAL_RCC_ClockConfig>
 8002f78:	1e03      	subs	r3, r0, #0
 8002f7a:	d001      	beq.n	8002f80 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8002f7c:	f000 fa0c 	bl	8003398 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 8002f80:	003b      	movs	r3, r7
 8002f82:	22a9      	movs	r2, #169	; 0xa9
 8002f84:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_LPTIM1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002f86:	003b      	movs	r3, r7
 8002f88:	2200      	movs	r2, #0
 8002f8a:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002f8c:	003b      	movs	r3, r7
 8002f8e:	2200      	movs	r2, #0
 8002f90:	615a      	str	r2, [r3, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002f92:	003b      	movs	r3, r7
 8002f94:	2280      	movs	r2, #128	; 0x80
 8002f96:	0292      	lsls	r2, r2, #10
 8002f98:	605a      	str	r2, [r3, #4]
  PeriphClkInit.LptimClockSelection = RCC_LPTIM1CLKSOURCE_LSI;
 8002f9a:	003b      	movs	r3, r7
 8002f9c:	2280      	movs	r2, #128	; 0x80
 8002f9e:	02d2      	lsls	r2, r2, #11
 8002fa0:	61da      	str	r2, [r3, #28]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002fa2:	003b      	movs	r3, r7
 8002fa4:	0018      	movs	r0, r3
 8002fa6:	f7ff f86b 	bl	8002080 <HAL_RCCEx_PeriphCLKConfig>
 8002faa:	1e03      	subs	r3, r0, #0
 8002fac:	d001      	beq.n	8002fb2 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8002fae:	f000 f9f3 	bl	8003398 <Error_Handler>
  }
}
 8002fb2:	46c0      	nop			; (mov r8, r8)
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	b01d      	add	sp, #116	; 0x74
 8002fb8:	bd90      	pop	{r4, r7, pc}
 8002fba:	46c0      	nop			; (mov r8, r8)
 8002fbc:	40007000 	.word	0x40007000
 8002fc0:	ffffe7ff 	.word	0xffffe7ff

08002fc4 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002fca:	003b      	movs	r3, r7
 8002fcc:	0018      	movs	r0, r3
 8002fce:	2308      	movs	r3, #8
 8002fd0:	001a      	movs	r2, r3
 8002fd2:	2100      	movs	r1, #0
 8002fd4:	f000 fbc8 	bl	8003768 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 8002fd8:	4b30      	ldr	r3, [pc, #192]	; (800309c <MX_ADC_Init+0xd8>)
 8002fda:	4a31      	ldr	r2, [pc, #196]	; (80030a0 <MX_ADC_Init+0xdc>)
 8002fdc:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8002fde:	4b2f      	ldr	r3, [pc, #188]	; (800309c <MX_ADC_Init+0xd8>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8002fe4:	4b2d      	ldr	r3, [pc, #180]	; (800309c <MX_ADC_Init+0xd8>)
 8002fe6:	22c0      	movs	r2, #192	; 0xc0
 8002fe8:	0612      	lsls	r2, r2, #24
 8002fea:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002fec:	4b2b      	ldr	r3, [pc, #172]	; (800309c <MX_ADC_Init+0xd8>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002ff2:	4b2a      	ldr	r3, [pc, #168]	; (800309c <MX_ADC_Init+0xd8>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8002ff8:	4b28      	ldr	r3, [pc, #160]	; (800309c <MX_ADC_Init+0xd8>)
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002ffe:	4b27      	ldr	r3, [pc, #156]	; (800309c <MX_ADC_Init+0xd8>)
 8003000:	2200      	movs	r2, #0
 8003002:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8003004:	4b25      	ldr	r3, [pc, #148]	; (800309c <MX_ADC_Init+0xd8>)
 8003006:	2220      	movs	r2, #32
 8003008:	2100      	movs	r1, #0
 800300a:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800300c:	4b23      	ldr	r3, [pc, #140]	; (800309c <MX_ADC_Init+0xd8>)
 800300e:	2221      	movs	r2, #33	; 0x21
 8003010:	2100      	movs	r1, #0
 8003012:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003014:	4b21      	ldr	r3, [pc, #132]	; (800309c <MX_ADC_Init+0xd8>)
 8003016:	2200      	movs	r2, #0
 8003018:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800301a:	4b20      	ldr	r3, [pc, #128]	; (800309c <MX_ADC_Init+0xd8>)
 800301c:	22c2      	movs	r2, #194	; 0xc2
 800301e:	32ff      	adds	r2, #255	; 0xff
 8003020:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8003022:	4b1e      	ldr	r3, [pc, #120]	; (800309c <MX_ADC_Init+0xd8>)
 8003024:	222c      	movs	r2, #44	; 0x2c
 8003026:	2100      	movs	r1, #0
 8003028:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800302a:	4b1c      	ldr	r3, [pc, #112]	; (800309c <MX_ADC_Init+0xd8>)
 800302c:	2204      	movs	r2, #4
 800302e:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003030:	4b1a      	ldr	r3, [pc, #104]	; (800309c <MX_ADC_Init+0xd8>)
 8003032:	2200      	movs	r2, #0
 8003034:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8003036:	4b19      	ldr	r3, [pc, #100]	; (800309c <MX_ADC_Init+0xd8>)
 8003038:	2200      	movs	r2, #0
 800303a:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 800303c:	4b17      	ldr	r3, [pc, #92]	; (800309c <MX_ADC_Init+0xd8>)
 800303e:	2200      	movs	r2, #0
 8003040:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8003042:	4b16      	ldr	r3, [pc, #88]	; (800309c <MX_ADC_Init+0xd8>)
 8003044:	2200      	movs	r2, #0
 8003046:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8003048:	4b14      	ldr	r3, [pc, #80]	; (800309c <MX_ADC_Init+0xd8>)
 800304a:	0018      	movs	r0, r3
 800304c:	f7fd fa54 	bl	80004f8 <HAL_ADC_Init>
 8003050:	1e03      	subs	r3, r0, #0
 8003052:	d001      	beq.n	8003058 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8003054:	f000 f9a0 	bl	8003398 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003058:	003b      	movs	r3, r7
 800305a:	2201      	movs	r2, #1
 800305c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800305e:	003b      	movs	r3, r7
 8003060:	2280      	movs	r2, #128	; 0x80
 8003062:	0152      	lsls	r2, r2, #5
 8003064:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003066:	003a      	movs	r2, r7
 8003068:	4b0c      	ldr	r3, [pc, #48]	; (800309c <MX_ADC_Init+0xd8>)
 800306a:	0011      	movs	r1, r2
 800306c:	0018      	movs	r0, r3
 800306e:	f7fd fc8b 	bl	8000988 <HAL_ADC_ConfigChannel>
 8003072:	1e03      	subs	r3, r0, #0
 8003074:	d001      	beq.n	800307a <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8003076:	f000 f98f 	bl	8003398 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800307a:	003b      	movs	r3, r7
 800307c:	4a09      	ldr	r2, [pc, #36]	; (80030a4 <MX_ADC_Init+0xe0>)
 800307e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003080:	003a      	movs	r2, r7
 8003082:	4b06      	ldr	r3, [pc, #24]	; (800309c <MX_ADC_Init+0xd8>)
 8003084:	0011      	movs	r1, r2
 8003086:	0018      	movs	r0, r3
 8003088:	f7fd fc7e 	bl	8000988 <HAL_ADC_ConfigChannel>
 800308c:	1e03      	subs	r3, r0, #0
 800308e:	d001      	beq.n	8003094 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8003090:	f000 f982 	bl	8003398 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8003094:	46c0      	nop			; (mov r8, r8)
 8003096:	46bd      	mov	sp, r7
 8003098:	b002      	add	sp, #8
 800309a:	bd80      	pop	{r7, pc}
 800309c:	20000144 	.word	0x20000144
 80030a0:	40012400 	.word	0x40012400
 80030a4:	04000002 	.word	0x04000002

080030a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80030ac:	4b1c      	ldr	r3, [pc, #112]	; (8003120 <MX_I2C1_Init+0x78>)
 80030ae:	4a1d      	ldr	r2, [pc, #116]	; (8003124 <MX_I2C1_Init+0x7c>)
 80030b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000708;
 80030b2:	4b1b      	ldr	r3, [pc, #108]	; (8003120 <MX_I2C1_Init+0x78>)
 80030b4:	22e1      	movs	r2, #225	; 0xe1
 80030b6:	00d2      	lsls	r2, r2, #3
 80030b8:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80030ba:	4b19      	ldr	r3, [pc, #100]	; (8003120 <MX_I2C1_Init+0x78>)
 80030bc:	2200      	movs	r2, #0
 80030be:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80030c0:	4b17      	ldr	r3, [pc, #92]	; (8003120 <MX_I2C1_Init+0x78>)
 80030c2:	2201      	movs	r2, #1
 80030c4:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80030c6:	4b16      	ldr	r3, [pc, #88]	; (8003120 <MX_I2C1_Init+0x78>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80030cc:	4b14      	ldr	r3, [pc, #80]	; (8003120 <MX_I2C1_Init+0x78>)
 80030ce:	2200      	movs	r2, #0
 80030d0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80030d2:	4b13      	ldr	r3, [pc, #76]	; (8003120 <MX_I2C1_Init+0x78>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80030d8:	4b11      	ldr	r3, [pc, #68]	; (8003120 <MX_I2C1_Init+0x78>)
 80030da:	2200      	movs	r2, #0
 80030dc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80030de:	4b10      	ldr	r3, [pc, #64]	; (8003120 <MX_I2C1_Init+0x78>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80030e4:	4b0e      	ldr	r3, [pc, #56]	; (8003120 <MX_I2C1_Init+0x78>)
 80030e6:	0018      	movs	r0, r3
 80030e8:	f7fd ff8e 	bl	8001008 <HAL_I2C_Init>
 80030ec:	1e03      	subs	r3, r0, #0
 80030ee:	d001      	beq.n	80030f4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80030f0:	f000 f952 	bl	8003398 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80030f4:	4b0a      	ldr	r3, [pc, #40]	; (8003120 <MX_I2C1_Init+0x78>)
 80030f6:	2100      	movs	r1, #0
 80030f8:	0018      	movs	r0, r3
 80030fa:	f7fe f81b 	bl	8001134 <HAL_I2CEx_ConfigAnalogFilter>
 80030fe:	1e03      	subs	r3, r0, #0
 8003100:	d001      	beq.n	8003106 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8003102:	f000 f949 	bl	8003398 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003106:	4b06      	ldr	r3, [pc, #24]	; (8003120 <MX_I2C1_Init+0x78>)
 8003108:	2100      	movs	r1, #0
 800310a:	0018      	movs	r0, r3
 800310c:	f7fe f85e 	bl	80011cc <HAL_I2CEx_ConfigDigitalFilter>
 8003110:	1e03      	subs	r3, r0, #0
 8003112:	d001      	beq.n	8003118 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8003114:	f000 f940 	bl	8003398 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003118:	46c0      	nop			; (mov r8, r8)
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	46c0      	nop			; (mov r8, r8)
 8003120:	20000024 	.word	0x20000024
 8003124:	40005400 	.word	0x40005400

08003128 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 800312c:	4b0f      	ldr	r3, [pc, #60]	; (800316c <MX_LPTIM1_Init+0x44>)
 800312e:	4a10      	ldr	r2, [pc, #64]	; (8003170 <MX_LPTIM1_Init+0x48>)
 8003130:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8003132:	4b0e      	ldr	r3, [pc, #56]	; (800316c <MX_LPTIM1_Init+0x44>)
 8003134:	2200      	movs	r2, #0
 8003136:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8003138:	4b0c      	ldr	r3, [pc, #48]	; (800316c <MX_LPTIM1_Init+0x44>)
 800313a:	2200      	movs	r2, #0
 800313c:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 800313e:	4b0b      	ldr	r3, [pc, #44]	; (800316c <MX_LPTIM1_Init+0x44>)
 8003140:	4a0c      	ldr	r2, [pc, #48]	; (8003174 <MX_LPTIM1_Init+0x4c>)
 8003142:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8003144:	4b09      	ldr	r3, [pc, #36]	; (800316c <MX_LPTIM1_Init+0x44>)
 8003146:	2200      	movs	r2, #0
 8003148:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 800314a:	4b08      	ldr	r3, [pc, #32]	; (800316c <MX_LPTIM1_Init+0x44>)
 800314c:	2200      	movs	r2, #0
 800314e:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8003150:	4b06      	ldr	r3, [pc, #24]	; (800316c <MX_LPTIM1_Init+0x44>)
 8003152:	2200      	movs	r2, #0
 8003154:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8003156:	4b05      	ldr	r3, [pc, #20]	; (800316c <MX_LPTIM1_Init+0x44>)
 8003158:	0018      	movs	r0, r3
 800315a:	f7fe f883 	bl	8001264 <HAL_LPTIM_Init>
 800315e:	1e03      	subs	r3, r0, #0
 8003160:	d001      	beq.n	8003166 <MX_LPTIM1_Init+0x3e>
  {
    Error_Handler();
 8003162:	f000 f919 	bl	8003398 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8003166:	46c0      	nop			; (mov r8, r8)
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}
 800316c:	200000f0 	.word	0x200000f0
 8003170:	40007c00 	.word	0x40007c00
 8003174:	0000ffff 	.word	0x0000ffff

08003178 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 800317c:	4b11      	ldr	r3, [pc, #68]	; (80031c4 <MX_RTC_Init+0x4c>)
 800317e:	4a12      	ldr	r2, [pc, #72]	; (80031c8 <MX_RTC_Init+0x50>)
 8003180:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003182:	4b10      	ldr	r3, [pc, #64]	; (80031c4 <MX_RTC_Init+0x4c>)
 8003184:	2200      	movs	r2, #0
 8003186:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003188:	4b0e      	ldr	r3, [pc, #56]	; (80031c4 <MX_RTC_Init+0x4c>)
 800318a:	227f      	movs	r2, #127	; 0x7f
 800318c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800318e:	4b0d      	ldr	r3, [pc, #52]	; (80031c4 <MX_RTC_Init+0x4c>)
 8003190:	22ff      	movs	r2, #255	; 0xff
 8003192:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003194:	4b0b      	ldr	r3, [pc, #44]	; (80031c4 <MX_RTC_Init+0x4c>)
 8003196:	2200      	movs	r2, #0
 8003198:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800319a:	4b0a      	ldr	r3, [pc, #40]	; (80031c4 <MX_RTC_Init+0x4c>)
 800319c:	2200      	movs	r2, #0
 800319e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80031a0:	4b08      	ldr	r3, [pc, #32]	; (80031c4 <MX_RTC_Init+0x4c>)
 80031a2:	2200      	movs	r2, #0
 80031a4:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80031a6:	4b07      	ldr	r3, [pc, #28]	; (80031c4 <MX_RTC_Init+0x4c>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80031ac:	4b05      	ldr	r3, [pc, #20]	; (80031c4 <MX_RTC_Init+0x4c>)
 80031ae:	0018      	movs	r0, r3
 80031b0:	f7ff f8be 	bl	8002330 <HAL_RTC_Init>
 80031b4:	1e03      	subs	r3, r0, #0
 80031b6:	d001      	beq.n	80031bc <MX_RTC_Init+0x44>
  {
    Error_Handler();
 80031b8:	f000 f8ee 	bl	8003398 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80031bc:	46c0      	nop			; (mov r8, r8)
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	46c0      	nop			; (mov r8, r8)
 80031c4:	20000120 	.word	0x20000120
 80031c8:	40002800 	.word	0x40002800

080031cc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80031d0:	4b14      	ldr	r3, [pc, #80]	; (8003224 <MX_USART1_UART_Init+0x58>)
 80031d2:	4a15      	ldr	r2, [pc, #84]	; (8003228 <MX_USART1_UART_Init+0x5c>)
 80031d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80031d6:	4b13      	ldr	r3, [pc, #76]	; (8003224 <MX_USART1_UART_Init+0x58>)
 80031d8:	22e1      	movs	r2, #225	; 0xe1
 80031da:	0252      	lsls	r2, r2, #9
 80031dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80031de:	4b11      	ldr	r3, [pc, #68]	; (8003224 <MX_USART1_UART_Init+0x58>)
 80031e0:	2200      	movs	r2, #0
 80031e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80031e4:	4b0f      	ldr	r3, [pc, #60]	; (8003224 <MX_USART1_UART_Init+0x58>)
 80031e6:	2200      	movs	r2, #0
 80031e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80031ea:	4b0e      	ldr	r3, [pc, #56]	; (8003224 <MX_USART1_UART_Init+0x58>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80031f0:	4b0c      	ldr	r3, [pc, #48]	; (8003224 <MX_USART1_UART_Init+0x58>)
 80031f2:	220c      	movs	r2, #12
 80031f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031f6:	4b0b      	ldr	r3, [pc, #44]	; (8003224 <MX_USART1_UART_Init+0x58>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80031fc:	4b09      	ldr	r3, [pc, #36]	; (8003224 <MX_USART1_UART_Init+0x58>)
 80031fe:	2200      	movs	r2, #0
 8003200:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003202:	4b08      	ldr	r3, [pc, #32]	; (8003224 <MX_USART1_UART_Init+0x58>)
 8003204:	2200      	movs	r2, #0
 8003206:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003208:	4b06      	ldr	r3, [pc, #24]	; (8003224 <MX_USART1_UART_Init+0x58>)
 800320a:	2200      	movs	r2, #0
 800320c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800320e:	4b05      	ldr	r3, [pc, #20]	; (8003224 <MX_USART1_UART_Init+0x58>)
 8003210:	0018      	movs	r0, r3
 8003212:	f7ff f97d 	bl	8002510 <HAL_UART_Init>
 8003216:	1e03      	subs	r3, r0, #0
 8003218:	d001      	beq.n	800321e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800321a:	f000 f8bd 	bl	8003398 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800321e:	46c0      	nop			; (mov r8, r8)
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}
 8003224:	20000070 	.word	0x20000070
 8003228:	40013800 	.word	0x40013800

0800322c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800322c:	b590      	push	{r4, r7, lr}
 800322e:	b089      	sub	sp, #36	; 0x24
 8003230:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003232:	240c      	movs	r4, #12
 8003234:	193b      	adds	r3, r7, r4
 8003236:	0018      	movs	r0, r3
 8003238:	2314      	movs	r3, #20
 800323a:	001a      	movs	r2, r3
 800323c:	2100      	movs	r1, #0
 800323e:	f000 fa93 	bl	8003768 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003242:	4b4f      	ldr	r3, [pc, #316]	; (8003380 <MX_GPIO_Init+0x154>)
 8003244:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003246:	4b4e      	ldr	r3, [pc, #312]	; (8003380 <MX_GPIO_Init+0x154>)
 8003248:	2104      	movs	r1, #4
 800324a:	430a      	orrs	r2, r1
 800324c:	62da      	str	r2, [r3, #44]	; 0x2c
 800324e:	4b4c      	ldr	r3, [pc, #304]	; (8003380 <MX_GPIO_Init+0x154>)
 8003250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003252:	2204      	movs	r2, #4
 8003254:	4013      	ands	r3, r2
 8003256:	60bb      	str	r3, [r7, #8]
 8003258:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800325a:	4b49      	ldr	r3, [pc, #292]	; (8003380 <MX_GPIO_Init+0x154>)
 800325c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800325e:	4b48      	ldr	r3, [pc, #288]	; (8003380 <MX_GPIO_Init+0x154>)
 8003260:	2101      	movs	r1, #1
 8003262:	430a      	orrs	r2, r1
 8003264:	62da      	str	r2, [r3, #44]	; 0x2c
 8003266:	4b46      	ldr	r3, [pc, #280]	; (8003380 <MX_GPIO_Init+0x154>)
 8003268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800326a:	2201      	movs	r2, #1
 800326c:	4013      	ands	r3, r2
 800326e:	607b      	str	r3, [r7, #4]
 8003270:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003272:	4b43      	ldr	r3, [pc, #268]	; (8003380 <MX_GPIO_Init+0x154>)
 8003274:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003276:	4b42      	ldr	r3, [pc, #264]	; (8003380 <MX_GPIO_Init+0x154>)
 8003278:	2102      	movs	r1, #2
 800327a:	430a      	orrs	r2, r1
 800327c:	62da      	str	r2, [r3, #44]	; 0x2c
 800327e:	4b40      	ldr	r3, [pc, #256]	; (8003380 <MX_GPIO_Init+0x154>)
 8003280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003282:	2202      	movs	r2, #2
 8003284:	4013      	ands	r3, r2
 8003286:	603b      	str	r3, [r7, #0]
 8003288:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_SET);
 800328a:	23c0      	movs	r3, #192	; 0xc0
 800328c:	021b      	lsls	r3, r3, #8
 800328e:	483d      	ldr	r0, [pc, #244]	; (8003384 <MX_GPIO_Init+0x158>)
 8003290:	2201      	movs	r2, #1
 8003292:	0019      	movs	r1, r3
 8003294:	f7fd fe74 	bl	8000f80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8003298:	493b      	ldr	r1, [pc, #236]	; (8003388 <MX_GPIO_Init+0x15c>)
 800329a:	23a0      	movs	r3, #160	; 0xa0
 800329c:	05db      	lsls	r3, r3, #23
 800329e:	2200      	movs	r2, #0
 80032a0:	0018      	movs	r0, r3
 80032a2:	f7fd fe6d 	bl	8000f80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8, GPIO_PIN_SET);
 80032a6:	2398      	movs	r3, #152	; 0x98
 80032a8:	0059      	lsls	r1, r3, #1
 80032aa:	23a0      	movs	r3, #160	; 0xa0
 80032ac:	05db      	lsls	r3, r3, #23
 80032ae:	2201      	movs	r2, #1
 80032b0:	0018      	movs	r0, r3
 80032b2:	f7fd fe65 	bl	8000f80 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80032b6:	193b      	adds	r3, r7, r4
 80032b8:	22c0      	movs	r2, #192	; 0xc0
 80032ba:	0212      	lsls	r2, r2, #8
 80032bc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032be:	193b      	adds	r3, r7, r4
 80032c0:	2201      	movs	r2, #1
 80032c2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032c4:	193b      	adds	r3, r7, r4
 80032c6:	2200      	movs	r2, #0
 80032c8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032ca:	193b      	adds	r3, r7, r4
 80032cc:	2200      	movs	r2, #0
 80032ce:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032d0:	193b      	adds	r3, r7, r4
 80032d2:	4a2c      	ldr	r2, [pc, #176]	; (8003384 <MX_GPIO_Init+0x158>)
 80032d4:	0019      	movs	r1, r3
 80032d6:	0010      	movs	r0, r2
 80032d8:	f7fd fcd4 	bl	8000c84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA8 PA11 
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_11 
 80032dc:	193b      	adds	r3, r7, r4
 80032de:	4a2b      	ldr	r2, [pc, #172]	; (800338c <MX_GPIO_Init+0x160>)
 80032e0:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032e2:	193b      	adds	r3, r7, r4
 80032e4:	2201      	movs	r2, #1
 80032e6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032e8:	193b      	adds	r3, r7, r4
 80032ea:	2200      	movs	r2, #0
 80032ec:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032ee:	193b      	adds	r3, r7, r4
 80032f0:	2200      	movs	r2, #0
 80032f2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032f4:	193a      	adds	r2, r7, r4
 80032f6:	23a0      	movs	r3, #160	; 0xa0
 80032f8:	05db      	lsls	r3, r3, #23
 80032fa:	0011      	movs	r1, r2
 80032fc:	0018      	movs	r0, r3
 80032fe:	f7fd fcc1 	bl	8000c84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003302:	193b      	adds	r3, r7, r4
 8003304:	2230      	movs	r2, #48	; 0x30
 8003306:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8003308:	193b      	adds	r3, r7, r4
 800330a:	2211      	movs	r2, #17
 800330c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800330e:	193b      	adds	r3, r7, r4
 8003310:	2200      	movs	r2, #0
 8003312:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003314:	193b      	adds	r3, r7, r4
 8003316:	2200      	movs	r2, #0
 8003318:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800331a:	193a      	adds	r2, r7, r4
 800331c:	23a0      	movs	r3, #160	; 0xa0
 800331e:	05db      	lsls	r3, r3, #23
 8003320:	0011      	movs	r1, r2
 8003322:	0018      	movs	r0, r3
 8003324:	f7fd fcae 	bl	8000c84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003328:	193b      	adds	r3, r7, r4
 800332a:	22c0      	movs	r2, #192	; 0xc0
 800332c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800332e:	193b      	adds	r3, r7, r4
 8003330:	4a17      	ldr	r2, [pc, #92]	; (8003390 <MX_GPIO_Init+0x164>)
 8003332:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003334:	193b      	adds	r3, r7, r4
 8003336:	2200      	movs	r2, #0
 8003338:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800333a:	193a      	adds	r2, r7, r4
 800333c:	23a0      	movs	r3, #160	; 0xa0
 800333e:	05db      	lsls	r3, r3, #23
 8003340:	0011      	movs	r1, r2
 8003342:	0018      	movs	r0, r3
 8003344:	f7fd fc9e 	bl	8000c84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003348:	193b      	adds	r3, r7, r4
 800334a:	2203      	movs	r2, #3
 800334c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800334e:	193b      	adds	r3, r7, r4
 8003350:	2200      	movs	r2, #0
 8003352:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003354:	193b      	adds	r3, r7, r4
 8003356:	2200      	movs	r2, #0
 8003358:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800335a:	193b      	adds	r3, r7, r4
 800335c:	4a0d      	ldr	r2, [pc, #52]	; (8003394 <MX_GPIO_Init+0x168>)
 800335e:	0019      	movs	r1, r3
 8003360:	0010      	movs	r0, r2
 8003362:	f7fd fc8f 	bl	8000c84 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8003366:	2200      	movs	r2, #0
 8003368:	2100      	movs	r1, #0
 800336a:	2007      	movs	r0, #7
 800336c:	f7fd fc58 	bl	8000c20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8003370:	2007      	movs	r0, #7
 8003372:	f7fd fc6a 	bl	8000c4a <HAL_NVIC_EnableIRQ>

}
 8003376:	46c0      	nop			; (mov r8, r8)
 8003378:	46bd      	mov	sp, r7
 800337a:	b009      	add	sp, #36	; 0x24
 800337c:	bd90      	pop	{r4, r7, pc}
 800337e:	46c0      	nop			; (mov r8, r8)
 8003380:	40021000 	.word	0x40021000
 8003384:	50000800 	.word	0x50000800
 8003388:	0000180c 	.word	0x0000180c
 800338c:	0000190c 	.word	0x0000190c
 8003390:	10210000 	.word	0x10210000
 8003394:	50000400 	.word	0x50000400

08003398 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800339c:	46c0      	nop			; (mov r8, r8)
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
	...

080033a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033a8:	4b07      	ldr	r3, [pc, #28]	; (80033c8 <HAL_MspInit+0x24>)
 80033aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033ac:	4b06      	ldr	r3, [pc, #24]	; (80033c8 <HAL_MspInit+0x24>)
 80033ae:	2101      	movs	r1, #1
 80033b0:	430a      	orrs	r2, r1
 80033b2:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80033b4:	4b04      	ldr	r3, [pc, #16]	; (80033c8 <HAL_MspInit+0x24>)
 80033b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033b8:	4b03      	ldr	r3, [pc, #12]	; (80033c8 <HAL_MspInit+0x24>)
 80033ba:	2180      	movs	r1, #128	; 0x80
 80033bc:	0549      	lsls	r1, r1, #21
 80033be:	430a      	orrs	r2, r1
 80033c0:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033c2:	46c0      	nop			; (mov r8, r8)
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	40021000 	.word	0x40021000

080033cc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b088      	sub	sp, #32
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033d4:	230c      	movs	r3, #12
 80033d6:	18fb      	adds	r3, r7, r3
 80033d8:	0018      	movs	r0, r3
 80033da:	2314      	movs	r3, #20
 80033dc:	001a      	movs	r2, r3
 80033de:	2100      	movs	r1, #0
 80033e0:	f000 f9c2 	bl	8003768 <memset>
  if(hadc->Instance==ADC1)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a19      	ldr	r2, [pc, #100]	; (8003450 <HAL_ADC_MspInit+0x84>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d12b      	bne.n	8003446 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80033ee:	4b19      	ldr	r3, [pc, #100]	; (8003454 <HAL_ADC_MspInit+0x88>)
 80033f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033f2:	4b18      	ldr	r3, [pc, #96]	; (8003454 <HAL_ADC_MspInit+0x88>)
 80033f4:	2180      	movs	r1, #128	; 0x80
 80033f6:	0089      	lsls	r1, r1, #2
 80033f8:	430a      	orrs	r2, r1
 80033fa:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033fc:	4b15      	ldr	r3, [pc, #84]	; (8003454 <HAL_ADC_MspInit+0x88>)
 80033fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003400:	4b14      	ldr	r3, [pc, #80]	; (8003454 <HAL_ADC_MspInit+0x88>)
 8003402:	2101      	movs	r1, #1
 8003404:	430a      	orrs	r2, r1
 8003406:	62da      	str	r2, [r3, #44]	; 0x2c
 8003408:	4b12      	ldr	r3, [pc, #72]	; (8003454 <HAL_ADC_MspInit+0x88>)
 800340a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800340c:	2201      	movs	r2, #1
 800340e:	4013      	ands	r3, r2
 8003410:	60bb      	str	r3, [r7, #8]
 8003412:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration    
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003414:	210c      	movs	r1, #12
 8003416:	187b      	adds	r3, r7, r1
 8003418:	2203      	movs	r2, #3
 800341a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800341c:	187b      	adds	r3, r7, r1
 800341e:	2203      	movs	r2, #3
 8003420:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003422:	187b      	adds	r3, r7, r1
 8003424:	2200      	movs	r2, #0
 8003426:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003428:	187a      	adds	r2, r7, r1
 800342a:	23a0      	movs	r3, #160	; 0xa0
 800342c:	05db      	lsls	r3, r3, #23
 800342e:	0011      	movs	r1, r2
 8003430:	0018      	movs	r0, r3
 8003432:	f7fd fc27 	bl	8000c84 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 8003436:	2200      	movs	r2, #0
 8003438:	2100      	movs	r1, #0
 800343a:	200c      	movs	r0, #12
 800343c:	f7fd fbf0 	bl	8000c20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 8003440:	200c      	movs	r0, #12
 8003442:	f7fd fc02 	bl	8000c4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003446:	46c0      	nop			; (mov r8, r8)
 8003448:	46bd      	mov	sp, r7
 800344a:	b008      	add	sp, #32
 800344c:	bd80      	pop	{r7, pc}
 800344e:	46c0      	nop			; (mov r8, r8)
 8003450:	40012400 	.word	0x40012400
 8003454:	40021000 	.word	0x40021000

08003458 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b088      	sub	sp, #32
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003460:	230c      	movs	r3, #12
 8003462:	18fb      	adds	r3, r7, r3
 8003464:	0018      	movs	r0, r3
 8003466:	2314      	movs	r3, #20
 8003468:	001a      	movs	r2, r3
 800346a:	2100      	movs	r1, #0
 800346c:	f000 f97c 	bl	8003768 <memset>
  if(hi2c->Instance==I2C1)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a17      	ldr	r2, [pc, #92]	; (80034d4 <HAL_I2C_MspInit+0x7c>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d128      	bne.n	80034cc <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800347a:	4b17      	ldr	r3, [pc, #92]	; (80034d8 <HAL_I2C_MspInit+0x80>)
 800347c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800347e:	4b16      	ldr	r3, [pc, #88]	; (80034d8 <HAL_I2C_MspInit+0x80>)
 8003480:	2102      	movs	r1, #2
 8003482:	430a      	orrs	r2, r1
 8003484:	62da      	str	r2, [r3, #44]	; 0x2c
 8003486:	4b14      	ldr	r3, [pc, #80]	; (80034d8 <HAL_I2C_MspInit+0x80>)
 8003488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800348a:	2202      	movs	r2, #2
 800348c:	4013      	ands	r3, r2
 800348e:	60bb      	str	r3, [r7, #8]
 8003490:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003492:	210c      	movs	r1, #12
 8003494:	187b      	adds	r3, r7, r1
 8003496:	22c0      	movs	r2, #192	; 0xc0
 8003498:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800349a:	187b      	adds	r3, r7, r1
 800349c:	2212      	movs	r2, #18
 800349e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80034a0:	187b      	adds	r3, r7, r1
 80034a2:	2201      	movs	r2, #1
 80034a4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034a6:	187b      	adds	r3, r7, r1
 80034a8:	2203      	movs	r2, #3
 80034aa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80034ac:	187b      	adds	r3, r7, r1
 80034ae:	2201      	movs	r2, #1
 80034b0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034b2:	187b      	adds	r3, r7, r1
 80034b4:	4a09      	ldr	r2, [pc, #36]	; (80034dc <HAL_I2C_MspInit+0x84>)
 80034b6:	0019      	movs	r1, r3
 80034b8:	0010      	movs	r0, r2
 80034ba:	f7fd fbe3 	bl	8000c84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80034be:	4b06      	ldr	r3, [pc, #24]	; (80034d8 <HAL_I2C_MspInit+0x80>)
 80034c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034c2:	4b05      	ldr	r3, [pc, #20]	; (80034d8 <HAL_I2C_MspInit+0x80>)
 80034c4:	2180      	movs	r1, #128	; 0x80
 80034c6:	0389      	lsls	r1, r1, #14
 80034c8:	430a      	orrs	r2, r1
 80034ca:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80034cc:	46c0      	nop			; (mov r8, r8)
 80034ce:	46bd      	mov	sp, r7
 80034d0:	b008      	add	sp, #32
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	40005400 	.word	0x40005400
 80034d8:	40021000 	.word	0x40021000
 80034dc:	50000400 	.word	0x50000400

080034e0 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b082      	sub	sp, #8
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  if(hlptim->Instance==LPTIM1)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a0a      	ldr	r2, [pc, #40]	; (8003518 <HAL_LPTIM_MspInit+0x38>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d10e      	bne.n	8003510 <HAL_LPTIM_MspInit+0x30>
  {
  /* USER CODE BEGIN LPTIM1_MspInit 0 */

  /* USER CODE END LPTIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 80034f2:	4b0a      	ldr	r3, [pc, #40]	; (800351c <HAL_LPTIM_MspInit+0x3c>)
 80034f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034f6:	4b09      	ldr	r3, [pc, #36]	; (800351c <HAL_LPTIM_MspInit+0x3c>)
 80034f8:	2180      	movs	r1, #128	; 0x80
 80034fa:	0609      	lsls	r1, r1, #24
 80034fc:	430a      	orrs	r2, r1
 80034fe:	639a      	str	r2, [r3, #56]	; 0x38
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 8003500:	2200      	movs	r2, #0
 8003502:	2100      	movs	r1, #0
 8003504:	200d      	movs	r0, #13
 8003506:	f7fd fb8b 	bl	8000c20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 800350a:	200d      	movs	r0, #13
 800350c:	f7fd fb9d 	bl	8000c4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 8003510:	46c0      	nop			; (mov r8, r8)
 8003512:	46bd      	mov	sp, r7
 8003514:	b002      	add	sp, #8
 8003516:	bd80      	pop	{r7, pc}
 8003518:	40007c00 	.word	0x40007c00
 800351c:	40021000 	.word	0x40021000

08003520 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b082      	sub	sp, #8
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a06      	ldr	r2, [pc, #24]	; (8003548 <HAL_RTC_MspInit+0x28>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d106      	bne.n	8003540 <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003532:	4b06      	ldr	r3, [pc, #24]	; (800354c <HAL_RTC_MspInit+0x2c>)
 8003534:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003536:	4b05      	ldr	r3, [pc, #20]	; (800354c <HAL_RTC_MspInit+0x2c>)
 8003538:	2180      	movs	r1, #128	; 0x80
 800353a:	02c9      	lsls	r1, r1, #11
 800353c:	430a      	orrs	r2, r1
 800353e:	651a      	str	r2, [r3, #80]	; 0x50
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003540:	46c0      	nop			; (mov r8, r8)
 8003542:	46bd      	mov	sp, r7
 8003544:	b002      	add	sp, #8
 8003546:	bd80      	pop	{r7, pc}
 8003548:	40002800 	.word	0x40002800
 800354c:	40021000 	.word	0x40021000

08003550 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b088      	sub	sp, #32
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003558:	230c      	movs	r3, #12
 800355a:	18fb      	adds	r3, r7, r3
 800355c:	0018      	movs	r0, r3
 800355e:	2314      	movs	r3, #20
 8003560:	001a      	movs	r2, r3
 8003562:	2100      	movs	r1, #0
 8003564:	f000 f900 	bl	8003768 <memset>
  if(huart->Instance==USART1)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a18      	ldr	r2, [pc, #96]	; (80035d0 <HAL_UART_MspInit+0x80>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d12a      	bne.n	80035c8 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003572:	4b18      	ldr	r3, [pc, #96]	; (80035d4 <HAL_UART_MspInit+0x84>)
 8003574:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003576:	4b17      	ldr	r3, [pc, #92]	; (80035d4 <HAL_UART_MspInit+0x84>)
 8003578:	2180      	movs	r1, #128	; 0x80
 800357a:	01c9      	lsls	r1, r1, #7
 800357c:	430a      	orrs	r2, r1
 800357e:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003580:	4b14      	ldr	r3, [pc, #80]	; (80035d4 <HAL_UART_MspInit+0x84>)
 8003582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003584:	4b13      	ldr	r3, [pc, #76]	; (80035d4 <HAL_UART_MspInit+0x84>)
 8003586:	2101      	movs	r1, #1
 8003588:	430a      	orrs	r2, r1
 800358a:	62da      	str	r2, [r3, #44]	; 0x2c
 800358c:	4b11      	ldr	r3, [pc, #68]	; (80035d4 <HAL_UART_MspInit+0x84>)
 800358e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003590:	2201      	movs	r2, #1
 8003592:	4013      	ands	r3, r2
 8003594:	60bb      	str	r3, [r7, #8]
 8003596:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003598:	210c      	movs	r1, #12
 800359a:	187b      	adds	r3, r7, r1
 800359c:	22c0      	movs	r2, #192	; 0xc0
 800359e:	00d2      	lsls	r2, r2, #3
 80035a0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035a2:	187b      	adds	r3, r7, r1
 80035a4:	2202      	movs	r2, #2
 80035a6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a8:	187b      	adds	r3, r7, r1
 80035aa:	2200      	movs	r2, #0
 80035ac:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035ae:	187b      	adds	r3, r7, r1
 80035b0:	2203      	movs	r2, #3
 80035b2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80035b4:	187b      	adds	r3, r7, r1
 80035b6:	2204      	movs	r2, #4
 80035b8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035ba:	187a      	adds	r2, r7, r1
 80035bc:	23a0      	movs	r3, #160	; 0xa0
 80035be:	05db      	lsls	r3, r3, #23
 80035c0:	0011      	movs	r1, r2
 80035c2:	0018      	movs	r0, r3
 80035c4:	f7fd fb5e 	bl	8000c84 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80035c8:	46c0      	nop			; (mov r8, r8)
 80035ca:	46bd      	mov	sp, r7
 80035cc:	b008      	add	sp, #32
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	40013800 	.word	0x40013800
 80035d4:	40021000 	.word	0x40021000

080035d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80035dc:	46c0      	nop			; (mov r8, r8)
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}

080035e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80035e2:	b580      	push	{r7, lr}
 80035e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80035e6:	e7fe      	b.n	80035e6 <HardFault_Handler+0x4>

080035e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80035ec:	46c0      	nop			; (mov r8, r8)
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}

080035f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80035f2:	b580      	push	{r7, lr}
 80035f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80035f6:	46c0      	nop			; (mov r8, r8)
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}

080035fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003600:	f7fc ff64 	bl	80004cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003604:	46c0      	nop			; (mov r8, r8)
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}

0800360a <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800360a:	b580      	push	{r7, lr}
 800360c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800360e:	2040      	movs	r0, #64	; 0x40
 8003610:	f7fd fcd4 	bl	8000fbc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8003614:	2080      	movs	r0, #128	; 0x80
 8003616:	f7fd fcd1 	bl	8000fbc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800361a:	46c0      	nop			; (mov r8, r8)
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}

08003620 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC, COMP1 and COMP2 interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8003624:	4b03      	ldr	r3, [pc, #12]	; (8003634 <ADC1_COMP_IRQHandler+0x14>)
 8003626:	0018      	movs	r0, r3
 8003628:	f7fd f8da 	bl	80007e0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 800362c:	46c0      	nop			; (mov r8, r8)
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
 8003632:	46c0      	nop			; (mov r8, r8)
 8003634:	20000144 	.word	0x20000144

08003638 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt / LPTIM1 wake-up interrupt through EXTI line 29.
  */
void LPTIM1_IRQHandler(void)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 800363c:	4b03      	ldr	r3, [pc, #12]	; (800364c <LPTIM1_IRQHandler+0x14>)
 800363e:	0018      	movs	r0, r3
 8003640:	f7fd fe90 	bl	8001364 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 8003644:	46c0      	nop			; (mov r8, r8)
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	46c0      	nop			; (mov r8, r8)
 800364c:	200000f0 	.word	0x200000f0

08003650 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8003654:	4b17      	ldr	r3, [pc, #92]	; (80036b4 <SystemInit+0x64>)
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	4b16      	ldr	r3, [pc, #88]	; (80036b4 <SystemInit+0x64>)
 800365a:	2180      	movs	r1, #128	; 0x80
 800365c:	0049      	lsls	r1, r1, #1
 800365e:	430a      	orrs	r2, r1
 8003660:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8003662:	4b14      	ldr	r3, [pc, #80]	; (80036b4 <SystemInit+0x64>)
 8003664:	68da      	ldr	r2, [r3, #12]
 8003666:	4b13      	ldr	r3, [pc, #76]	; (80036b4 <SystemInit+0x64>)
 8003668:	4913      	ldr	r1, [pc, #76]	; (80036b8 <SystemInit+0x68>)
 800366a:	400a      	ands	r2, r1
 800366c:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 800366e:	4b11      	ldr	r3, [pc, #68]	; (80036b4 <SystemInit+0x64>)
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	4b10      	ldr	r3, [pc, #64]	; (80036b4 <SystemInit+0x64>)
 8003674:	4911      	ldr	r1, [pc, #68]	; (80036bc <SystemInit+0x6c>)
 8003676:	400a      	ands	r2, r1
 8003678:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800367a:	4b0e      	ldr	r3, [pc, #56]	; (80036b4 <SystemInit+0x64>)
 800367c:	689a      	ldr	r2, [r3, #8]
 800367e:	4b0d      	ldr	r3, [pc, #52]	; (80036b4 <SystemInit+0x64>)
 8003680:	2101      	movs	r1, #1
 8003682:	438a      	bics	r2, r1
 8003684:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8003686:	4b0b      	ldr	r3, [pc, #44]	; (80036b4 <SystemInit+0x64>)
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	4b0a      	ldr	r3, [pc, #40]	; (80036b4 <SystemInit+0x64>)
 800368c:	490c      	ldr	r1, [pc, #48]	; (80036c0 <SystemInit+0x70>)
 800368e:	400a      	ands	r2, r1
 8003690:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8003692:	4b08      	ldr	r3, [pc, #32]	; (80036b4 <SystemInit+0x64>)
 8003694:	68da      	ldr	r2, [r3, #12]
 8003696:	4b07      	ldr	r3, [pc, #28]	; (80036b4 <SystemInit+0x64>)
 8003698:	490a      	ldr	r1, [pc, #40]	; (80036c4 <SystemInit+0x74>)
 800369a:	400a      	ands	r2, r1
 800369c:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800369e:	4b05      	ldr	r3, [pc, #20]	; (80036b4 <SystemInit+0x64>)
 80036a0:	2200      	movs	r2, #0
 80036a2:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80036a4:	4b08      	ldr	r3, [pc, #32]	; (80036c8 <SystemInit+0x78>)
 80036a6:	2280      	movs	r2, #128	; 0x80
 80036a8:	0512      	lsls	r2, r2, #20
 80036aa:	609a      	str	r2, [r3, #8]
#endif
}
 80036ac:	46c0      	nop			; (mov r8, r8)
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	46c0      	nop			; (mov r8, r8)
 80036b4:	40021000 	.word	0x40021000
 80036b8:	88ff400c 	.word	0x88ff400c
 80036bc:	fef6fff6 	.word	0xfef6fff6
 80036c0:	fffbffff 	.word	0xfffbffff
 80036c4:	ff02ffff 	.word	0xff02ffff
 80036c8:	e000ed00 	.word	0xe000ed00

080036cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80036cc:	480d      	ldr	r0, [pc, #52]	; (8003704 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80036ce:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80036d0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80036d2:	e003      	b.n	80036dc <LoopCopyDataInit>

080036d4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80036d4:	4b0c      	ldr	r3, [pc, #48]	; (8003708 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 80036d6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80036d8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80036da:	3104      	adds	r1, #4

080036dc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 80036dc:	480b      	ldr	r0, [pc, #44]	; (800370c <LoopForever+0xa>)
  ldr  r3, =_edata
 80036de:	4b0c      	ldr	r3, [pc, #48]	; (8003710 <LoopForever+0xe>)
  adds  r2, r0, r1
 80036e0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80036e2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80036e4:	d3f6      	bcc.n	80036d4 <CopyDataInit>
  ldr  r2, =_sbss
 80036e6:	4a0b      	ldr	r2, [pc, #44]	; (8003714 <LoopForever+0x12>)
  b  LoopFillZerobss
 80036e8:	e002      	b.n	80036f0 <LoopFillZerobss>

080036ea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80036ea:	2300      	movs	r3, #0
  str  r3, [r2]
 80036ec:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80036ee:	3204      	adds	r2, #4

080036f0 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 80036f0:	4b09      	ldr	r3, [pc, #36]	; (8003718 <LoopForever+0x16>)
  cmp  r2, r3
 80036f2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80036f4:	d3f9      	bcc.n	80036ea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80036f6:	f7ff ffab 	bl	8003650 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80036fa:	f000 f811 	bl	8003720 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80036fe:	f7ff fbd3 	bl	8002ea8 <main>

08003702 <LoopForever>:

LoopForever:
    b LoopForever
 8003702:	e7fe      	b.n	8003702 <LoopForever>
   ldr   r0, =_estack
 8003704:	20004fff 	.word	0x20004fff
  ldr  r3, =_sidata
 8003708:	0800380c 	.word	0x0800380c
  ldr  r0, =_sdata
 800370c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003710:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 8003714:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 8003718:	200001a0 	.word	0x200001a0

0800371c <AES_RNG_LPUART1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800371c:	e7fe      	b.n	800371c <AES_RNG_LPUART1_IRQHandler>
	...

08003720 <__libc_init_array>:
 8003720:	b570      	push	{r4, r5, r6, lr}
 8003722:	2600      	movs	r6, #0
 8003724:	4d0c      	ldr	r5, [pc, #48]	; (8003758 <__libc_init_array+0x38>)
 8003726:	4c0d      	ldr	r4, [pc, #52]	; (800375c <__libc_init_array+0x3c>)
 8003728:	1b64      	subs	r4, r4, r5
 800372a:	10a4      	asrs	r4, r4, #2
 800372c:	42a6      	cmp	r6, r4
 800372e:	d109      	bne.n	8003744 <__libc_init_array+0x24>
 8003730:	2600      	movs	r6, #0
 8003732:	f000 f821 	bl	8003778 <_init>
 8003736:	4d0a      	ldr	r5, [pc, #40]	; (8003760 <__libc_init_array+0x40>)
 8003738:	4c0a      	ldr	r4, [pc, #40]	; (8003764 <__libc_init_array+0x44>)
 800373a:	1b64      	subs	r4, r4, r5
 800373c:	10a4      	asrs	r4, r4, #2
 800373e:	42a6      	cmp	r6, r4
 8003740:	d105      	bne.n	800374e <__libc_init_array+0x2e>
 8003742:	bd70      	pop	{r4, r5, r6, pc}
 8003744:	00b3      	lsls	r3, r6, #2
 8003746:	58eb      	ldr	r3, [r5, r3]
 8003748:	4798      	blx	r3
 800374a:	3601      	adds	r6, #1
 800374c:	e7ee      	b.n	800372c <__libc_init_array+0xc>
 800374e:	00b3      	lsls	r3, r6, #2
 8003750:	58eb      	ldr	r3, [r5, r3]
 8003752:	4798      	blx	r3
 8003754:	3601      	adds	r6, #1
 8003756:	e7f2      	b.n	800373e <__libc_init_array+0x1e>
 8003758:	08003804 	.word	0x08003804
 800375c:	08003804 	.word	0x08003804
 8003760:	08003804 	.word	0x08003804
 8003764:	08003808 	.word	0x08003808

08003768 <memset>:
 8003768:	0003      	movs	r3, r0
 800376a:	1812      	adds	r2, r2, r0
 800376c:	4293      	cmp	r3, r2
 800376e:	d100      	bne.n	8003772 <memset+0xa>
 8003770:	4770      	bx	lr
 8003772:	7019      	strb	r1, [r3, #0]
 8003774:	3301      	adds	r3, #1
 8003776:	e7f9      	b.n	800376c <memset+0x4>

08003778 <_init>:
 8003778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800377a:	46c0      	nop			; (mov r8, r8)
 800377c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800377e:	bc08      	pop	{r3}
 8003780:	469e      	mov	lr, r3
 8003782:	4770      	bx	lr

08003784 <_fini>:
 8003784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003786:	46c0      	nop			; (mov r8, r8)
 8003788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800378a:	bc08      	pop	{r3}
 800378c:	469e      	mov	lr, r3
 800378e:	4770      	bx	lr
